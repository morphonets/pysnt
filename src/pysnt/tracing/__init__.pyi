"""Comprehensive type stubs for Java classes."""

from typing import Any, List, Dict, Optional, Union, overload, Set, Callable

class BiSearch:
    """
    SNT BiSearch class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: Any, arg8: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: Any, arg9: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: Any, arg11: Any, arg12: Any) -> None: ...

    # Fields
    imgWidth: int
    imgHeight: int
    imgDepth: int

    # Methods
    def addProgressListener(self, arg0: Any) -> None: ...
    def getNodesAsImage(self) -> Any: ...
    def getResult(self) -> Any: ...
    def pointsConsideredInSearch(self) -> int: ...
    def printStatus(self) -> None: ...
    def reportFinished(self, arg0: bool) -> None: ...
    def run(self) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class BiSearchNode:
    """
    SNT BiSearchNode class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: int, arg3: float, arg4: float, arg5: float, arg6: float, arg7: Any, arg8: Any) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: int) -> None: ...

    # Methods
    def getF(self, arg0: bool) -> float: ...
    def getFFromGoal(self) -> float: ...
    def getFFromStart(self) -> float: ...
    def getG(self, arg0: bool) -> float: ...
    def getGFromGoal(self) -> float: ...
    def getGFromStart(self) -> float: ...
    def getHeapHandle(self, arg0: bool) -> Any: ...
    def getHeapHandleFromGoal(self) -> Any: ...
    def getHeapHandleFromStart(self) -> Any: ...
    def getPredecessorFromGoal(self) -> Any: ...
    def getPredecessorFromStart(self) -> Any: ...
    def getState(self, arg0: bool) -> Any: ...
    def getStateFromGoal(self) -> Any: ...
    def getStateFromStart(self) -> Any: ...
    def getX(self) -> int: ...
    def getY(self) -> int: ...
    def getZ(self) -> int: ...
    def heapDecreaseKey(self, arg0: bool) -> None: ...
    def heapInsert(self, arg0: Any, arg1: bool) -> None: ...
    def setFFromGoal(self, arg0: float) -> None: ...
    def setFFromStart(self, arg0: float) -> None: ...
    def setFrom(self, arg0: float, arg1: float, arg2: Any, arg3: bool) -> None: ...
    def setFromGoal(self, arg0: float, arg1: float, arg2: Any) -> None: ...
    def setFromStart(self, arg0: float, arg1: float, arg2: Any) -> None: ...
    def setGFromGoal(self, arg0: float) -> None: ...
    def setGFromStart(self, arg0: float) -> None: ...
    def setHeapHandle(self, arg0: Any, arg1: bool) -> None: ...
    def setHeapHandleFromGoal(self, arg0: Any) -> None: ...
    def setHeapHandleFromStart(self, arg0: Any) -> None: ...
    def setPosition(self, arg0: int, arg1: int, arg2: int) -> None: ...
    def setPredecessorFromGoal(self, arg0: Any) -> None: ...
    def setPredecessorFromStart(self, arg0: Any) -> None: ...
    def setState(self, arg0: Any, arg1: bool) -> None: ...
    def setStateFromGoal(self, arg0: Any) -> None: ...
    def setStateFromStart(self, arg0: Any) -> None: ...
    def setX(self, arg0: int) -> None: ...
    def setY(self, arg0: int) -> None: ...
    def setZ(self, arg0: int) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class DefaultSearchNode:
    """
    SNT DefaultSearchNode class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int, arg1: int, arg2: int, arg3: float, arg4: float, arg5: Any, arg6: int) -> None: ...

    # Fields
    x: int
    y: int
    z: int
    heapHandle: Any
    g: float
    h: float
    f: float
    predecessor: Any
    searchStatus: int

    # Methods
    def asPath(self, arg0: float, arg1: float, arg2: float, arg3: str) -> Any: ...
    def asPathReversed(self, arg0: float, arg1: float, arg2: float, arg3: str) -> Any: ...
    @overload
    def compareTo(self, arg0: Any) -> int: ...
    @overload
    def compareTo(self, arg0: Any) -> int: ...
    def getHandle(self) -> Any: ...
    def getPredecessor(self) -> Any: ...
    def getX(self) -> int: ...
    def getY(self) -> int: ...
    def getZ(self) -> int: ...
    def setFrom(self, arg0: Any) -> None: ...
    def setHandle(self, arg0: Any) -> None: ...
    def setPredecessor(self, arg0: Any) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class FillerThread:
    """
    SNT FillerThread class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any, arg2: float, arg3: int, arg4: int, arg5: Any, arg6: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: float, arg2: int, arg3: int, arg4: Any, arg5: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: float, arg2: int, arg3: int, arg4: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: float, arg2: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any, arg2: float, arg3: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any, arg2: float, arg3: int, arg4: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any, arg2: float, arg3: int, arg4: int, arg5: Any) -> None: ...

    # Fields
    OPEN_FROM_START: int
    CLOSED_FROM_START: int
    OPEN_FROM_GOAL: int
    CLOSED_FROM_GOAL: int
    FREE: int
    SUCCESS: int
    CANCELLED: int
    TIMED_OUT: int
    POINTS_EXHAUSTED: int
    OUT_OF_MEMORY: int
    EXIT_REASONS_STRINGS: List[str]
    imgWidth: int
    imgHeight: int
    imgDepth: int

    # Methods
    def addNode(self, arg0: Any, arg1: bool) -> None: ...
    def addProgressListener(self, arg0: Any) -> None: ...
    def createNewNode(self, arg0: int, arg1: int, arg2: int, arg3: float, arg4: float, arg5: Any, arg6: int) -> Any: ...
    @overload
    @staticmethod
    def fromFill(arg0: Any, arg1: Any, arg2: Any, arg3: Any) -> Any: ...
    @overload
    @staticmethod
    def fromFill(arg0: Any, arg1: Any, arg2: Any) -> Any: ...
    def getDistanceAtPoint(self, arg0: float, arg1: float, arg2: float) -> float: ...
    def getExitReason(self) -> int: ...
    def getFill(self) -> Any: ...
    def getNodesAsImage(self) -> Any: ...
    def getNodesAsImageFromGoal(self) -> Any: ...
    def getNodesAsImageFromStart(self) -> Any: ...
    def getResult(self) -> Any: ...
    def getThreshold(self) -> float: ...
    def pointsConsideredInSearch(self) -> int: ...
    def printStatus(self) -> None: ...
    def reportFinished(self, arg0: bool) -> None: ...
    def run(self) -> None: ...
    def setSourcePaths(self, arg0: List[Any]) -> None: ...
    def setStopAtThreshold(self, arg0: bool) -> None: ...
    def setStoreExtraNodes(self, arg0: bool) -> None: ...
    def setThreshold(self, arg0: float) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class PathResult:
    """
    SNT PathResult class with complete method signatures.
    Generated using Java reflection.
    """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        """Initialize PathResult."""
        ...

    # Methods
    def getErrorMessage(self) -> str: ...
    def getNumberOfPoints(self) -> int: ...
    def getPath(self) -> List[float]: ...
    def getSuccess(self) -> bool: ...
    def setErrorMessage(self, arg0: str) -> None: ...
    def setPath(self, arg0: List[float]) -> None: ...
    def setSuccess(self, arg0: bool) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class SearchNode:
    """
    SNT SearchNode class with complete method signatures.
    Generated using Java reflection.
    """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        """Initialize SearchNode."""
        ...

    # Methods
    def getX(self) -> int: ...
    def getY(self) -> int: ...
    def getZ(self) -> int: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class SearchThread:
    """
    SNT SearchThread class with complete method signatures.
    Generated using Java reflection.
    """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        """Initialize SearchThread."""
        ...

    # Fields
    OPEN_FROM_START: int
    CLOSED_FROM_START: int
    OPEN_FROM_GOAL: int
    CLOSED_FROM_GOAL: int
    FREE: int
    SUCCESS: int
    CANCELLED: int
    TIMED_OUT: int
    POINTS_EXHAUSTED: int
    OUT_OF_MEMORY: int
    EXIT_REASONS_STRINGS: List[str]
    imgWidth: int
    imgHeight: int
    imgDepth: int

    # Methods
    def addNode(self, arg0: Any, arg1: bool) -> None: ...
    def addProgressListener(self, arg0: Any) -> None: ...
    def createNewNode(self, arg0: int, arg1: int, arg2: int, arg3: float, arg4: float, arg5: Any, arg6: int) -> Any: ...
    def getExitReason(self) -> int: ...
    def getNodesAsImageFromGoal(self) -> Any: ...
    def getNodesAsImageFromStart(self) -> Any: ...
    def getResult(self) -> Any: ...
    def pointsConsideredInSearch(self) -> int: ...
    def printStatus(self) -> None: ...
    def reportFinished(self, arg0: bool) -> None: ...
    def run(self) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class TracerThread:
    """
    SNT TracerThread class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: Any, arg10: Any, arg11: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: Any, arg10: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: Any, arg8: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: Any, arg8: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: Any, arg9: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int, arg8: int, arg9: int, arg10: Any, arg11: Any, arg12: Any) -> None: ...

    # Fields
    OPEN_FROM_START: int
    CLOSED_FROM_START: int
    OPEN_FROM_GOAL: int
    CLOSED_FROM_GOAL: int
    FREE: int
    SUCCESS: int
    CANCELLED: int
    TIMED_OUT: int
    POINTS_EXHAUSTED: int
    OUT_OF_MEMORY: int
    EXIT_REASONS_STRINGS: List[str]
    imgWidth: int
    imgHeight: int
    imgDepth: int

    # Methods
    def addNode(self, arg0: Any, arg1: bool) -> None: ...
    def addProgressListener(self, arg0: Any) -> None: ...
    def createNewNode(self, arg0: int, arg1: int, arg2: int, arg3: float, arg4: float, arg5: Any, arg6: int) -> Any: ...
    def getExitReason(self) -> int: ...
    def getNodesAsImageFromGoal(self) -> Any: ...
    def getNodesAsImageFromStart(self) -> Any: ...
    def getResult(self) -> Any: ...
    def pointsConsideredInSearch(self) -> int: ...
    def printStatus(self) -> None: ...
    def reportFinished(self, arg0: bool) -> None: ...
    def run(self) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...


# Other functions
def artist(*args: Any, **kwargs: Any) -> Any: ...
def cost(*args: Any, **kwargs: Any) -> Any: ...
def get_available_classes() -> Any: ...
def get_class(class_name: str) -> Any: ...
def get_curated_classes() -> Any: ...
def get_extended_classes() -> Any: ...
def heuristic(*args: Any, **kwargs: Any) -> Any: ...
def image(*args: Any, **kwargs: Any) -> Any: ...
def list_classes() -> None: ...
def setup_module_classes(*args: Any, **kwargs: Any) -> Any: ...

# Imported classes
class Any: ...
class Dict: ...
class List: ...

# Constants
CURATED_CLASSES: List[str]
EXTENDED_CLASSES: List[str]