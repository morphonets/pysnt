"""
Type stubs for converters module

Auto-generated stub file.
"""

from typing import Any, Dict, List, Optional, Type, Callable, Tuple
from .core import SNTObject
from matplotlib.figure import Figure

logger: Any
def _setup_matplotlib_interactive() -> Any: ...

def _extract_frame_parameter(kwargs: Dict[str, Any]) -> int: ...

def _filter_matplotlib_kwargs(kwargs: Dict[str, Any], additional_exclude: Optional[List[str]] = None) -> Dict[str, Any]: ...

def _create_standard_error_message(operation: str, error: Exception, obj_type: str = None) -> str: ...

def _create_snt_object(data_type: Type, data: Any = None, metadata: Optional[Dict[str, Any]] = None, error: Optional[Exception] = None) -> SNTObject: ...

def _create_converter_result(data: Any, source_type: str, **metadata_kwargs: Any) -> SNTObject: ...

def _create_error_result(data_type: Type, error: Exception, source_type: str = None) -> SNTObject: ...

def _matplotlib_context(figsize: Any = None, dpi: Any = None, **kwargs: Any) -> Any: ...

def _create_standard_figure(data: Any = None, title: str = None, figsize: Any = None, dpi: Any = None, cmap: str = None, add_colorbar: bool = True, is_rgb: bool = False, **kwargs: Any) -> tuple: ...

def _temp_file(format_type: Any, temp_dir: Any, cleanup: Any) -> Any: ...

def _temp_directory(temp_dir: Any, cleanup: Any) -> Any: ...

def _diagnose_graph_structure(nx_graph: Any, graph_type: str) -> None: ...

def _extract_color_attributes(color_obj: Any, prefix: str) -> Dict[str, Any]: ...

class SNTObject:
    pass

def _get_java_class_name(obj: Any) -> str: ...

class JavaTypeDetector:
    def has_class_name(obj: Any, *names: Any) -> bool: ...
    def has_methods(obj: Any, *method_names: Any) -> bool: ...
    def matches_pattern(obj: Any, class_patterns: List[str], required_methods: List[str]) -> bool: ...

def _is_snt_object(obj: Any) -> bool: ...

def _is_snt_tree(obj: Any) -> bool: ...

def _is_snt_path(obj: Any) -> bool: ...

def _is_gui_object(obj: Any) -> bool: ...

def _is_xarray_object(obj: Any) -> bool: ...

def _is_snt_chart(obj: Any) -> bool: ...

def _is_snt_table(obj: Any) -> bool: ...

def _is_snt_graph(obj: Any) -> bool: ...

def _is_imageplus(obj: Any) -> bool: ...

class VertexExtractor:
    def extract_attributes(self: Any, vertex: Any, requested_attrs: List[str]) -> Dict[str, Any]: ...
    def get_default_attributes(self: Any) -> List[str]: ...
    def get_display_position(self: Any, vertex: Any) -> Optional[tuple]: ...

class EdgeExtractor:
    def extract_attributes(self: Any, edge: Any, requested_attrs: List[str]) -> Dict[str, Any]: ...
    def get_default_attributes(self: Any) -> List[str]: ...

class SWCPointExtractor:
    def extract_attributes(self: Any, vertex: Any, requested_attrs: List[str]) -> Dict[str, Any]: ...
    def get_default_attributes(self: Any) -> List[str]: ...
    def get_display_position(self: Any, vertex: Any) -> Optional[tuple]: ...

class BrainAnnotationExtractor:
    def extract_attributes(self: Any, vertex: Any, requested_attrs: List[str]) -> Dict[str, Any]: ...
    def get_default_attributes(self: Any) -> List[str]: ...

class SWCWeightedEdgeExtractor:
    def extract_attributes(self: Any, edge: Any, requested_attrs: List[str]) -> Dict[str, Any]: ...
    def get_default_attributes(self: Any) -> List[str]: ...

class AnnotationWeightedEdgeExtractor:
    def extract_attributes(self: Any, edge: Any, requested_attrs: List[str]) -> Dict[str, Any]: ...
    def get_default_attributes(self: Any) -> List[str]: ...

_VERTEX_EXTRACTORS: Any
_EDGE_EXTRACTORS: Any
def _detect_vertex_type(graph: Any) -> str: ...

def _detect_edge_type(graph: Any) -> str: ...

def _convert_snt_graph(graph: Any, **kwargs: Any) -> SNTObject: ...

def _extract_imageplus_metadata(imageplus: Any, **kwargs: Any) -> dict: ...

def _is_directed_weighted_graph(obj: Any) -> bool: ...

def _convert_snt_chart(chart: Any, **kwargs: Any) -> SNTObject: ...

def _convert_path_to_xarray(path: Any) -> Any: ...

def _convert_single_snt_chart(chart: Any, format_type: str, temp_dir: str, scale: float) -> Figure: ...

def _convert_combined_snt_chart(chart: Any, format_type: str, temp_dir: str, scale: float, max_panels: int, panel_layout: str) -> Figure: ...

def _create_figure_with_image(img_array: Any, figsize: Any, title: Any, dpi: Any, tight_layout: Any) -> Any: ...

def _png_to_matplotlib(png_file: str, figsize: Any) -> Figure: ...

def _convert_directed_weighted_graph(graph: Any, **kwargs: Any) -> SNTObject: ...

def _convert_snt_table(table: Any, **kwargs: Any) -> SNTObject: ...

def _svg_to_matplotlib(svg_file: Any, dpi: Any, figsize: Any, background: Any) -> Any: ...

def _pdf_to_matplotlib(pdf_file: Any, page: Any, dpi: Any, figsize: Any) -> Any: ...

SNT_CONVERTERS: Any
def register_snt_converters() -> Any: ...

def _get_display_handler(obj: Any) -> Any: ...

def display(obj: Any, **kwargs: Any) -> Any: ...

def _handle_snt_object_display(obj: Any, **kwargs: Any) -> Any: ...

def _display_snt_object(obj: Any, **kwargs: Any) -> Any: ...

def _display_imageplus(obj: Any, **kwargs: Any) -> Any: ...

def _display_with_auto_conversion(obj: Any, **kwargs: Any) -> Any: ...

def _show_matplotlib_figure(fig: Any, **kwargs: Any) -> bool: ...

def _get_default_layout_for_graph_type(graph_type: str) -> str: ...

def _graph_to_matplotlib(graph: Any, **kwargs: Any) -> Figure: ...

def _display_matplotlib_figure(fig: Figure, **kwargs: Any) -> None: ...

def _display_xarray(xarr: Any, **kwargs: Any) -> None: ...

def _show_pandasgui_dataframe(df: Any, title: Any, **kwargs: Any) -> bool: ...

def _display_dataset_as_dataframe(dataset: Any, **kwargs: Any) -> bool: ...

def _create_dataset_summary_plot(dataset: Any, display_vars: List[str], title: str, figsize: tuple) -> bool: ...

def _create_dataset_distribution_plot(dataset: Any, display_vars: List[str], title: str, figsize: tuple) -> bool: ...

def _create_dataset_correlation_plot(dataset: Any, display_vars: List[str], title: str, figsize: tuple) -> bool: ...

def _display_xarray_dataset(dataset: Any, **kwargs: Any) -> Any: ...

_DISPLAY_HANDLERS: Any
def _display_array_data(data: Any, source_type: Any, **kwargs: Any) -> Any: ...

def register_display_handler(obj_type: str, handler_func: Callable[[Dict[str, Any]], None]) -> Any: ...

def list_converters() -> List[Dict[str, Any]]: ...

def _should_enhance_object(obj: Any) -> bool: ...

def _enhanced_show_method(original_obj: Any) -> Any: ...

class EnhancedJavaObject:
    def __init__(self: Any, java_obj: Any) -> Any: ...
    def __getattr__(self: Any, name: Any) -> Any: ...
    def __setattr__(self: Any, name: Any, value: Any) -> Any: ...
    def __dir__(self: Any) -> Any: ...
    def __repr__(self: Any) -> Any: ...
    def _enhanced_show(self: Any, *args: Any, **kwargs: Any) -> Any: ...
    def _enhanced_setVisible(self: Any, visible: Any, **kwargs: Any) -> Any: ...

def enhance_java_object(obj: Any) -> Any: ...

def auto_enhance_java_objects(enabled: bool) -> Any: ...
