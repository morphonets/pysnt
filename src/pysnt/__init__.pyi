"""Comprehensive type stubs for Java classes."""

from typing import Any, List, Dict, Optional, Union, overload, Set

class Fill:
    """
    SNT Fill class with complete method signatures.
    Generated using Java reflection.
    """

    def __init__(self) -> None:
        """Initialize Fill."""
        ...

    # Fields
    distanceThreshold: float
    metric: Any
    x_spacing: float
    y_spacing: float
    z_spacing: float
    spacing_units: str

    # Methods
    def add(self, arg0: int, arg1: int, arg2: int, arg3: float, arg4: int, arg5: bool) -> None: ...
    def getEstimatedMeanRadius(self) -> float: ...
    def getMetric(self) -> Any: ...
    def getNodeList(self) -> List[Any]: ...
    def getSourcePaths(self) -> Set[Any]: ...
    def getSourcePathsStringHuman(self) -> str: ...
    def getSourcePathsStringMachine(self) -> str: ...
    def getThreshold(self) -> float: ...
    def getVolume(self) -> float: ...
    def setMetric(self, arg0: Any) -> None: ...
    @overload
    def setSourcePaths(self, arg0: List[Any]) -> None: ...
    @overload
    def setSourcePaths(self, arg0: Set[Any]) -> None: ...
    def setSpacing(self, arg0: float, arg1: float, arg2: float, arg3: str) -> None: ...
    def setThreshold(self, arg0: float) -> None: ...
    def writeNodesXML(self, arg0: Any) -> None: ...
    def writeXML(self, arg0: Any, arg1: int) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class Path:
    """
    SNT Path class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: str) -> None: ...

    # Fields
    SWC_UNDEFINED: int
    SWC_SOMA: int
    SWC_AXON: int
    SWC_DENDRITE: int
    SWC_APICAL_DENDRITE: int
    SWC_CUSTOM: int
    SWC_UNSPECIFIED: int
    SWC_GLIA_PROCESS: int
    SWC_CUSTOM2: int
    SWC_FORK_POINT: int
    SWC_END_POINT: int
    SWC_UNDEFINED_LABEL: str
    SWC_SOMA_LABEL: str
    SWC_AXON_LABEL: str
    SWC_DENDRITE_LABEL: str
    SWC_APICAL_DENDRITE_LABEL: str
    SWC_CUSTOM_LABEL: str
    SWC_UNSPECIFIED_LABEL: str
    SWC_GLIA_PROCESS_LABEL: str
    SWC_CUSTOM2_LABEL: str

    # Methods
    def add(self, arg0: Any) -> None: ...
    def addAsLinesTo3DViewer(self, arg0: Any, arg1: Any, arg2: Any) -> Any: ...
    @overload
    def addDiscsTo3DViewer(self, arg0: Any, arg1: Any, arg2: Any) -> Any: ...
    @overload
    def addDiscsTo3DViewer(self, arg0: Any, arg1: Any, arg2: Any) -> Any: ...
    def addNode(self, arg0: Any) -> None: ...
    def addPointDouble(self, arg0: float, arg1: float, arg2: float) -> None: ...
    @overload
    def addTo3DViewer(self, arg0: Any, arg1: Any, arg2: Any) -> None: ...
    @overload
    def addTo3DViewer(self, arg0: Any, arg1: Any, arg2: Any) -> None: ...
    @overload
    def clone(self) -> Any: ...
    @overload
    def clone(self) -> Any: ...
    @overload
    def clone(self, arg0: bool) -> Any: ...
    @overload
    def compareTo(self, arg0: Any) -> int: ...
    @overload
    def compareTo(self, arg0: Any) -> int: ...
    @overload
    def contains(self, arg0: Any) -> bool: ...
    @overload
    def contains(self, arg0: Any, arg1: float) -> bool: ...
    def createCircles(self) -> None: ...
    def createPath(self) -> Any: ...
    def detachFromParent(self) -> None: ...
    def downsample(self, arg0: float) -> None: ...
    @overload
    def drawPathAsPoints(self, arg0: Any, arg1: Any, arg2: Any, arg3: int, arg4: bool, arg5: bool) -> None: ...
    @overload
    def drawPathAsPoints(self, arg0: Any, arg1: Any, arg2: Any, arg3: bool, arg4: bool, arg5: int, arg6: int) -> None: ...
    def findJunctionIndices(self) -> Any: ...
    def findJunctions(self) -> List[Any]: ...
    def firstNode(self) -> Any: ...
    def getAngle(self, arg0: int) -> float: ...
    def getApproximatedSurface(self) -> float: ...
    def getApproximatedVolume(self) -> float: ...
    def getBranchPoint(self) -> Any: ...
    def getBranchPointIndex(self) -> int: ...
    def getBranchPoints(self) -> Set[Any]: ...
    def getCalibration(self) -> Any: ...
    def getCanvasOffset(self) -> Any: ...
    def getChannel(self) -> int: ...
    def getChildren(self) -> List[Any]: ...
    def getColor(self) -> Any: ...
    def getColorRGB(self) -> Any: ...
    def getContraction(self) -> float: ...
    def getEditableNodeIndex(self) -> int: ...
    @overload
    def getExtensionAngle3D(self, arg0: Any) -> float: ...
    @overload
    def getExtensionAngle3D(self, arg0: bool) -> float: ...
    def getExtensionAngleFromHorizontal(self) -> float: ...
    def getExtensionAngleFromVertical(self) -> float: ...
    def getExtensionAngleXY(self) -> float: ...
    def getExtensionAngleXZ(self) -> float: ...
    def getExtensionAngleZY(self) -> float: ...
    def getExtensionAngles3D(self) -> List[float]: ...
    def getExtensionDirection3D(self) -> Any: ...
    def getFitted(self) -> Any: ...
    def getFractalDimension(self) -> float: ...
    def getFrame(self) -> int: ...
    def getID(self) -> int: ...
    def getInterpolatedPath(self, arg0: float) -> Any: ...
    def getJunctionNodes(self) -> Set[Any]: ...
    def getLength(self) -> float: ...
    def getMeanRadius(self) -> float: ...
    def getName(self) -> str: ...
    def getNode(self, arg0: int) -> Any: ...
    def getNodeAnnotation(self, arg0: int) -> Any: ...
    def getNodeColor(self, arg0: int) -> Any: ...
    def getNodeColors(self) -> List[Any]: ...
    def getNodeHemisphereFlag(self, arg0: int) -> str: ...
    def getNodeIndex(self, arg0: Any) -> int: ...
    def getNodeRadius(self, arg0: int) -> float: ...
    def getNodeTangent(self, arg0: int) -> List[float]: ...
    def getNodeValue(self, arg0: int) -> float: ...
    def getNodes(self) -> List[Any]: ...
    def getOrder(self) -> int: ...
    def getParentPath(self) -> Any: ...
    def getPoint3fList(self) -> List[Any]: ...
    def getPointInCanvas(self, arg0: int) -> Any: ...
    def getResampledPath(self, arg0: float) -> Any: ...
    def getSWCType(self) -> int: ...
    @staticmethod
    def getSWCcolor(arg0: int) -> Any: ...
    @staticmethod
    def getSWCtypeName(arg0: int, arg1: bool) -> str: ...
    @staticmethod
    def getSWCtypeNames() -> List[Any]: ...
    @staticmethod
    def getSWCtypes() -> List[Any]: ...
    def getSection(self, arg0: int, arg1: int) -> Any: ...
    def getSmoothedPath(self, arg0: int) -> Any: ...
    def getSpineOrVaricosityCount(self) -> int: ...
    def getStartJoins(self) -> Any: ...
    def getStartJoinsPoint(self) -> Any: ...
    def getTangent(self, arg0: int, arg1: int, arg2: List[float]) -> None: ...
    def getTreeID(self) -> int: ...
    def getTreeLabel(self) -> str: ...
    def getUnscaledNodes(self) -> List[Any]: ...
    def getUseFitted(self) -> bool: ...
    def getXUnscaled(self, arg0: int) -> int: ...
    def getXUnscaledDouble(self, arg0: int) -> float: ...
    def getYUnscaled(self, arg0: int) -> int: ...
    def getYUnscaledDouble(self, arg0: int) -> float: ...
    def getZUnscaled(self, arg0: int) -> int: ...
    def getZUnscaledDouble(self, arg0: int) -> float: ...
    def hasCustomColor(self) -> bool: ...
    def hasNodeAnnotations(self) -> bool: ...
    def hasNodeColors(self) -> bool: ...
    def hasNodeHemisphereFlags(self) -> bool: ...
    def hasNodeValues(self) -> bool: ...
    def hasRadii(self) -> bool: ...
    def hasTangents(self) -> bool: ...
    def indexNearestTo(self, arg0: float, arg1: float, arg2: float, arg3: float) -> int: ...
    @overload
    def insertNode(self, arg0: int, arg1: Any) -> None: ...
    @overload
    def insertNode(self, arg0: int, arg1: Any) -> None: ...
    @overload
    def interpolateMissingRadii(self, arg0: Any, arg1: bool) -> Dict[str, Any]: ...
    @overload
    def interpolateMissingRadii(self, arg0: bool) -> Dict[str, Any]: ...
    def isActiveVersion(self) -> bool: ...
    def isConnectedTo(self, arg0: Any) -> bool: ...
    def isFittedVersionOfAnotherPath(self) -> bool: ...
    def isPrimary(self) -> bool: ...
    def isSelected(self) -> bool: ...
    def lastNode(self) -> Any: ...
    def moveNode(self, arg0: int, arg1: Any) -> None: ...
    def nearestNodeTo(self, arg0: Any, arg1: float) -> Any: ...
    def removeFrom3DViewer(self, arg0: Any) -> None: ...
    def removeNode(self, arg0: int) -> None: ...
    def resetColor(self) -> None: ...
    def reverse(self) -> None: ...
    def reversed(self) -> Any: ...
    def setBranchFrom(self, arg0: Any, arg1: Any) -> None: ...
    def setCTposition(self, arg0: int, arg1: int) -> None: ...
    def setCanvasOffset(self, arg0: Any) -> None: ...
    @overload
    def setColor(self, arg0: Any) -> None: ...
    @overload
    def setColor(self, arg0: Any) -> None: ...
    def setEditableNode(self, arg0: int) -> None: ...
    def setGuessedTangents(self, arg0: int) -> None: ...
    def setName(self, arg0: str) -> None: ...
    def setNodeAnnotation(self, arg0: Any, arg1: int) -> None: ...
    @overload
    def setNodeColor(self, arg0: Any, arg1: int) -> None: ...
    @overload
    def setNodeColor(self, arg0: Any, arg1: int) -> None: ...
    def setNodeColors(self, arg0: List[Any]) -> None: ...
    def setNodeHemisphere(self, arg0: str, arg1: int) -> None: ...
    def setNodeRadius(self, arg0: float, arg1: int) -> None: ...
    @overload
    def setNodeTangent(self, arg0: List[float], arg1: int) -> None: ...
    @overload
    def setNodeTangent(self, arg0: float, arg1: float, arg2: float, arg3: int) -> None: ...
    def setNodeValue(self, arg0: float, arg1: int) -> None: ...
    def setNodeValues(self, arg0: List[float]) -> None: ...
    def setOrder(self, arg0: int) -> None: ...
    def setRadii(self, arg0: List[float]) -> None: ...
    @overload
    def setRadius(self, arg0: float) -> None: ...
    @overload
    def setRadius(self, arg0: float, arg1: int) -> None: ...
    def setSWCType(self, arg0: int) -> None: ...
    def setSelected(self, arg0: bool) -> None: ...
    def setSpineOrVaricosityCount(self, arg0: int) -> None: ...
    def setStartJoin(self, arg0: Any, arg1: Any) -> None: ...
    def setUseFitted(self, arg0: bool) -> None: ...
    def size(self) -> int: ...
    def transform(self, arg0: Any, arg1: Any, arg2: Any) -> Any: ...
    def unsetStartJoin(self) -> None: ...
    def upsample(self, arg0: float) -> None: ...
    def versionInUse(self) -> bool: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class PathAndFillManager:
    """
    SNT PathAndFillManager class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float, arg3: str) -> None: ...

    # Methods
    @overload
    def addPath(self, arg0: Any, arg1: int, arg2: int) -> None: ...
    @overload
    def addPath(self, arg0: Any, arg1: bool, arg2: bool) -> None: ...
    @overload
    def addPath(self, arg0: Any) -> None: ...
    def addPathAndFillListener(self, arg0: Any) -> None: ...
    @overload
    def addTree(self, arg0: Any, arg1: str) -> None: ...
    @overload
    def addTree(self, arg0: Any) -> None: ...
    def addTrees(self, arg0: List[Any]) -> None: ...
    def allPointsIterator(self) -> Any: ...
    def anySelected(self) -> bool: ...
    def assignSpatialSettings(self, arg0: Any) -> None: ...
    def canvasResized(self) -> None: ...
    def characters(self, arg0: List[str], arg1: int, arg2: int) -> None: ...
    def clear(self) -> None: ...
    def contentAdded(self, arg0: Any) -> None: ...
    def contentChanged(self, arg0: Any) -> None: ...
    def contentRemoved(self, arg0: Any) -> None: ...
    def contentSelected(self, arg0: Any) -> None: ...
    @staticmethod
    def createFromFile(arg0: str, arg1: List[int]) -> Any: ...
    @staticmethod
    def createFromGraph(arg0: Any, arg1: bool) -> Any: ...
    @staticmethod
    def createFromNodes(arg0: List[Any]) -> Any: ...
    def declaration(self, arg0: str, arg1: str, arg2: str) -> None: ...
    @overload
    def deletePath(self, arg0: Any) -> bool: ...
    @overload
    def deletePath(self, arg0: int) -> bool: ...
    @overload
    def deletePaths(self, arg0: List[int]) -> None: ...
    @overload
    def deletePaths(self, arg0: List[Any]) -> bool: ...
    def dispose(self) -> None: ...
    def downsampleAll(self, arg0: float) -> None: ...
    def endDocument(self) -> None: ...
    def endElement(self, arg0: str, arg1: str, arg2: str) -> None: ...
    def endPrefixMapping(self, arg0: str) -> None: ...
    def error(self, arg0: Any) -> None: ...
    def exportAllPathsAsSWC(self, arg0: str) -> bool: ...
    def exportFillsAsCSV(self, arg0: Any) -> None: ...
    def exportToCSV(self, arg0: Any) -> None: ...
    def exportTree(self, arg0: int, arg1: Any) -> bool: ...
    def fatalError(self, arg0: Any) -> None: ...
    def getBoundingBox(self, arg0: bool) -> Any: ...
    def getCorrespondences(self, arg0: Any, arg1: float) -> List[Any]: ...
    def getLoadedFills(self) -> Dict[str, Any]: ...
    def getPath(self, arg0: int) -> Any: ...
    def getPathFromID(self, arg0: int) -> Any: ...
    def getPathFromName(self, arg0: str, arg1: bool) -> Any: ...
    def getPaths(self) -> List[Any]: ...
    def getPathsFiltered(self) -> List[Any]: ...
    def getPathsInROI(self, arg0: Any) -> List[Any]: ...
    @overload
    def getPathsStructured(self, arg0: List[Any]) -> List[Any]: ...
    @overload
    def getPathsStructured(self) -> List[Any]: ...
    def getPlugin(self) -> Any: ...
    def getSWCFor(self, arg0: List[Any]) -> List[Any]: ...
    def getSelectedPaths(self) -> Set[Any]: ...
    @overload
    def getTree(self, arg0: int) -> Any: ...
    @overload
    def getTree(self, arg0: str) -> Any: ...
    def getTrees(self) -> List[Any]: ...
    def ignorableWhitespace(self, arg0: List[str], arg1: int, arg2: int) -> None: ...
    def importNeurons(self, arg0: Dict[str, Any], arg1: Any, arg2: str) -> Dict[str, Any]: ...
    @overload
    def importSWC(self, arg0: str, arg1: str) -> bool: ...
    @overload
    def importSWC(self, arg0: str, arg1: bool, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: bool, arg10: List[int]) -> bool: ...
    def importSWCs(self, arg0: Dict[str, Any], arg1: Any) -> List[Any]: ...
    def isSelected(self, arg0: Any) -> bool: ...
    def load(self, arg0: str, arg1: List[int]) -> bool: ...
    @overload
    def loadGuessingType(self, arg0: str) -> bool: ...
    @overload
    def loadGuessingType(self, arg0: str, arg1: Any) -> bool: ...
    @overload
    def nearestPointOnAnyPath(self, arg0: float, arg1: float, arg2: float, arg3: float) -> Any: ...
    @overload
    def nearestPointOnAnyPath(self, arg0: List[Any], arg1: Any, arg2: float) -> Any: ...
    def notationDecl(self, arg0: str, arg1: str, arg2: str) -> None: ...
    def pathChanged(self, arg0: Any) -> None: ...
    def processingInstruction(self, arg0: str, arg1: str) -> None: ...
    def resetListeners(self, arg0: Any) -> None: ...
    def resolveEntity(self, arg0: str, arg1: str) -> Any: ...
    def setDocumentLocator(self, arg0: Any) -> None: ...
    def setHeadless(self, arg0: bool) -> None: ...
    def size(self) -> int: ...
    def skippedEntity(self, arg0: str) -> None: ...
    def startDocument(self) -> None: ...
    def startElement(self, arg0: str, arg1: str, arg2: str, arg3: Any) -> None: ...
    def startPrefixMapping(self, arg0: str, arg1: str) -> None: ...
    def transformPaths(self, arg0: Any, arg1: Any, arg2: Any) -> Any: ...
    def transformationFinished(self, arg0: Any) -> None: ...
    def transformationStarted(self, arg0: Any) -> None: ...
    def transformationUpdated(self, arg0: Any) -> None: ...
    def universeClosed(self) -> None: ...
    def unparsedEntityDecl(self, arg0: str, arg1: str, arg2: str, arg3: str) -> None: ...
    def warning(self, arg0: Any) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class PathFitter:
    """
    SNT PathFitter class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any) -> None: ...

    # Fields
    DEFAULT_MAX_RADIUS: int
    DEFAULT_MIN_ANGLE: float
    RADII: int
    MIDPOINTS: int
    RADII_AND_MIDPOINTS: int
    FALLBACK_NAN: int
    FALLBACK_MIN_SEP: int
    FALLBACK_MODE: int

    # Methods
    def applySettings(self, arg0: Any) -> None: ...
    @overload
    def call(self) -> Any: ...
    @overload
    def call(self) -> Any: ...
    def getMaxRadius(self) -> int: ...
    def getPath(self) -> Any: ...
    def getSucceeded(self) -> bool: ...
    def readPreferences(self) -> None: ...
    def setImage(self, arg0: Any) -> None: ...
    def setMaxRadius(self, arg0: int) -> None: ...
    def setProgressCallback(self, arg0: int, arg1: Any) -> None: ...
    def setRadiusFallback(self, arg0: int) -> None: ...
    def setReplaceNodes(self, arg0: bool) -> None: ...
    def setScope(self, arg0: int) -> None: ...
    def setShowAnnotatedView(self, arg0: bool) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class PathManagerUI:
    """
    SNT PathManagerUI class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Any) -> None: ...

    # Fields
    DO_NOTHING_ON_CLOSE: int
    HIDE_ON_CLOSE: int
    DISPOSE_ON_CLOSE: int
    EXIT_ON_CLOSE: int
    DEFAULT_MODALITY_TYPE: Any
    TOP_ALIGNMENT: float
    CENTER_ALIGNMENT: float
    BOTTOM_ALIGNMENT: float
    LEFT_ALIGNMENT: float
    RIGHT_ALIGNMENT: float
    WIDTH: int
    HEIGHT: int
    PROPERTIES: int
    SOMEBITS: int
    FRAMEBITS: int
    ALLBITS: int
    ERROR: int
    ABORT: int

    # Methods
    def action(self, arg0: Any, arg1: Any) -> bool: ...
    @overload
    def add(self, arg0: Any, arg1: Any, arg2: int) -> None: ...
    @overload
    def add(self, arg0: Any, arg1: Any) -> None: ...
    @overload
    def add(self, arg0: str, arg1: Any) -> Any: ...
    @overload
    def add(self, arg0: Any, arg1: int) -> Any: ...
    @overload
    def add(self, arg0: Any) -> Any: ...
    @overload
    def add(self, arg0: Any) -> None: ...
    def addComponentListener(self, arg0: Any) -> None: ...
    def addContainerListener(self, arg0: Any) -> None: ...
    def addFocusListener(self, arg0: Any) -> None: ...
    def addHierarchyBoundsListener(self, arg0: Any) -> None: ...
    def addHierarchyListener(self, arg0: Any) -> None: ...
    def addInputMethodListener(self, arg0: Any) -> None: ...
    def addKeyListener(self, arg0: Any) -> None: ...
    def addMouseListener(self, arg0: Any) -> None: ...
    def addMouseMotionListener(self, arg0: Any) -> None: ...
    def addMouseWheelListener(self, arg0: Any) -> None: ...
    def addNotify(self) -> None: ...
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: Any) -> None: ...
    @overload
    def addPropertyChangeListener(self, arg0: Any) -> None: ...
    def addWindowFocusListener(self, arg0: Any) -> None: ...
    def addWindowListener(self, arg0: Any) -> None: ...
    def addWindowStateListener(self, arg0: Any) -> None: ...
    def applyComponentOrientation(self, arg0: Any) -> None: ...
    def applyDefaultTags(self, arg0: List[str]) -> None: ...
    @overload
    def applyResourceBundle(self, arg0: str) -> None: ...
    @overload
    def applyResourceBundle(self, arg0: Any) -> None: ...
    @overload
    def applySelectionFilter(self, arg0: str) -> None: ...
    @overload
    def applySelectionFilter(self, arg0: str, arg1: Any) -> None: ...
    @overload
    def applySelectionFilter(self, arg0: str, arg1: Any, arg2: Any) -> None: ...
    def applyTag(self, arg0: str) -> None: ...
    def areFocusTraversalKeysSet(self, arg0: int) -> bool: ...
    def bounds(self) -> Any: ...
    @overload
    def checkImage(self, arg0: Any, arg1: Any) -> int: ...
    @overload
    def checkImage(self, arg0: Any, arg1: int, arg2: int, arg3: Any) -> int: ...
    def clearSelection(self) -> None: ...
    @overload
    def contains(self, arg0: int, arg1: int) -> bool: ...
    @overload
    def contains(self, arg0: Any) -> bool: ...
    def countComponents(self) -> int: ...
    @overload
    def createBufferStrategy(self, arg0: int, arg1: Any) -> None: ...
    @overload
    def createBufferStrategy(self, arg0: int) -> None: ...
    @overload
    def createImage(self, arg0: Any) -> Any: ...
    @overload
    def createImage(self, arg0: int, arg1: int) -> Any: ...
    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: Any) -> Any: ...
    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> Any: ...
    def deliverEvent(self, arg0: Any) -> None: ...
    def disable(self) -> None: ...
    def dispatchEvent(self, arg0: Any) -> None: ...
    def dispose(self) -> None: ...
    def doLayout(self) -> None: ...
    @overload
    def enable(self, arg0: bool) -> None: ...
    @overload
    def enable(self) -> None: ...
    def enableInputMethods(self, arg0: bool) -> None: ...
    @staticmethod
    def extractTagsFromPath(arg0: Any) -> str: ...
    @staticmethod
    def extractTagsFromPaths(arg0: List[Any]) -> Set[Any]: ...
    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> Any: ...
    @overload
    def findComponentAt(self, arg0: Any) -> Any: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float) -> None: ...
    def geSelectedPathsAsTree(self) -> Any: ...
    def getAccessibleContext(self) -> Any: ...
    def getAlignmentX(self) -> float: ...
    def getAlignmentY(self) -> float: ...
    def getBackground(self) -> Any: ...
    def getBaseline(self, arg0: int, arg1: int) -> int: ...
    def getBaselineResizeBehavior(self) -> Any: ...
    @overload
    def getBounds(self, arg0: Any) -> Any: ...
    @overload
    def getBounds(self) -> Any: ...
    def getBufferStrategy(self) -> Any: ...
    def getColorModel(self) -> Any: ...
    def getComponent(self, arg0: int) -> Any: ...
    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> Any: ...
    @overload
    def getComponentAt(self, arg0: Any) -> Any: ...
    def getComponentCount(self) -> int: ...
    def getComponentListeners(self) -> List[Any]: ...
    def getComponentOrientation(self) -> Any: ...
    def getComponentZOrder(self, arg0: Any) -> int: ...
    def getComponents(self) -> List[Any]: ...
    def getContainerListeners(self) -> List[Any]: ...
    def getContentPane(self) -> Any: ...
    def getCursor(self) -> Any: ...
    def getDefaultCloseOperation(self) -> int: ...
    def getDropTarget(self) -> Any: ...
    def getFocusCycleRootAncestor(self) -> Any: ...
    def getFocusListeners(self) -> List[Any]: ...
    def getFocusOwner(self) -> Any: ...
    def getFocusTraversalKeys(self, arg0: int) -> Set[Any]: ...
    def getFocusTraversalKeysEnabled(self) -> bool: ...
    def getFocusTraversalPolicy(self) -> Any: ...
    def getFocusableWindowState(self) -> bool: ...
    def getFont(self) -> Any: ...
    def getFontMetrics(self, arg0: Any) -> Any: ...
    def getForeground(self) -> Any: ...
    def getGlassPane(self) -> Any: ...
    def getGraphics(self) -> Any: ...
    def getGraphicsConfiguration(self) -> Any: ...
    def getHeight(self) -> int: ...
    def getHierarchyBoundsListeners(self) -> List[Any]: ...
    def getHierarchyListeners(self) -> List[Any]: ...
    def getIconImages(self) -> List[Any]: ...
    def getIgnoreRepaint(self) -> bool: ...
    def getInputContext(self) -> Any: ...
    def getInputMethodListeners(self) -> List[Any]: ...
    def getInputMethodRequests(self) -> Any: ...
    def getInsets(self) -> Any: ...
    def getJMenuBar(self) -> Any: ...
    def getJTree(self) -> Any: ...
    def getKeyListeners(self) -> List[Any]: ...
    def getLayeredPane(self) -> Any: ...
    def getLayout(self) -> Any: ...
    def getListeners(self, arg0: Any) -> List[Any]: ...
    def getLocale(self) -> Any: ...
    @overload
    def getLocation(self) -> Any: ...
    @overload
    def getLocation(self, arg0: Any) -> Any: ...
    def getLocationOnScreen(self) -> Any: ...
    def getMaximumSize(self) -> Any: ...
    def getMinimumSize(self) -> Any: ...
    def getModalExclusionType(self) -> Any: ...
    def getModalityType(self) -> Any: ...
    def getMostRecentFocusOwner(self) -> Any: ...
    def getMouseListeners(self) -> List[Any]: ...
    def getMouseMotionListeners(self) -> List[Any]: ...
    @overload
    def getMousePosition(self, arg0: bool) -> Any: ...
    @overload
    def getMousePosition(self) -> Any: ...
    def getMouseWheelListeners(self) -> List[Any]: ...
    def getName(self) -> str: ...
    def getNavigationToolBar(self) -> Any: ...
    def getOpacity(self) -> float: ...
    def getOwnedWindows(self) -> List[Any]: ...
    def getOwner(self) -> Any: ...
    @staticmethod
    def getOwnerlessWindows() -> List[Any]: ...
    def getParent(self) -> Any: ...
    def getPathAndFillManager(self) -> Any: ...
    def getPreferredSize(self) -> Any: ...
    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List[Any]: ...
    @overload
    def getPropertyChangeListeners(self) -> List[Any]: ...
    def getRootPane(self) -> Any: ...
    def getSNT(self) -> Any: ...
    def getSearchable(self) -> Any: ...
    def getSelectedPaths(self, arg0: bool) -> List[Any]: ...
    def getSelectedPathsOrganizedByTrees(self, arg0: bool) -> Dict[str, Any]: ...
    def getShape(self) -> Any: ...
    @overload
    def getSize(self) -> Any: ...
    @overload
    def getSize(self, arg0: Any) -> Any: ...
    def getTitle(self) -> str: ...
    def getToolkit(self) -> Any: ...
    def getTransferHandler(self) -> Any: ...
    def getTreeLock(self) -> Any: ...
    def getType(self) -> Any: ...
    def getWarningString(self) -> str: ...
    def getWidth(self) -> int: ...
    def getWindowFocusListeners(self) -> List[Any]: ...
    def getWindowListeners(self) -> List[Any]: ...
    def getWindowStateListeners(self) -> List[Any]: ...
    @staticmethod
    def getWindows() -> List[Any]: ...
    def getX(self) -> int: ...
    def getY(self) -> int: ...
    def gotFocus(self, arg0: Any, arg1: Any) -> bool: ...
    def handleEvent(self, arg0: Any) -> bool: ...
    def hasFocus(self) -> bool: ...
    def hide(self) -> None: ...
    def imageUpdate(self, arg0: Any, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool: ...
    def insets(self) -> Any: ...
    def inside(self, arg0: int, arg1: int) -> bool: ...
    def invalidate(self) -> None: ...
    def isActive(self) -> bool: ...
    def isAlwaysOnTop(self) -> bool: ...
    def isAlwaysOnTopSupported(self) -> bool: ...
    def isAncestorOf(self, arg0: Any) -> bool: ...
    def isAutoRequestFocus(self) -> bool: ...
    def isBackgroundSet(self) -> bool: ...
    def isCursorSet(self) -> bool: ...
    @staticmethod
    def isDefaultLookAndFeelDecorated() -> bool: ...
    def isDisplayable(self) -> bool: ...
    def isDoubleBuffered(self) -> bool: ...
    def isEnabled(self) -> bool: ...
    @overload
    def isFocusCycleRoot(self) -> bool: ...
    @overload
    def isFocusCycleRoot(self, arg0: Any) -> bool: ...
    def isFocusOwner(self) -> bool: ...
    def isFocusTraversable(self) -> bool: ...
    def isFocusTraversalPolicyProvider(self) -> bool: ...
    def isFocusTraversalPolicySet(self) -> bool: ...
    def isFocusable(self) -> bool: ...
    def isFocusableWindow(self) -> bool: ...
    def isFocused(self) -> bool: ...
    def isFontSet(self) -> bool: ...
    def isForegroundSet(self) -> bool: ...
    def isLightweight(self) -> bool: ...
    def isLocationByPlatform(self) -> bool: ...
    def isMaximumSizeSet(self) -> bool: ...
    def isMinimumSizeSet(self) -> bool: ...
    def isModal(self) -> bool: ...
    def isOpaque(self) -> bool: ...
    def isPreferredSizeSet(self) -> bool: ...
    def isResizable(self) -> bool: ...
    def isShowing(self) -> bool: ...
    def isUndecorated(self) -> bool: ...
    def isValid(self) -> bool: ...
    def isValidateRoot(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def keyDown(self, arg0: Any, arg1: int) -> bool: ...
    def keyUp(self, arg0: Any, arg1: int) -> bool: ...
    def layout(self) -> None: ...
    @overload
    def list(self, arg0: Any, arg1: int) -> None: ...
    @overload
    def list(self, arg0: Any, arg1: int) -> None: ...
    @overload
    def list(self, arg0: Any) -> None: ...
    @overload
    def list(self) -> None: ...
    @overload
    def list(self, arg0: Any) -> None: ...
    def locate(self, arg0: int, arg1: int) -> Any: ...
    def location(self) -> Any: ...
    def lostFocus(self, arg0: Any, arg1: Any) -> bool: ...
    @staticmethod
    def main(arg0: List[str]) -> None: ...
    def minimumSize(self) -> Any: ...
    def mouseDown(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def mouseDrag(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def mouseEnter(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def mouseExit(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def mouseMove(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def mouseUp(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def move(self, arg0: int, arg1: int) -> None: ...
    def nextFocus(self) -> None: ...
    def pack(self) -> None: ...
    def paint(self, arg0: Any) -> None: ...
    def paintAll(self, arg0: Any) -> None: ...
    def paintComponents(self, arg0: Any) -> None: ...
    def postEvent(self, arg0: Any) -> bool: ...
    def preferredSize(self) -> Any: ...
    @overload
    def prepareImage(self, arg0: Any, arg1: int, arg2: int, arg3: Any) -> bool: ...
    @overload
    def prepareImage(self, arg0: Any, arg1: Any) -> bool: ...
    def print(self, arg0: Any) -> None: ...
    def printAll(self, arg0: Any) -> None: ...
    def printComponents(self, arg0: Any) -> None: ...
    def reload(self) -> None: ...
    @overload
    def remove(self, arg0: Any) -> None: ...
    @overload
    def remove(self, arg0: int) -> None: ...
    @overload
    def remove(self, arg0: Any) -> None: ...
    def removeAll(self) -> None: ...
    def removeComponentListener(self, arg0: Any) -> None: ...
    def removeContainerListener(self, arg0: Any) -> None: ...
    def removeFocusListener(self, arg0: Any) -> None: ...
    def removeHierarchyBoundsListener(self, arg0: Any) -> None: ...
    def removeHierarchyListener(self, arg0: Any) -> None: ...
    def removeInputMethodListener(self, arg0: Any) -> None: ...
    def removeKeyListener(self, arg0: Any) -> None: ...
    def removeMouseListener(self, arg0: Any) -> None: ...
    def removeMouseMotionListener(self, arg0: Any) -> None: ...
    def removeMouseWheelListener(self, arg0: Any) -> None: ...
    def removeNotify(self) -> None: ...
    @overload
    def removePropertyChangeListener(self, arg0: Any) -> None: ...
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: Any) -> None: ...
    def removeWindowFocusListener(self, arg0: Any) -> None: ...
    def removeWindowListener(self, arg0: Any) -> None: ...
    def removeWindowStateListener(self, arg0: Any) -> None: ...
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...
    @overload
    def repaint(self, arg0: int) -> None: ...
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    @overload
    def repaint(self) -> None: ...
    @overload
    def requestFocus(self, arg0: Any) -> None: ...
    @overload
    def requestFocus(self) -> None: ...
    @overload
    def requestFocusInWindow(self, arg0: Any) -> bool: ...
    @overload
    def requestFocusInWindow(self) -> bool: ...
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    @overload
    def resize(self, arg0: Any) -> None: ...
    @overload
    def resize(self, arg0: int, arg1: int) -> None: ...
    def revalidate(self) -> None: ...
    @overload
    def runCommand(self, arg0: str, arg1: List[str]) -> None: ...
    @overload
    def runCommand(self, arg0: str) -> None: ...
    def select(self, arg0: Any) -> None: ...
    def selectAll(self) -> None: ...
    def setAlwaysOnTop(self, arg0: bool) -> None: ...
    def setAutoRequestFocus(self, arg0: bool) -> None: ...
    def setBackground(self, arg0: Any) -> None: ...
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    @overload
    def setBounds(self, arg0: Any) -> None: ...
    def setCombinedSelectionFilters(self, arg0: bool) -> None: ...
    def setComponentOrientation(self, arg0: Any) -> None: ...
    def setComponentZOrder(self, arg0: Any, arg1: int) -> None: ...
    def setContentPane(self, arg0: Any) -> None: ...
    def setCursor(self, arg0: Any) -> None: ...
    def setDefaultCloseOperation(self, arg0: int) -> None: ...
    @staticmethod
    def setDefaultLookAndFeelDecorated(arg0: bool) -> None: ...
    def setDropTarget(self, arg0: Any) -> None: ...
    def setEnabled(self, arg0: bool) -> None: ...
    def setFillList(self, arg0: List[Any]) -> None: ...
    def setFocusCycleRoot(self, arg0: bool) -> None: ...
    def setFocusTraversalKeys(self, arg0: int, arg1: Set[Any]) -> None: ...
    def setFocusTraversalKeysEnabled(self, arg0: bool) -> None: ...
    def setFocusTraversalPolicy(self, arg0: Any) -> None: ...
    def setFocusTraversalPolicyProvider(self, arg0: bool) -> None: ...
    def setFocusable(self, arg0: bool) -> None: ...
    def setFocusableWindowState(self, arg0: bool) -> None: ...
    def setFont(self, arg0: Any) -> None: ...
    def setForeground(self, arg0: Any) -> None: ...
    def setGlassPane(self, arg0: Any) -> None: ...
    def setIconImage(self, arg0: Any) -> None: ...
    def setIconImages(self, arg0: List[Any]) -> None: ...
    def setIgnoreRepaint(self, arg0: bool) -> None: ...
    def setJMenuBar(self, arg0: Any) -> None: ...
    def setLayeredPane(self, arg0: Any) -> None: ...
    def setLayout(self, arg0: Any) -> None: ...
    def setLocale(self, arg0: Any) -> None: ...
    @overload
    def setLocation(self, arg0: Any) -> None: ...
    @overload
    def setLocation(self, arg0: int, arg1: int) -> None: ...
    def setLocationByPlatform(self, arg0: bool) -> None: ...
    def setLocationRelativeTo(self, arg0: Any) -> None: ...
    def setMaximumSize(self, arg0: Any) -> None: ...
    def setMinimumSize(self, arg0: Any) -> None: ...
    def setMixingCutoutShape(self, arg0: Any) -> None: ...
    def setModal(self, arg0: bool) -> None: ...
    def setModalExclusionType(self, arg0: Any) -> None: ...
    def setModalityType(self, arg0: Any) -> None: ...
    def setName(self, arg0: str) -> None: ...
    def setOpacity(self, arg0: float) -> None: ...
    def setPathList(self, arg0: List[Any], arg1: Any, arg2: bool) -> None: ...
    def setPreferredSize(self, arg0: Any) -> None: ...
    def setResizable(self, arg0: bool) -> None: ...
    def setSelectedPaths(self, arg0: List[Any], arg1: Any) -> None: ...
    def setShape(self, arg0: Any) -> None: ...
    @overload
    def setSize(self, arg0: int, arg1: int) -> None: ...
    @overload
    def setSize(self, arg0: Any) -> None: ...
    def setTitle(self, arg0: str) -> None: ...
    def setTransferHandler(self, arg0: Any) -> None: ...
    def setType(self, arg0: Any) -> None: ...
    def setUndecorated(self, arg0: bool) -> None: ...
    def setVisible(self, arg0: bool) -> None: ...
    @overload
    def show(self) -> None: ...
    @overload
    def show(self, arg0: bool) -> None: ...
    def size(self) -> Any: ...
    def toBack(self) -> None: ...
    def toFront(self) -> None: ...
    def transferFocus(self) -> None: ...
    def transferFocusBackward(self) -> None: ...
    def transferFocusDownCycle(self) -> None: ...
    def transferFocusUpCycle(self) -> None: ...
    @overload
    def update(self, arg0: bool) -> None: ...
    @overload
    def update(self) -> None: ...
    @overload
    def update(self, arg0: Any) -> None: ...
    def validate(self) -> None: ...
    def valueChanged(self, arg0: Any) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class SNT:
    """
    SNT SNT class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any) -> None: ...

    # Fields
    XY_PLANE: int
    XZ_PLANE: int
    ZY_PLANE: int

    # Methods
    def accessToValidImageData(self) -> bool: ...
    def addFillerThread(self, arg0: Any) -> None: ...
    def addListener(self, arg0: Any) -> None: ...
    @overload
    def autoTrace(self, arg0: Any, arg1: Any, arg2: Any, arg3: bool) -> Any: ...
    @overload
    def autoTrace(self, arg0: List[Any], arg1: Any, arg2: bool) -> Any: ...
    @overload
    def autoTrace(self, arg0: Any, arg1: Any, arg2: Any) -> Any: ...
    @overload
    def autoTrace(self, arg0: List[Any], arg1: Any) -> Any: ...
    def cancelPath(self) -> None: ...
    def cancelSearch(self, arg0: bool) -> None: ...
    def cancelTemporary(self) -> None: ...
    @overload
    def captureView(self, arg0: str, arg1: bool) -> Any: ...
    @overload
    def captureView(self, arg0: str, arg1: Any) -> Any: ...
    def changeUIState(self, arg0: int) -> None: ...
    def closeAndResetAllPanes(self) -> None: ...
    def confirmTemporary(self, arg0: bool) -> None: ...
    @overload
    def createCanvas(self, arg0: Any, arg1: int) -> Any: ...
    @overload
    def createCanvas(self, arg0: Any, arg1: int) -> Any: ...
    def disableEventsAllPanes(self, arg0: bool) -> None: ...
    def disableZoomAllPanes(self, arg0: bool) -> None: ...
    def editModeAllowed(self) -> bool: ...
    def enableAstar(self, arg0: bool) -> None: ...
    def enableAutoActivation(self, arg0: bool) -> None: ...
    def enableAutoSelectionOfFinishedPath(self, arg0: bool) -> None: ...
    def enableSecondaryLayerTracing(self, arg0: bool) -> None: ...
    def enableSnapCursor(self, arg0: bool) -> None: ...
    def findPointInStack(self, arg0: int, arg1: int, arg2: int, arg3: List[int]) -> None: ...
    def findPointInStackPrecise(self, arg0: float, arg1: float, arg2: int, arg3: List[float]) -> None: ...
    def finished(self, arg0: Any, arg1: bool) -> None: ...
    def flushSecondaryData(self) -> None: ...
    def getAverageSeparation(self) -> float: ...
    def getChannel(self) -> int: ...
    def getContext(self) -> Any: ...
    def getCostType(self) -> Any: ...
    def getCurrentPath(self) -> Any: ...
    def getDataset(self) -> Any: ...
    def getDepth(self) -> int: ...
    def getDrawDiameters(self) -> bool: ...
    def getFilledBinaryImp(self) -> Any: ...
    def getFilledDistanceImp(self) -> Any: ...
    def getFilledImp(self) -> Any: ...
    def getFilledLabelImp(self) -> Any: ...
    def getFilterType(self) -> Any: ...
    def getFrame(self) -> int: ...
    def getHeight(self) -> int: ...
    def getHeuristicType(self) -> Any: ...
    @overload
    def getImagePlus(self, arg0: int) -> Any: ...
    @overload
    def getImagePlus(self) -> Any: ...
    def getLoadedData(self) -> Any: ...
    def getLoadedDataAsImp(self) -> Any: ...
    def getLoadedIterable(self) -> Any: ...
    def getMinimumSeparation(self) -> float: ...
    def getPathAndFillManager(self) -> Any: ...
    def getPixelDepth(self) -> float: ...
    def getPixelHeight(self) -> float: ...
    def getPixelWidth(self) -> float: ...
    def getPrefs(self) -> Any: ...
    def getSearchImageType(self) -> Any: ...
    def getSearchType(self) -> Any: ...
    def getSecondaryData(self) -> Any: ...
    def getSecondaryDataAsImp(self) -> Any: ...
    def getSecondaryImageMinMax(self) -> List[float]: ...
    def getSelectedPaths(self) -> List[Any]: ...
    def getSinglePane(self) -> bool: ...
    def getSpacingUnits(self) -> str: ...
    def getStats(self) -> Any: ...
    def getStatsSecondary(self) -> Any: ...
    def getUI(self) -> Any: ...
    def getUseSubVolumeStats(self) -> bool: ...
    def getWidth(self) -> int: ...
    @staticmethod
    def getZYXZ(arg0: Any, arg1: int) -> List[Any]: ...
    def initPathsToFill(self, arg0: Set[Any]) -> None: ...
    @overload
    def initialize(self, arg0: bool, arg1: int, arg2: int) -> None: ...
    @overload
    def initialize(self, arg0: Any) -> None: ...
    @overload
    def initialize(self, arg0: bool, arg1: int, arg2: int, arg3: bool) -> None: ...
    @overload
    def initialize(self, arg0: Any, arg1: int) -> None: ...
    def is2D(self) -> bool: ...
    def isAstarEnabled(self) -> bool: ...
    def isOnlySelectedPathsVisible(self) -> bool: ...
    def isSecondaryDataAvailable(self) -> bool: ...
    def isZoomAllPanesDisabled(self) -> bool: ...
    def loadLabelsFile(self, arg0: str) -> None: ...
    @overload
    def loadSecondaryImage(self, arg0: Any) -> None: ...
    @overload
    def loadSecondaryImage(self, arg0: Any) -> None: ...
    @overload
    def loadSecondaryImage(self, arg0: Any, arg1: bool) -> None: ...
    def loadTracings(self, arg0: Any) -> bool: ...
    @staticmethod
    def main(arg0: List[str]) -> None: ...
    def makePathVolume(self, arg0: List[Any], arg1: bool) -> Any: ...
    @overload
    def mouseMovedTo(self, arg0: float, arg1: float, arg2: int, arg3: bool, arg4: bool) -> None: ...
    @overload
    def mouseMovedTo(self, arg0: float, arg1: float, arg2: int, arg3: bool) -> None: ...
    def notifyListeners(self, arg0: Any) -> None: ...
    def panEventOccurred(self, arg0: int, arg1: int, arg2: int) -> None: ...
    def pointsInSearch(self, arg0: Any, arg1: int, arg2: int) -> None: ...
    def proportionDone(self, arg0: float) -> None: ...
    def rebuildDisplayCanvases(self) -> None: ...
    def rebuildZYXZpanes(self) -> None: ...
    def reloadImage(self, arg0: int, arg1: int) -> None: ...
    def reloadZYXZpanes(self, arg0: int) -> None: ...
    def removeMIPOverlayAllPanes(self) -> None: ...
    def repaintAllPanes(self) -> None: ...
    def selectPath(self, arg0: Any, arg1: bool) -> None: ...
    def setAnnotationsColorAllPanes(self, arg0: Any) -> None: ...
    def setAnnotationsVisible(self, arg0: bool) -> None: ...
    def setCanvasLabelAllPanes(self, arg0: str) -> None: ...
    def setCostType(self, arg0: Any) -> None: ...
    def setCurrentPath(self, arg0: Any) -> None: ...
    def setCursorTextAllPanes(self, arg0: str) -> None: ...
    def setDrawCrosshairsAllPanes(self, arg0: bool) -> None: ...
    def setDrawDiameters(self, arg0: bool) -> None: ...
    def setFillList(self, arg0: List[Any]) -> None: ...
    def setFillThreshold(self, arg0: float) -> None: ...
    def setFillThresholdFrom(self, arg0: float, arg1: float, arg2: float) -> None: ...
    def setFilterType(self, arg0: Any) -> None: ...
    def setHeuristicType(self, arg0: Any) -> None: ...
    def setPathList(self, arg0: List[Any], arg1: Any, arg2: bool) -> None: ...
    def setSearchImageType(self, arg0: Any) -> None: ...
    def setSearchType(self, arg0: Any) -> None: ...
    def setSecondaryImage(self, arg0: Any) -> None: ...
    def setSecondaryImageMinMax(self, arg0: float, arg1: float) -> None: ...
    def setSelectedPaths(self, arg0: List[Any], arg1: Any) -> None: ...
    def setShowOnlySelectedPaths(self, arg0: bool) -> None: ...
    def setSinglePane(self, arg0: bool) -> None: ...
    def setStopFillAtThreshold(self, arg0: bool) -> None: ...
    def setStoreExtraFillNodes(self, arg0: bool) -> None: ...
    def setTemporaryPath(self, arg0: Any) -> None: ...
    def setUseSubVolumeStats(self, arg0: bool) -> None: ...
    def setZPositionAllPanes(self, arg0: int, arg1: int, arg2: int) -> None: ...
    def showCorrespondencesTo(self, arg0: Any, arg1: Any, arg2: float) -> None: ...
    def showMIPOverlays(self, arg0: float) -> None: ...
    def showStatus(self, arg0: int, arg1: int, arg2: str) -> None: ...
    @overload
    def startHessian(self, arg0: str, arg1: str, arg2: List[float], arg3: float, arg4: float, arg5: str, arg6: int) -> None: ...
    @overload
    def startHessian(self, arg0: str, arg1: str, arg2: List[float], arg3: str, arg4: int) -> None: ...
    @overload
    def startHessian(self, arg0: str, arg1: float, arg2: float, arg3: bool) -> None: ...
    def startUI(self) -> None: ...
    def threadStatus(self, arg0: Any, arg1: int) -> None: ...
    def unzoomAllPanes(self) -> None: ...
    def updateAllViewers(self) -> None: ...
    def updateDisplayCanvases(self) -> None: ...
    def zoom100PercentAllPanes(self) -> None: ...
    def zoomAllPanes(self, arg0: float) -> None: ...
    def zoomEventOccurred(self, arg0: bool, arg1: int, arg2: int, arg3: int) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class SNTService:
    """
    SNT SNTService class with complete method signatures.
    Generated using Java reflection.
    """

    def __init__(self) -> None:
        """Initialize SNTService."""
        ...

    # Methods
    def assignValues(self, arg0: bool) -> None: ...
    @overload
    def compareTo(self, arg0: Any) -> int: ...
    @overload
    def compareTo(self, arg0: Any) -> int: ...
    def context(self) -> Any: ...
    def demoImage(self, arg0: str) -> Any: ...
    @overload
    def demoTree(self, arg0: str) -> Any: ...
    @overload
    def demoTree(self) -> Any: ...
    def demoTreeImage(self) -> Any: ...
    def demoTrees(self) -> List[Any]: ...
    def dispose(self) -> None: ...
    def getAnalyzer(self, arg0: bool) -> Any: ...
    def getContext(self) -> Any: ...
    def getIdentifier(self) -> str: ...
    def getInfo(self) -> Any: ...
    def getInstance(self) -> Any: ...
    def getLocation(self) -> str: ...
    def getOrCreateSciViewSNT(self) -> Any: ...
    def getPathAndFillManager(self) -> Any: ...
    def getPaths(self) -> List[Any]: ...
    def getPlugin(self) -> Any: ...
    def getPriority(self) -> float: ...
    @overload
    def getRecViewer(self) -> Any: ...
    @overload
    def getRecViewer(self, arg0: int) -> Any: ...
    def getSciViewSNT(self) -> Any: ...
    def getSelectedPaths(self) -> List[Any]: ...
    def getStatistics(self, arg0: bool) -> Any: ...
    def getTable(self) -> Any: ...
    @overload
    def getTree(self) -> Any: ...
    @overload
    def getTree(self, arg0: bool) -> Any: ...
    def getTrees(self) -> List[Any]: ...
    def getUI(self) -> Any: ...
    def getVersion(self) -> str: ...
    @overload
    def initialize(self, arg0: Any, arg1: bool) -> Any: ...
    @overload
    def initialize(self, arg0: str, arg1: bool) -> Any: ...
    @overload
    def initialize(self, arg0: bool) -> Any: ...
    @overload
    def initialize(self) -> None: ...
    def isActive(self) -> bool: ...
    def loadGraph(self, arg0: Any) -> None: ...
    def loadTracings(self, arg0: str) -> None: ...
    def loadTree(self, arg0: Any) -> None: ...
    def log(self) -> Any: ...
    def newRecViewer(self, arg0: bool) -> Any: ...
    def registerEventHandlers(self) -> None: ...
    def save(self, arg0: str) -> bool: ...
    def setContext(self, arg0: Any) -> None: ...
    def setInfo(self, arg0: Any) -> None: ...
    def setPriority(self, arg0: float) -> None: ...
    def updateViewers(self) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class SNTUI:
    """
    SNT SNTUI class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Any) -> None: ...

    # Fields
    READY: int
    RUNNING_CMD: int
    WAITING_FOR_SIGMA_POINT_I: int
    LOADING: int
    FITTING_PATHS: int
    EDITING: int
    SNT_PAUSED: int
    TRACING_PAUSED: int
    DO_NOTHING_ON_CLOSE: int
    HIDE_ON_CLOSE: int
    DISPOSE_ON_CLOSE: int
    EXIT_ON_CLOSE: int
    DEFAULT_MODALITY_TYPE: Any
    TOP_ALIGNMENT: float
    CENTER_ALIGNMENT: float
    BOTTOM_ALIGNMENT: float
    LEFT_ALIGNMENT: float
    RIGHT_ALIGNMENT: float
    WIDTH: int
    HEIGHT: int
    PROPERTIES: int
    SOMEBITS: int
    FRAMEBITS: int
    ALLBITS: int
    ERROR: int
    ABORT: int

    # Methods
    def action(self, arg0: Any, arg1: Any) -> bool: ...
    @overload
    def add(self, arg0: Any, arg1: Any, arg2: int) -> None: ...
    @overload
    def add(self, arg0: Any, arg1: Any) -> None: ...
    @overload
    def add(self, arg0: str, arg1: Any) -> Any: ...
    @overload
    def add(self, arg0: Any, arg1: int) -> Any: ...
    @overload
    def add(self, arg0: Any) -> Any: ...
    @overload
    def add(self, arg0: Any) -> None: ...
    def addComponentListener(self, arg0: Any) -> None: ...
    def addContainerListener(self, arg0: Any) -> None: ...
    def addFocusListener(self, arg0: Any) -> None: ...
    def addHierarchyBoundsListener(self, arg0: Any) -> None: ...
    def addHierarchyListener(self, arg0: Any) -> None: ...
    def addInputMethodListener(self, arg0: Any) -> None: ...
    def addKeyListener(self, arg0: Any) -> None: ...
    def addMouseListener(self, arg0: Any) -> None: ...
    def addMouseMotionListener(self, arg0: Any) -> None: ...
    def addMouseWheelListener(self, arg0: Any) -> None: ...
    def addNotify(self) -> None: ...
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: Any) -> None: ...
    @overload
    def addPropertyChangeListener(self, arg0: Any) -> None: ...
    def addWindowFocusListener(self, arg0: Any) -> None: ...
    def addWindowListener(self, arg0: Any) -> None: ...
    def addWindowStateListener(self, arg0: Any) -> None: ...
    def applyComponentOrientation(self, arg0: Any) -> None: ...
    @overload
    def applyResourceBundle(self, arg0: str) -> None: ...
    @overload
    def applyResourceBundle(self, arg0: Any) -> None: ...
    def areFocusTraversalKeysSet(self, arg0: int) -> bool: ...
    def bounds(self) -> Any: ...
    def changeState(self, arg0: int) -> None: ...
    @overload
    def checkImage(self, arg0: Any, arg1: Any) -> int: ...
    @overload
    def checkImage(self, arg0: Any, arg1: int, arg2: int, arg3: Any) -> int: ...
    @overload
    def contains(self, arg0: int, arg1: int) -> bool: ...
    @overload
    def contains(self, arg0: Any) -> bool: ...
    def countComponents(self) -> int: ...
    @overload
    def createBufferStrategy(self, arg0: int, arg1: Any) -> None: ...
    @overload
    def createBufferStrategy(self, arg0: int) -> None: ...
    @overload
    def createImage(self, arg0: Any) -> Any: ...
    @overload
    def createImage(self, arg0: int, arg1: int) -> Any: ...
    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: Any) -> Any: ...
    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> Any: ...
    def deliverEvent(self, arg0: Any) -> None: ...
    def disable(self) -> None: ...
    def dispatchEvent(self, arg0: Any) -> None: ...
    def dispose(self) -> None: ...
    def doLayout(self) -> None: ...
    @overload
    def enable(self, arg0: bool) -> None: ...
    @overload
    def enable(self) -> None: ...
    def enableInputMethods(self, arg0: bool) -> None: ...
    def error(self, arg0: str) -> None: ...
    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> Any: ...
    @overload
    def findComponentAt(self, arg0: Any) -> Any: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float) -> None: ...
    def getAccessibleContext(self) -> Any: ...
    def getAlignmentX(self) -> float: ...
    def getAlignmentY(self) -> float: ...
    def getBackground(self) -> Any: ...
    def getBaseline(self, arg0: int, arg1: int) -> int: ...
    def getBaselineResizeBehavior(self) -> Any: ...
    def getBookmarkManager(self) -> Any: ...
    @overload
    def getBounds(self, arg0: Any) -> Any: ...
    @overload
    def getBounds(self) -> Any: ...
    def getBufferStrategy(self) -> Any: ...
    def getColorModel(self) -> Any: ...
    def getComponent(self, arg0: int) -> Any: ...
    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> Any: ...
    @overload
    def getComponentAt(self, arg0: Any) -> Any: ...
    def getComponentCount(self) -> int: ...
    def getComponentListeners(self) -> List[Any]: ...
    def getComponentOrientation(self) -> Any: ...
    def getComponentZOrder(self, arg0: Any) -> int: ...
    def getComponents(self) -> List[Any]: ...
    def getContainerListeners(self) -> List[Any]: ...
    def getContentPane(self) -> Any: ...
    def getCursor(self) -> Any: ...
    def getDefaultCloseOperation(self) -> int: ...
    def getDropTarget(self) -> Any: ...
    def getFillManager(self) -> Any: ...
    def getFocusCycleRootAncestor(self) -> Any: ...
    def getFocusListeners(self) -> List[Any]: ...
    def getFocusOwner(self) -> Any: ...
    def getFocusTraversalKeys(self, arg0: int) -> Set[Any]: ...
    def getFocusTraversalKeysEnabled(self) -> bool: ...
    def getFocusTraversalPolicy(self) -> Any: ...
    def getFocusableWindowState(self) -> bool: ...
    def getFont(self) -> Any: ...
    def getFontMetrics(self, arg0: Any) -> Any: ...
    def getForeground(self) -> Any: ...
    def getGlassPane(self) -> Any: ...
    def getGraphics(self) -> Any: ...
    def getGraphicsConfiguration(self) -> Any: ...
    def getHeight(self) -> int: ...
    def getHierarchyBoundsListeners(self) -> List[Any]: ...
    def getHierarchyListeners(self) -> List[Any]: ...
    def getIconImages(self) -> List[Any]: ...
    def getIgnoreRepaint(self) -> bool: ...
    def getInputContext(self) -> Any: ...
    def getInputMethodListeners(self) -> List[Any]: ...
    def getInputMethodRequests(self) -> Any: ...
    def getInsets(self) -> Any: ...
    def getJMenuBar(self) -> Any: ...
    def getKeyListeners(self) -> List[Any]: ...
    def getLayeredPane(self) -> Any: ...
    def getLayout(self) -> Any: ...
    def getListeners(self, arg0: Any) -> List[Any]: ...
    def getLocale(self) -> Any: ...
    @overload
    def getLocation(self) -> Any: ...
    @overload
    def getLocation(self, arg0: Any) -> Any: ...
    def getLocationOnScreen(self) -> Any: ...
    def getMaximumSize(self) -> Any: ...
    def getMinimumSize(self) -> Any: ...
    def getModalExclusionType(self) -> Any: ...
    def getModalityType(self) -> Any: ...
    def getMostRecentFocusOwner(self) -> Any: ...
    def getMouseListeners(self) -> List[Any]: ...
    def getMouseMotionListeners(self) -> List[Any]: ...
    @overload
    def getMousePosition(self, arg0: bool) -> Any: ...
    @overload
    def getMousePosition(self) -> Any: ...
    def getMouseWheelListeners(self) -> List[Any]: ...
    def getName(self) -> str: ...
    def getOpacity(self) -> float: ...
    def getOwnedWindows(self) -> List[Any]: ...
    def getOwner(self) -> Any: ...
    @staticmethod
    def getOwnerlessWindows() -> List[Any]: ...
    def getParent(self) -> Any: ...
    def getPathManager(self) -> Any: ...
    def getPreferredSize(self) -> Any: ...
    def getPrefs(self) -> Any: ...
    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List[Any]: ...
    @overload
    def getPropertyChangeListeners(self) -> List[Any]: ...
    def getReconstructionViewer(self, arg0: bool) -> Any: ...
    def getRecorder(self, arg0: bool) -> Any: ...
    def getRootPane(self) -> Any: ...
    def getSciViewSNT(self, arg0: bool) -> Any: ...
    def getShape(self) -> Any: ...
    @overload
    def getSize(self) -> Any: ...
    @overload
    def getSize(self, arg0: Any) -> Any: ...
    def getState(self) -> int: ...
    def getTable(self) -> Any: ...
    def getTitle(self) -> str: ...
    def getToolkit(self) -> Any: ...
    def getTracingCanvasPopupMenu(self) -> Any: ...
    def getTransferHandler(self) -> Any: ...
    def getTreeLock(self) -> Any: ...
    def getType(self) -> Any: ...
    def getWarningString(self) -> str: ...
    def getWidth(self) -> int: ...
    def getWindowFocusListeners(self) -> List[Any]: ...
    def getWindowListeners(self) -> List[Any]: ...
    def getWindowStateListeners(self) -> List[Any]: ...
    @staticmethod
    def getWindows() -> List[Any]: ...
    def getX(self) -> int: ...
    def getY(self) -> int: ...
    def gotFocus(self, arg0: Any, arg1: Any) -> bool: ...
    def handleEvent(self, arg0: Any) -> bool: ...
    def hasFocus(self) -> bool: ...
    def hide(self) -> None: ...
    def imageUpdate(self, arg0: Any, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool: ...
    def insets(self) -> Any: ...
    def inside(self, arg0: int, arg1: int) -> bool: ...
    def invalidate(self) -> None: ...
    def isActive(self) -> bool: ...
    def isAlwaysOnTop(self) -> bool: ...
    def isAlwaysOnTopSupported(self) -> bool: ...
    def isAncestorOf(self, arg0: Any) -> bool: ...
    def isAutoRequestFocus(self) -> bool: ...
    def isBackgroundSet(self) -> bool: ...
    def isCursorSet(self) -> bool: ...
    @staticmethod
    def isDefaultLookAndFeelDecorated() -> bool: ...
    def isDisplayable(self) -> bool: ...
    def isDoubleBuffered(self) -> bool: ...
    def isEnabled(self) -> bool: ...
    @overload
    def isFocusCycleRoot(self) -> bool: ...
    @overload
    def isFocusCycleRoot(self, arg0: Any) -> bool: ...
    def isFocusOwner(self) -> bool: ...
    def isFocusTraversable(self) -> bool: ...
    def isFocusTraversalPolicyProvider(self) -> bool: ...
    def isFocusTraversalPolicySet(self) -> bool: ...
    def isFocusable(self) -> bool: ...
    def isFocusableWindow(self) -> bool: ...
    def isFocused(self) -> bool: ...
    def isFontSet(self) -> bool: ...
    def isForegroundSet(self) -> bool: ...
    def isLightweight(self) -> bool: ...
    def isLocationByPlatform(self) -> bool: ...
    def isMaximumSizeSet(self) -> bool: ...
    def isMinimumSizeSet(self) -> bool: ...
    def isModal(self) -> bool: ...
    def isOpaque(self) -> bool: ...
    def isPreferredSizeSet(self) -> bool: ...
    def isReady(self) -> bool: ...
    def isResizable(self) -> bool: ...
    def isShowing(self) -> bool: ...
    def isUndecorated(self) -> bool: ...
    def isValid(self) -> bool: ...
    def isValidateRoot(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def keyDown(self, arg0: Any, arg1: int) -> bool: ...
    def keyUp(self, arg0: Any, arg1: int) -> bool: ...
    def layout(self) -> None: ...
    @overload
    def list(self, arg0: Any, arg1: int) -> None: ...
    @overload
    def list(self, arg0: Any, arg1: int) -> None: ...
    @overload
    def list(self, arg0: Any) -> None: ...
    @overload
    def list(self) -> None: ...
    @overload
    def list(self, arg0: Any) -> None: ...
    def locate(self, arg0: int, arg1: int) -> Any: ...
    def location(self) -> Any: ...
    def lostFocus(self, arg0: Any, arg1: Any) -> bool: ...
    def minimumSize(self) -> Any: ...
    def mouseDown(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def mouseDrag(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def mouseEnter(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def mouseExit(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def mouseMove(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def mouseUp(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def move(self, arg0: int, arg1: int) -> None: ...
    def nextFocus(self) -> None: ...
    def pack(self) -> None: ...
    def paint(self, arg0: Any) -> None: ...
    def paintAll(self, arg0: Any) -> None: ...
    def paintComponents(self, arg0: Any) -> None: ...
    def pause(self, arg0: bool) -> None: ...
    def pauseTracing(self, arg0: bool) -> None: ...
    def postEvent(self, arg0: Any) -> bool: ...
    def preferredSize(self) -> Any: ...
    @overload
    def prepareImage(self, arg0: Any, arg1: int, arg2: int, arg3: Any) -> bool: ...
    @overload
    def prepareImage(self, arg0: Any, arg1: Any) -> bool: ...
    def print(self, arg0: Any) -> None: ...
    def printAll(self, arg0: Any) -> None: ...
    def printComponents(self, arg0: Any) -> None: ...
    def refresh(self) -> None: ...
    @overload
    def remove(self, arg0: Any) -> None: ...
    @overload
    def remove(self, arg0: int) -> None: ...
    @overload
    def remove(self, arg0: Any) -> None: ...
    def removeAll(self) -> None: ...
    def removeComponentListener(self, arg0: Any) -> None: ...
    def removeContainerListener(self, arg0: Any) -> None: ...
    def removeFocusListener(self, arg0: Any) -> None: ...
    def removeHierarchyBoundsListener(self, arg0: Any) -> None: ...
    def removeHierarchyListener(self, arg0: Any) -> None: ...
    def removeInputMethodListener(self, arg0: Any) -> None: ...
    def removeKeyListener(self, arg0: Any) -> None: ...
    def removeMouseListener(self, arg0: Any) -> None: ...
    def removeMouseMotionListener(self, arg0: Any) -> None: ...
    def removeMouseWheelListener(self, arg0: Any) -> None: ...
    def removeNotify(self) -> None: ...
    @overload
    def removePropertyChangeListener(self, arg0: Any) -> None: ...
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: Any) -> None: ...
    def removeWindowFocusListener(self, arg0: Any) -> None: ...
    def removeWindowListener(self, arg0: Any) -> None: ...
    def removeWindowStateListener(self, arg0: Any) -> None: ...
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...
    @overload
    def repaint(self, arg0: int) -> None: ...
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    @overload
    def repaint(self) -> None: ...
    @overload
    def requestFocus(self, arg0: Any) -> None: ...
    @overload
    def requestFocus(self) -> None: ...
    @overload
    def requestFocusInWindow(self, arg0: Any) -> bool: ...
    @overload
    def requestFocusInWindow(self) -> bool: ...
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    @overload
    def resize(self, arg0: Any) -> None: ...
    @overload
    def resize(self, arg0: int, arg1: int) -> None: ...
    def revalidate(self) -> None: ...
    @overload
    def runAutotracingWizard(self, arg0: bool) -> None: ...
    @overload
    def runAutotracingWizard(self, arg0: Any, arg1: bool) -> None: ...
    @overload
    def runCommand(self, arg0: str, arg1: List[str]) -> None: ...
    @overload
    def runCommand(self, arg0: str) -> None: ...
    @overload
    def runCommand(self, arg0: Any, arg1: Dict[str, Any]) -> None: ...
    @overload
    def runSecondaryLayerWizard(self, arg0: str, arg1: List[float]) -> None: ...
    @overload
    def runSecondaryLayerWizard(self) -> None: ...
    def selectTab(self, arg0: str) -> None: ...
    def setAlwaysOnTop(self, arg0: bool) -> None: ...
    def setAutoRequestFocus(self, arg0: bool) -> None: ...
    def setBackground(self, arg0: Any) -> None: ...
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    @overload
    def setBounds(self, arg0: Any) -> None: ...
    def setComponentOrientation(self, arg0: Any) -> None: ...
    def setComponentZOrder(self, arg0: Any, arg1: int) -> None: ...
    def setContentPane(self, arg0: Any) -> None: ...
    def setCursor(self, arg0: Any) -> None: ...
    def setDefaultCloseOperation(self, arg0: int) -> None: ...
    @staticmethod
    def setDefaultLookAndFeelDecorated(arg0: bool) -> None: ...
    def setDropTarget(self, arg0: Any) -> None: ...
    def setEnableDebugMode(self, arg0: bool) -> None: ...
    def setEnabled(self, arg0: bool) -> None: ...
    def setFocusCycleRoot(self, arg0: bool) -> None: ...
    def setFocusTraversalKeys(self, arg0: int, arg1: Set[Any]) -> None: ...
    def setFocusTraversalKeysEnabled(self, arg0: bool) -> None: ...
    def setFocusTraversalPolicy(self, arg0: Any) -> None: ...
    def setFocusTraversalPolicyProvider(self, arg0: bool) -> None: ...
    def setFocusable(self, arg0: bool) -> None: ...
    def setFocusableWindowState(self, arg0: bool) -> None: ...
    def setFont(self, arg0: Any) -> None: ...
    def setForeground(self, arg0: Any) -> None: ...
    def setGlassPane(self, arg0: Any) -> None: ...
    def setIconImage(self, arg0: Any) -> None: ...
    def setIconImages(self, arg0: List[Any]) -> None: ...
    def setIgnoreRepaint(self, arg0: bool) -> None: ...
    def setJMenuBar(self, arg0: Any) -> None: ...
    def setLayeredPane(self, arg0: Any) -> None: ...
    def setLayout(self, arg0: Any) -> None: ...
    def setLocale(self, arg0: Any) -> None: ...
    @overload
    def setLocation(self, arg0: Any) -> None: ...
    @overload
    def setLocation(self, arg0: int, arg1: int) -> None: ...
    def setLocationByPlatform(self, arg0: bool) -> None: ...
    def setLocationRelativeTo(self, arg0: Any) -> None: ...
    def setLookAndFeel(self, arg0: str) -> None: ...
    def setMaximumSize(self, arg0: Any) -> None: ...
    def setMinimumSize(self, arg0: Any) -> None: ...
    def setMixingCutoutShape(self, arg0: Any) -> None: ...
    def setModal(self, arg0: bool) -> None: ...
    def setModalExclusionType(self, arg0: Any) -> None: ...
    def setModalityType(self, arg0: Any) -> None: ...
    def setName(self, arg0: str) -> None: ...
    def setOpacity(self, arg0: float) -> None: ...
    def setPreferredSize(self, arg0: Any) -> None: ...
    def setRenderingScale(self, arg0: float) -> None: ...
    def setResizable(self, arg0: bool) -> None: ...
    def setShape(self, arg0: Any) -> None: ...
    def setSigmaPaletteListener(self, arg0: Any) -> None: ...
    @overload
    def setSize(self, arg0: int, arg1: int) -> None: ...
    @overload
    def setSize(self, arg0: Any) -> None: ...
    def setTitle(self, arg0: str) -> None: ...
    def setTransferHandler(self, arg0: Any) -> None: ...
    def setType(self, arg0: Any) -> None: ...
    def setUndecorated(self, arg0: bool) -> None: ...
    def setVisibilityFilter(self, arg0: str, arg1: bool) -> None: ...
    def setVisible(self, arg0: bool) -> None: ...
    @overload
    def show(self) -> None: ...
    @overload
    def show(self, arg0: bool) -> None: ...
    def showMessage(self, arg0: str, arg1: str) -> None: ...
    def showStatus(self, arg0: str, arg1: bool) -> None: ...
    def size(self) -> Any: ...
    def toBack(self) -> None: ...
    def toFront(self) -> None: ...
    def transferFocus(self) -> None: ...
    def transferFocusBackward(self) -> None: ...
    def transferFocusDownCycle(self) -> None: ...
    def transferFocusUpCycle(self) -> None: ...
    def update(self, arg0: Any) -> None: ...
    def validate(self) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class SNTUtils:
    """
    SNT SNTUtils class with complete method signatures.
    Generated using Java reflection.
    """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        """Initialize SNTUtils."""
        ...

    # Fields
    VERSION: str

    # Methods
    @staticmethod
    def addViewer(arg0: Any) -> None: ...
    @staticmethod
    def buildDate() -> str: ...
    @staticmethod
    def csvQuoteAndPrint(arg0: Any, arg1: Any) -> None: ...
    @staticmethod
    def downloadToTempFile(arg0: str) -> Any: ...
    @overload
    @staticmethod
    def error(arg0: str, arg1: Any) -> None: ...
    @overload
    @staticmethod
    def error(arg0: str) -> None: ...
    @staticmethod
    def extractReadableTimeStamp(arg0: Any) -> str: ...
    @staticmethod
    def fileAvailable(arg0: Any) -> bool: ...
    @overload
    @staticmethod
    def findClosestPair(arg0: Any, arg1: str) -> Any: ...
    @overload
    @staticmethod
    def findClosestPair(arg0: Any, arg1: List[str]) -> Any: ...
    @staticmethod
    def formatDouble(arg0: float, arg1: int) -> str: ...
    @staticmethod
    def getBackupCopies(arg0: Any) -> List[Any]: ...
    @staticmethod
    def getContext() -> Any: ...
    @staticmethod
    def getDecimalFormat(arg0: float, arg1: int) -> Any: ...
    @staticmethod
    def getElapsedTime(arg0: int) -> str: ...
    @staticmethod
    def getInstance() -> Any: ...
    @staticmethod
    def getPluginInstance() -> Any: ...
    @staticmethod
    def getReadableVersion() -> str: ...
    @staticmethod
    def getReconstructionFiles(arg0: Any, arg1: str) -> List[Any]: ...
    @staticmethod
    def getSanitizedUnit(arg0: str) -> str: ...
    @staticmethod
    def getTimeStamp() -> str: ...
    @staticmethod
    def getUniquelySuffixedFile(arg0: Any) -> Any: ...
    @staticmethod
    def getUniquelySuffixedTifFile(arg0: Any) -> Any: ...
    @staticmethod
    def isContextSet() -> bool: ...
    @staticmethod
    def isDebugMode() -> bool: ...
    @staticmethod
    def isReconstructionFile(arg0: Any) -> bool: ...
    @staticmethod
    def log(arg0: str) -> None: ...
    @staticmethod
    def randomPaths() -> List[Any]: ...
    @staticmethod
    def removeViewer(arg0: Any) -> None: ...
    @staticmethod
    def setContext(arg0: Any) -> None: ...
    @staticmethod
    def setDebugMode(arg0: bool) -> None: ...
    @staticmethod
    def setIsLoading(arg0: bool) -> None: ...
    @staticmethod
    def startApp() -> Any: ...
    @staticmethod
    def stripExtension(arg0: str) -> str: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class TracerCanvas:
    """
    SNT TracerCanvas class with complete method signatures.
    Generated using Java reflection.
    """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        """Initialize TracerCanvas."""
        ...

    # Fields
    usePointer: bool
    TOP_ALIGNMENT: float
    CENTER_ALIGNMENT: float
    BOTTOM_ALIGNMENT: float
    LEFT_ALIGNMENT: float
    RIGHT_ALIGNMENT: float
    WIDTH: int
    HEIGHT: int
    PROPERTIES: int
    SOMEBITS: int
    FRAMEBITS: int
    ALLBITS: int
    ERROR: int
    ABORT: int

    # Methods
    def action(self, arg0: Any, arg1: Any) -> bool: ...
    def add(self, arg0: Any) -> None: ...
    def addComponentListener(self, arg0: Any) -> None: ...
    def addFocusListener(self, arg0: Any) -> None: ...
    def addHierarchyBoundsListener(self, arg0: Any) -> None: ...
    def addHierarchyListener(self, arg0: Any) -> None: ...
    def addInputMethodListener(self, arg0: Any) -> None: ...
    def addKeyListener(self, arg0: Any) -> None: ...
    def addMouseListener(self, arg0: Any) -> None: ...
    def addMouseMotionListener(self, arg0: Any) -> None: ...
    def addMouseWheelListener(self, arg0: Any) -> None: ...
    def addNotify(self) -> None: ...
    @overload
    def addPropertyChangeListener(self, arg0: Any) -> None: ...
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: Any) -> None: ...
    def applyComponentOrientation(self, arg0: Any) -> None: ...
    def areFocusTraversalKeysSet(self, arg0: int) -> bool: ...
    def bounds(self) -> Any: ...
    @overload
    def checkImage(self, arg0: Any, arg1: Any) -> int: ...
    @overload
    def checkImage(self, arg0: Any, arg1: int, arg2: int, arg3: Any) -> int: ...
    @overload
    def contains(self, arg0: int, arg1: int) -> bool: ...
    @overload
    def contains(self, arg0: Any) -> bool: ...
    @overload
    def createBufferStrategy(self, arg0: int) -> None: ...
    @overload
    def createBufferStrategy(self, arg0: int, arg1: Any) -> None: ...
    @overload
    def createImage(self, arg0: Any) -> Any: ...
    @overload
    def createImage(self, arg0: int, arg1: int) -> Any: ...
    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: Any) -> Any: ...
    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> Any: ...
    def cursorOverImage(self) -> bool: ...
    def deliverEvent(self, arg0: Any) -> None: ...
    def disable(self) -> None: ...
    def disableEvents(self, arg0: bool) -> None: ...
    def disablePopupMenu(self, arg0: bool) -> None: ...
    def dispatchEvent(self, arg0: Any) -> None: ...
    def doLayout(self) -> None: ...
    @overload
    def enable(self, arg0: bool) -> None: ...
    @overload
    def enable(self) -> None: ...
    def enableInputMethods(self, arg0: bool) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float) -> None: ...
    def fitToWindow(self) -> None: ...
    def getAccessibleContext(self) -> Any: ...
    def getAlignmentX(self) -> float: ...
    def getAlignmentY(self) -> float: ...
    def getAnnotationsColor(self) -> Any: ...
    def getBackground(self) -> Any: ...
    def getBaseline(self, arg0: int, arg1: int) -> int: ...
    def getBaselineResizeBehavior(self) -> Any: ...
    @overload
    def getBounds(self, arg0: Any) -> Any: ...
    @overload
    def getBounds(self) -> Any: ...
    def getBufferStrategy(self) -> Any: ...
    def getColorModel(self) -> Any: ...
    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> Any: ...
    @overload
    def getComponentAt(self, arg0: Any) -> Any: ...
    def getComponentListeners(self) -> List[Any]: ...
    def getComponentOrientation(self) -> Any: ...
    def getCursor(self) -> Any: ...
    def getCursorLoc(self) -> Any: ...
    def getCursorPos(self) -> Any: ...
    def getCustomRoi(self) -> bool: ...
    def getDisplayList(self) -> Any: ...
    def getDropTarget(self) -> Any: ...
    def getFocusCycleRootAncestor(self) -> Any: ...
    def getFocusListeners(self) -> List[Any]: ...
    def getFocusTraversalKeys(self, arg0: int) -> Set[Any]: ...
    def getFocusTraversalKeysEnabled(self) -> bool: ...
    def getFont(self) -> Any: ...
    def getFontMetrics(self, arg0: Any) -> Any: ...
    def getForeground(self) -> Any: ...
    def getGraphics(self) -> Any: ...
    def getGraphics2D(self, arg0: Any) -> Any: ...
    def getGraphicsConfiguration(self) -> Any: ...
    def getHeight(self) -> int: ...
    def getHierarchyBoundsListeners(self) -> List[Any]: ...
    def getHierarchyListeners(self) -> List[Any]: ...
    @staticmethod
    def getHigherZoomLevel(arg0: float) -> float: ...
    def getIgnoreRepaint(self) -> bool: ...
    def getImage(self) -> Any: ...
    def getInputContext(self) -> Any: ...
    def getInputMethodListeners(self) -> List[Any]: ...
    def getInputMethodRequests(self) -> Any: ...
    def getKeyListeners(self) -> List[Any]: ...
    def getListeners(self, arg0: Any) -> List[Any]: ...
    def getLocale(self) -> Any: ...
    @overload
    def getLocation(self) -> Any: ...
    @overload
    def getLocation(self, arg0: Any) -> Any: ...
    def getLocationOnScreen(self) -> Any: ...
    @staticmethod
    def getLowerZoomLevel(arg0: float) -> float: ...
    def getMagnification(self) -> float: ...
    def getMaximumSize(self) -> Any: ...
    def getMinimumSize(self) -> Any: ...
    def getModifiers(self) -> int: ...
    def getMouseListeners(self) -> List[Any]: ...
    def getMouseMotionListeners(self) -> List[Any]: ...
    def getMousePosition(self) -> Any: ...
    def getMouseWheelListeners(self) -> List[Any]: ...
    def getName(self) -> str: ...
    def getOverlay(self) -> Any: ...
    def getPaintPending(self) -> bool: ...
    def getParent(self) -> Any: ...
    def getPreferredSize(self) -> Any: ...
    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List[Any]: ...
    @overload
    def getPropertyChangeListeners(self) -> List[Any]: ...
    def getScaleToFit(self) -> bool: ...
    @staticmethod
    def getShowAllColor() -> Any: ...
    def getShowAllList(self) -> Any: ...
    def getShowAllROIs(self) -> bool: ...
    @overload
    def getSize(self) -> Any: ...
    @overload
    def getSize(self, arg0: Any) -> Any: ...
    def getSliceNumber(self, arg0: str) -> int: ...
    def getSrcRect(self) -> Any: ...
    def getToolkit(self) -> Any: ...
    def getTreeLock(self) -> Any: ...
    def getViewPort(self) -> Any: ...
    def getWidth(self) -> int: ...
    def getX(self) -> int: ...
    def getY(self) -> int: ...
    def gotFocus(self, arg0: Any, arg1: Any) -> bool: ...
    def handleEvent(self, arg0: Any) -> bool: ...
    def hasFocus(self) -> bool: ...
    def hide(self) -> None: ...
    def hideZoomIndicator(self, arg0: bool) -> bool: ...
    def imageUpdate(self, arg0: Any, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool: ...
    def inside(self, arg0: int, arg1: int) -> bool: ...
    def invalidate(self) -> None: ...
    def isBackgroundSet(self) -> bool: ...
    def isCursorSet(self) -> bool: ...
    def isDisplayable(self) -> bool: ...
    def isDoubleBuffered(self) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isEventsDisabled(self) -> bool: ...
    def isFocusCycleRoot(self, arg0: Any) -> bool: ...
    def isFocusOwner(self) -> bool: ...
    def isFocusTraversable(self) -> bool: ...
    def isFocusable(self) -> bool: ...
    def isFontSet(self) -> bool: ...
    def isForegroundSet(self) -> bool: ...
    def isLightweight(self) -> bool: ...
    def isMaximumSizeSet(self) -> bool: ...
    def isMinimumSizeSet(self) -> bool: ...
    def isOpaque(self) -> bool: ...
    def isPreferredSizeSet(self) -> bool: ...
    def isShowing(self) -> bool: ...
    def isValid(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def keyDown(self, arg0: Any, arg1: int) -> bool: ...
    def keyUp(self, arg0: Any, arg1: int) -> bool: ...
    def layout(self) -> None: ...
    @overload
    def list(self, arg0: Any, arg1: int) -> None: ...
    @overload
    def list(self, arg0: Any) -> None: ...
    @overload
    def list(self) -> None: ...
    @overload
    def list(self, arg0: Any) -> None: ...
    @overload
    def list(self, arg0: Any, arg1: int) -> None: ...
    def locate(self, arg0: int, arg1: int) -> Any: ...
    def location(self) -> Any: ...
    def lostFocus(self, arg0: Any, arg1: Any) -> bool: ...
    def minimumSize(self) -> Any: ...
    def mouseClicked(self, arg0: Any) -> None: ...
    def mouseDown(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def mouseDrag(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def mouseDragged(self, arg0: Any) -> None: ...
    def mouseEnter(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def mouseEntered(self, arg0: Any) -> None: ...
    def mouseExit(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def mouseExited(self, arg0: Any) -> None: ...
    def mouseMove(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def mouseMoved(self, arg0: Any) -> None: ...
    def mousePressed(self, arg0: Any) -> None: ...
    def mouseReleased(self, arg0: Any) -> None: ...
    def mouseUp(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def move(self, arg0: int, arg1: int) -> None: ...
    def myOffScreenX(self, arg0: int) -> int: ...
    def myOffScreenXD(self, arg0: int) -> float: ...
    def myOffScreenY(self, arg0: int) -> int: ...
    def myOffScreenYD(self, arg0: int) -> float: ...
    def myScreenX(self, arg0: int) -> int: ...
    def myScreenXD(self, arg0: float) -> int: ...
    def myScreenXDprecise(self, arg0: float) -> float: ...
    def myScreenY(self, arg0: int) -> int: ...
    def myScreenYD(self, arg0: float) -> int: ...
    def myScreenYDprecise(self, arg0: float) -> float: ...
    def nextFocus(self) -> None: ...
    def offScreenX(self, arg0: int) -> int: ...
    def offScreenX2(self, arg0: int) -> int: ...
    def offScreenXD(self, arg0: int) -> float: ...
    def offScreenY(self, arg0: int) -> int: ...
    def offScreenY2(self, arg0: int) -> int: ...
    def offScreenYD(self, arg0: int) -> float: ...
    def paint(self, arg0: Any) -> None: ...
    def paintAll(self, arg0: Any) -> None: ...
    def postEvent(self, arg0: Any) -> bool: ...
    def preferredSize(self) -> Any: ...
    @overload
    def prepareImage(self, arg0: Any, arg1: int, arg2: int, arg3: Any) -> bool: ...
    @overload
    def prepareImage(self, arg0: Any, arg1: Any) -> bool: ...
    def print(self, arg0: Any) -> None: ...
    def printAll(self, arg0: Any) -> None: ...
    def remove(self, arg0: Any) -> None: ...
    def removeComponentListener(self, arg0: Any) -> None: ...
    def removeFocusListener(self, arg0: Any) -> None: ...
    def removeHierarchyBoundsListener(self, arg0: Any) -> None: ...
    def removeHierarchyListener(self, arg0: Any) -> None: ...
    def removeInputMethodListener(self, arg0: Any) -> None: ...
    def removeKeyListener(self, arg0: Any) -> None: ...
    def removeMouseListener(self, arg0: Any) -> None: ...
    def removeMouseMotionListener(self, arg0: Any) -> None: ...
    def removeMouseWheelListener(self, arg0: Any) -> None: ...
    def removeNotify(self) -> None: ...
    @overload
    def removePropertyChangeListener(self, arg0: Any) -> None: ...
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: Any) -> None: ...
    @overload
    def repaint(self, arg0: int) -> None: ...
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    @overload
    def repaint(self) -> None: ...
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...
    def repaintOverlay(self) -> None: ...
    @overload
    def requestFocus(self, arg0: Any) -> None: ...
    @overload
    def requestFocus(self) -> None: ...
    @overload
    def requestFocusInWindow(self, arg0: Any) -> bool: ...
    @overload
    def requestFocusInWindow(self) -> bool: ...
    def resetDoubleBuffer(self) -> None: ...
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    @overload
    def resize(self, arg0: Any) -> None: ...
    @overload
    def resize(self, arg0: int, arg1: int) -> None: ...
    def restoreDefaultCursor(self) -> None: ...
    def revalidate(self) -> None: ...
    def roiManagerSelect(self, arg0: Any, arg1: bool) -> bool: ...
    def screenX(self, arg0: int) -> int: ...
    def screenXD(self, arg0: float) -> int: ...
    def screenY(self, arg0: int) -> int: ...
    def screenYD(self, arg0: float) -> int: ...
    def scrollTo(self, arg0: int, arg1: int) -> None: ...
    def setAnnotationsColor(self, arg0: Any) -> None: ...
    def setBackground(self, arg0: Any) -> None: ...
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    @overload
    def setBounds(self, arg0: Any) -> None: ...
    def setCanvasLabel(self, arg0: str) -> None: ...
    def setComponentOrientation(self, arg0: Any) -> None: ...
    def setCrosshairs(self, arg0: float, arg1: float, arg2: float, arg3: bool) -> None: ...
    @overload
    def setCursor(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    @overload
    @staticmethod
    def setCursor(arg0: Any, arg1: int) -> None: ...
    @overload
    def setCursor(self, arg0: Any) -> None: ...
    def setCursorText(self, arg0: str) -> None: ...
    def setCustomRoi(self, arg0: bool) -> None: ...
    @overload
    def setDisplayList(self, arg0: Any, arg1: Any, arg2: Any) -> None: ...
    @overload
    def setDisplayList(self, arg0: Any, arg1: Any) -> None: ...
    @overload
    def setDisplayList(self, arg0: Any) -> None: ...
    def setDrawCrosshairs(self, arg0: bool) -> None: ...
    def setDrawingColor(self, arg0: int, arg1: int, arg2: bool) -> None: ...
    def setDrawingSize(self, arg0: int, arg1: int) -> None: ...
    def setDropTarget(self, arg0: Any) -> None: ...
    def setEnabled(self, arg0: bool) -> None: ...
    def setFocusTraversalKeys(self, arg0: int, arg1: Set[Any]) -> None: ...
    def setFocusTraversalKeysEnabled(self, arg0: bool) -> None: ...
    def setFocusable(self, arg0: bool) -> None: ...
    def setFont(self, arg0: Any) -> None: ...
    def setForeground(self, arg0: Any) -> None: ...
    def setIgnoreRepaint(self, arg0: bool) -> None: ...
    def setImageUpdated(self) -> None: ...
    def setLocale(self, arg0: Any) -> None: ...
    @overload
    def setLocation(self, arg0: int, arg1: int) -> None: ...
    @overload
    def setLocation(self, arg0: Any) -> None: ...
    @staticmethod
    def setLongClickDelay(arg0: int) -> None: ...
    def setMagnification(self, arg0: float) -> None: ...
    def setMaximumSize(self, arg0: Any) -> None: ...
    def setMinimumSize(self, arg0: Any) -> None: ...
    def setMixingCutoutShape(self, arg0: Any) -> None: ...
    def setName(self, arg0: str) -> None: ...
    def setOverlay(self, arg0: Any) -> None: ...
    def setPaintPending(self, arg0: bool) -> None: ...
    def setPreferredSize(self, arg0: Any) -> None: ...
    def setScaleToFit(self, arg0: bool) -> None: ...
    @staticmethod
    def setShowAllColor(arg0: Any) -> None: ...
    def setShowAllList(self, arg0: Any) -> None: ...
    def setShowAllROIs(self, arg0: bool) -> None: ...
    def setShowCursorStatus(self, arg0: bool) -> None: ...
    @overload
    def setSize(self, arg0: int, arg1: int) -> None: ...
    @overload
    def setSize(self, arg0: Any) -> None: ...
    def setSourceRect(self, arg0: Any) -> None: ...
    def setVisible(self, arg0: bool) -> None: ...
    @overload
    def show(self) -> None: ...
    @overload
    def show(self, arg0: bool) -> None: ...
    def size(self) -> Any: ...
    def transferFocus(self) -> None: ...
    def transferFocusBackward(self) -> None: ...
    def transferFocusUpCycle(self) -> None: ...
    def unzoom(self) -> None: ...
    def update(self, arg0: Any) -> None: ...
    def updateCursor(self, arg0: float, arg1: float, arg2: float) -> None: ...
    def updatePosition(self, arg0: float, arg1: float, arg2: float) -> None: ...
    def validate(self) -> None: ...
    def zoom100Percent(self) -> None: ...
    def zoomIn(self, arg0: int, arg1: int) -> None: ...
    def zoomOut(self, arg0: int, arg1: int) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class Tree:
    """
    SNT Tree class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: str) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: List[int]) -> None: ...
    @overload
    def __init__(self, arg0: List[Any], arg1: str) -> None: ...
    @overload
    def __init__(self, arg0: List[Any]) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: str) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: str, arg2: bool) -> None: ...

    # Fields
    X_AXIS: int
    Y_AXIS: int
    Z_AXIS: int
    KEY_ID: str
    KEY_LABEL: str
    KEY_SOURCE: str
    KEY_IMG: str
    KEY_IMG_CHANNEL: str
    KEY_IMG_FRAME: str
    KEY_FRAME_POS: str
    KEY_COMPARTMENT: str
    KEY_SPATIAL_UNIT: str
    KEY_COLOR: str
    DENDRITIC: str
    AXONAL: str
    SOMATIC: str
    UNSET: str

    # Methods
    def add(self, arg0: Any) -> bool: ...
    def applyCanvasOffset(self, arg0: float, arg1: float, arg2: float) -> None: ...
    def applyProperties(self, arg0: Any) -> None: ...
    @overload
    def assignImage(self, arg0: Any) -> None: ...
    @overload
    def assignImage(self, arg0: Any) -> None: ...
    @overload
    @staticmethod
    def assignUniqueColors(arg0: List[Any]) -> None: ...
    @overload
    @staticmethod
    def assignUniqueColors(arg0: List[Any], arg1: str) -> None: ...
    def assignValue(self, arg0: float) -> None: ...
    @overload
    def clone(self) -> Any: ...
    @overload
    def clone(self) -> Any: ...
    def downSample(self, arg0: float) -> None: ...
    def downsample(self, arg0: float) -> None: ...
    @staticmethod
    def fromFile(arg0: str) -> Any: ...
    def get(self, arg0: int) -> Any: ...
    def getApproximatedSurface(self) -> float: ...
    def getApproximatedVolume(self) -> float: ...
    def getAssignedValue(self) -> float: ...
    @overload
    def getBoundingBox(self) -> Any: ...
    @overload
    def getBoundingBox(self, arg0: bool) -> Any: ...
    def getColor(self) -> Any: ...
    @overload
    def getConvexHull(self) -> Any: ...
    @overload
    def getConvexHull(self, arg0: str) -> Any: ...
    @overload
    def getGraph(self, arg0: bool) -> Any: ...
    @overload
    def getGraph(self) -> Any: ...
    def getImpContainer(self, arg0: int, arg1: int) -> Any: ...
    def getLabel(self) -> str: ...
    def getNodes(self) -> List[Any]: ...
    def getNodesAsSWCPoints(self) -> List[Any]: ...
    def getNodesCount(self) -> int: ...
    def getProperties(self) -> Any: ...
    def getRoot(self) -> Any: ...
    @staticmethod
    def getSWCTypeMap() -> Dict[str, Any]: ...
    @overload
    def getSWCTypes(self) -> Set[Any]: ...
    @overload
    def getSWCTypes(self, arg0: bool) -> Set[Any]: ...
    @overload
    def getSkeleton(self, arg0: int) -> Any: ...
    @overload
    def getSkeleton(self) -> Any: ...
    @overload
    def getSkeleton2D(self) -> Any: ...
    @overload
    def getSkeleton2D(self, arg0: int) -> Any: ...
    def getSomaNodes(self) -> List[Any]: ...
    def indexOf(self, arg0: Any) -> int: ...
    def is3D(self) -> bool: ...
    def isAnnotated(self) -> bool: ...
    def isEmpty(self) -> bool: ...
    def list(self) -> List[Any]: ...
    @overload
    @staticmethod
    def listFromDir(arg0: str) -> List[Any]: ...
    @overload
    @staticmethod
    def listFromDir(arg0: str, arg1: str) -> List[Any]: ...
    @overload
    @staticmethod
    def listFromDir(arg0: str, arg1: str, arg2: List[str]) -> List[Any]: ...
    @staticmethod
    def listFromFile(arg0: str) -> List[Any]: ...
    @staticmethod
    def main(arg0: List[str]) -> None: ...
    @overload
    @staticmethod
    def merge(arg0: List[Any]) -> Any: ...
    @overload
    def merge(self, arg0: Any) -> bool: ...
    def rebuildGraph(self) -> None: ...
    def remove(self, arg0: Any) -> bool: ...
    def replaceAll(self, arg0: List[Any]) -> None: ...
    def rotate(self, arg0: int, arg1: float) -> None: ...
    def save(self, arg0: str) -> bool: ...
    def saveAsSWC(self, arg0: str) -> bool: ...
    @overload
    def scale(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...
    @overload
    def scale(self, arg0: float, arg1: float, arg2: float) -> None: ...
    def setBoundingBox(self, arg0: Any) -> None: ...
    @overload
    def setColor(self, arg0: Any) -> None: ...
    @overload
    def setColor(self, arg0: str, arg1: float) -> None: ...
    @overload
    def setColor(self, arg0: str) -> None: ...
    def setLabel(self, arg0: str) -> None: ...
    def setRadii(self, arg0: float) -> None: ...
    def setSWCType(self, arg0: str) -> None: ...
    def setType(self, arg0: int) -> None: ...
    def show(self) -> None: ...
    def show2D(self) -> Any: ...
    def show3D(self) -> Any: ...
    def size(self) -> int: ...
    def skeletonize(self, arg0: Any, arg1: int) -> None: ...
    @overload
    def subTree(self, arg0: List[int]) -> Any: ...
    @overload
    def subTree(self, arg0: List[str]) -> Any: ...
    def swapAxes(self, arg0: int, arg1: int) -> None: ...
    @overload
    def transform(self, arg0: str) -> None: ...
    @overload
    @staticmethod
    def transform(arg0: List[Any], arg1: str, arg2: bool) -> List[Any]: ...
    def transformedCopy(self, arg0: str) -> Any: ...
    def translate(self, arg0: float, arg1: float, arg2: float) -> None: ...
    def upsample(self, arg0: float) -> None: ...
    def validSoma(self) -> bool: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class TreeProperties:
    """
    SNT TreeProperties class with complete method signatures.
    Generated using Java reflection.
    """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        """Initialize TreeProperties."""
        ...

    # Fields
    KEY_ID: str
    KEY_LABEL: str
    KEY_SOURCE: str
    KEY_IMG: str
    KEY_IMG_CHANNEL: str
    KEY_IMG_FRAME: str
    KEY_FRAME_POS: str
    KEY_COMPARTMENT: str
    KEY_SPATIAL_UNIT: str
    KEY_COLOR: str
    DENDRITIC: str
    AXONAL: str
    SOMATIC: str
    UNSET: str

    # Methods
    @staticmethod
    def getStandardizedCompartment(arg0: str) -> str: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

# Module functions
def initialize(fiji_dir: Optional[str] = None, headless: bool = True, enable_ui: bool = False) -> Any: ...
def inspect(class_or_object: Union[str, Any], keyword: str = "", methods: bool = True, fields: bool = True, constructors: bool = False, static_only: bool = False, case_sensitive: bool = False, max_results: int = 50) -> None: ...
def get_methods(class_or_object: Union[str, Any], static_only: bool = False, include_inherited: bool = True) -> List[Dict[str, Any]]: ...
def get_fields(class_or_object: Union[str, Any], static_only: bool = False) -> List[Dict[str, Any]]: ...
def find_members(class_or_object: Union[str, Any], keyword: str, include_methods: bool = True, include_fields: bool = True, static_only: bool = False, case_sensitive: bool = False) -> Dict[str, List[Dict[str, Any]]]: ...
def version(detailed: bool = False) -> str: ...
def print_version(detailed: bool = False) -> None: ...
def show_version(detailed: bool = False) -> None: ...
def info() -> None: ...
def get_available_classes() -> List[str]: ...
def get_class(class_name: str) -> Any: ...
def list_classes() -> None: ...
def get_curated_classes() -> List[str]: ...
def get_extended_classes() -> List[str]: ...

# Setup utilities
def set_fiji_path(path: str) -> bool: ...
def get_fiji_path() -> Optional[str]: ...
def clear_fiji_path() -> None: ...
def reset_fiji_path() -> None: ...
def get_config_info() -> Dict[str, Any]: ...
def show_config_status() -> None: ...
def auto_detect_and_configure() -> bool: ...
def is_fiji_valid(path: str) -> bool: ...
def get_fiji_status() -> Dict[str, Any]: ...

# Exception classes
class FijiNotFoundError(Exception): ...

# Constants
CURATED_ROOT_CLASSES: List[str]
EXTENDED_ROOT_CLASSES: List[str]
CURATED_CLASSES: List[str]
EXTENDED_CLASSES: List[str]