"""Comprehensive type stubs for Java classes."""

from typing import Any, List, Dict, Optional, Union, overload, Set, Callable

class FlyCircuitLoader:
    """
    SNT FlyCircuitLoader class with complete method signatures.
    Generated using Java reflection.
    """

    def __init__(self) -> None:
        """Initialize FlyCircuitLoader."""
        ...

    # Methods
    def getReader(self, arg0: str) -> Any: ...
    def getReconstructionURL(self, arg0: str) -> str: ...
    def getTree(self, arg0: str) -> Any: ...
    def isDatabaseAvailable(self) -> bool: ...
    @staticmethod
    def main(arg0: List[str]) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class InsectBrainLoader:
    """
    SNT InsectBrainLoader class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: int) -> None: ...

    # Methods
    def getAnnotations(self) -> List[Any]: ...
    def getMeshes(self) -> List[Any]: ...
    def getNeuronInfo(self) -> Any: ...
    def getTree(self) -> Any: ...
    def idExists(self) -> bool: ...
    @staticmethod
    def isDatabaseAvailable() -> bool: ...
    @staticmethod
    def main(arg0: List[str]) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class MouseLightLoader:
    """
    SNT MouseLightLoader class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: str) -> None: ...

    # Fields
    AXON: str
    DENDRITE: str
    SOMA: str

    # Methods
    @staticmethod
    def demoTrees() -> List[Any]: ...
    @overload
    @staticmethod
    def extractNodes(arg0: Any, arg1: str) -> Dict[str, Any]: ...
    @overload
    @staticmethod
    def extractNodes(arg0: Any, arg1: str) -> Dict[str, Any]: ...
    @overload
    @staticmethod
    def extractTrees(arg0: Any, arg1: str) -> Dict[str, Any]: ...
    @overload
    @staticmethod
    def extractTrees(arg0: Any, arg1: str) -> Dict[str, Any]: ...
    @staticmethod
    def getAllLoaders() -> List[Any]: ...
    def getDOI(self) -> str: ...
    def getID(self) -> str: ...
    def getJSON(self) -> Any: ...
    @staticmethod
    def getNeuronCount() -> int: ...
    @overload
    def getNodes(self, arg0: str) -> Any: ...
    @overload
    def getNodes(self) -> Any: ...
    def getSWC(self) -> str: ...
    def getSampleInfo(self) -> str: ...
    def getSomaCompartment(self) -> Any: ...
    def getSomaLocation(self) -> Any: ...
    @overload
    def getTree(self, arg0: str) -> Any: ...
    @overload
    def getTree(self) -> Any: ...
    @overload
    def getTree(self, arg0: str, arg1: Any) -> Any: ...
    def idExists(self) -> bool: ...
    @staticmethod
    def isDatabaseAvailable() -> bool: ...
    @staticmethod
    def main(arg0: List[str]) -> None: ...
    @overload
    def save(self, arg0: Any) -> bool: ...
    @overload
    def save(self, arg0: str) -> bool: ...
    def saveAsJSON(self, arg0: str) -> bool: ...
    def saveAsSWC(self, arg0: str) -> bool: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class MouseLightQuerier:
    """
    SNT MouseLightQuerier class with complete method signatures.
    Generated using Java reflection.
    """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        """Initialize MouseLightQuerier."""
        ...

    # Methods
    @staticmethod
    def getAllIDs() -> List[Any]: ...
    @overload
    @staticmethod
    def getIDs(arg0: List[Any], arg1: bool) -> List[Any]: ...
    @overload
    @staticmethod
    def getIDs(arg0: Any) -> List[Any]: ...
    @overload
    @staticmethod
    def getIDs(arg0: str, arg1: bool) -> List[Any]: ...
    @overload
    @staticmethod
    def getIDs(arg0: List[Any]) -> List[Any]: ...
    @staticmethod
    def getNeuronCount() -> int: ...
    @staticmethod
    def isDatabaseAvailable() -> bool: ...
    @staticmethod
    def main(arg0: List[str]) -> None: ...
    @staticmethod
    def setCCFVersion(arg0: str) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class NeuroMorphoLoader:
    """
    SNT NeuroMorphoLoader class with complete method signatures.
    Generated using Java reflection.
    """

    def __init__(self) -> None:
        """Initialize NeuroMorphoLoader."""
        ...

    # Methods
    def enableSourceVersion(self, arg0: bool) -> None: ...
    @staticmethod
    def get(arg0: str) -> Any: ...
    def getReader(self, arg0: str) -> Any: ...
    def getReconstructionURL(self, arg0: str) -> str: ...
    def getTree(self, arg0: str) -> Any: ...
    def isDatabaseAvailable(self) -> bool: ...
    @staticmethod
    def main(arg0: List[str]) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class RemoteSWCLoader:
    """
    SNT RemoteSWCLoader class with complete method signatures.
    Generated using Java reflection.
    """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        """Initialize RemoteSWCLoader."""
        ...

    # Methods
    @staticmethod
    def download(arg0: str, arg1: Any) -> bool: ...
    def getReader(self, arg0: str) -> Any: ...
    def getReconstructionURL(self, arg0: str) -> str: ...
    def getTree(self, arg0: str) -> Any: ...
    def isDatabaseAvailable(self) -> bool: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class WekaModelLoader:
    """
    SNT WekaModelLoader class with complete method signatures.
    Generated using Java reflection.
    """

    def __init__(self) -> None:
        """Initialize WekaModelLoader."""
        ...

    # Methods
    @overload
    def addInput(self, arg0: str, arg1: Any) -> Any: ...
    @overload
    def addInput(self, arg0: Any) -> None: ...
    @overload
    def addOutput(self, arg0: str, arg1: Any) -> Any: ...
    @overload
    def addOutput(self, arg0: Any) -> None: ...
    @overload
    def cancel(self) -> None: ...
    @overload
    def cancel(self, arg0: str) -> None: ...
    def context(self) -> Any: ...
    def getCancelReason(self) -> str: ...
    def getContext(self) -> Any: ...
    def getDelegateObject(self) -> Any: ...
    @overload
    def getInfo(self) -> Any: ...
    @overload
    def getInfo(self) -> Any: ...
    @overload
    def getInfo(self) -> Any: ...
    def getInput(self, arg0: str) -> Any: ...
    def getInputs(self) -> Dict[str, Any]: ...
    def getOutput(self, arg0: str) -> Any: ...
    def getOutputs(self) -> Dict[str, Any]: ...
    def initialize(self) -> None: ...
    def isCanceled(self) -> bool: ...
    def isInputResolved(self, arg0: str) -> bool: ...
    def isOutputResolved(self, arg0: str) -> bool: ...
    def isResolved(self, arg0: str) -> bool: ...
    def preview(self) -> None: ...
    def removeInput(self, arg0: Any) -> None: ...
    def removeOutput(self, arg0: Any) -> None: ...
    def resolveInput(self, arg0: str) -> None: ...
    def resolveOutput(self, arg0: str) -> None: ...
    def run(self) -> None: ...
    def setContext(self, arg0: Any) -> None: ...
    def setInput(self, arg0: str, arg1: Any) -> None: ...
    def setInputs(self, arg0: Dict[str, Any]) -> None: ...
    def setOutput(self, arg0: str, arg1: Any) -> None: ...
    def setOutputs(self, arg0: Dict[str, Any]) -> None: ...
    def setResolved(self, arg0: str, arg1: bool) -> None: ...
    def uncancel(self) -> None: ...
    def unresolveInput(self, arg0: str) -> None: ...
    def unresolveOutput(self, arg0: str) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...


# Other functions
def get_available_classes() -> Any: ...
def get_class(class_name: str) -> Any: ...
def get_curated_classes() -> Any: ...
def get_extended_classes() -> Any: ...
def list_classes() -> None: ...
def setup_module_classes(*args: Any, **kwargs: Any) -> Any: ...

# Imported classes
class Any: ...
class Dict: ...
class List: ...

# Constants
CURATED_CLASSES: List[str]
EXTENDED_CLASSES: List[str]