"""Comprehensive type stubs for Java classes."""

from typing import Any, List, Dict, Optional, Union, overload, Set, Callable

class Profile:
    """
    SNT Profile class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: List[List[float]]) -> None: ...
    @overload
    def __init__(self, arg0: List[Any], arg1: List[Any]) -> None: ...
    @overload
    def __init__(self, arg0: List[Any], arg1: List[Any]) -> None: ...

    # Fields
    KEY_ID: str
    KEY_2D3D: str
    KEY_SOURCE: str
    KEY_HEMISHELLS: str
    KEY_NSAMPLES: str
    KEY_NSAMPLES_INTG: str
    KEY_CALIBRATION: str
    KEY_CENTER: str
    KEY_CHANNEL_POS: str
    KEY_SLICE_POS: str
    KEY_FRAME_POS: str
    KEY_THRESHOLD_RANGE: str
    KEY_EFFECTIVE_STEP_SIZE: str
    KEY_EXTRA_MEASUREMENT: str
    SRC_TABLE: str
    SRC_TRACES: str
    SRC_IMG: str
    HEMI_NONE: str
    HEMI_NORTH: str
    HEMI_SOUTH: str
    HEMI_WEST: str
    HEMI_EAST: str
    INTG_MEAN: str
    INTG_MEDIAN: str
    INTG_MODE: str
    UNSET: str

    # Methods
    def add(self, arg0: Any) -> bool: ...
    def assignImage(self, arg0: Any) -> None: ...
    def center(self) -> Any: ...
    def counts(self) -> List[Any]: ...
    def countsAsArray(self) -> List[float]: ...
    def duplicate(self) -> Any: ...
    def endRadius(self) -> float: ...
    def entries(self) -> Any: ...
    def extras(self) -> List[Any]: ...
    def getCountAtRadius(self, arg0: float) -> float: ...
    def getExtraMeasurement(self) -> str: ...
    def getProperties(self) -> Any: ...
    @overload
    def getROIs(self, arg0: Any) -> Any: ...
    @overload
    def getROIs(self) -> Any: ...
    def hasExtraMeasurement(self) -> bool: ...
    def hasPoints(self) -> bool: ...
    def identifier(self) -> str: ...
    def is2D(self) -> bool: ...
    def isEmpty(self) -> bool: ...
    def isIntDensityProfile(self) -> bool: ...
    def lengths(self) -> List[Any]: ...
    def lengthsAsArray(self) -> List[float]: ...
    def nDimensions(self) -> int: ...
    def plot(self) -> Any: ...
    def points(self) -> List[Any]: ...
    def radii(self) -> List[Any]: ...
    def radiiAsArray(self) -> List[float]: ...
    def radiiSquared(self) -> List[Any]: ...
    def scale(self, arg0: float, arg1: float, arg2: float) -> None: ...
    def scaled(self) -> bool: ...
    def setCenter(self, arg0: Any) -> None: ...
    def setExtraMeasurement(self, arg0: str, arg1: str) -> None: ...
    def setIdentifier(self, arg0: str) -> None: ...
    def setIsIntDensityProfile(self, arg0: bool) -> None: ...
    def setNDimensions(self, arg0: int) -> None: ...
    def setProperties(self, arg0: Any) -> None: ...
    def setSpatialCalibration(self, arg0: Any) -> None: ...
    def size(self) -> int: ...
    def source(self) -> str: ...
    def spatialCalibration(self) -> Any: ...
    def startRadius(self) -> float: ...
    def stepSize(self) -> float: ...
    def trimNaNCounts(self) -> None: ...
    def trimZeroCounts(self) -> None: ...
    def zeroCounts(self) -> int: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class ProfileEntry:
    """
    SNT ProfileEntry class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any, arg2: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Set[Any]) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any, arg2: Any, arg3: Set[Any]) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any, arg2: Set[Any]) -> None: ...

    # Fields
    radius: float
    count: float
    length: float
    extra: float
    points: Set[Any]

    # Methods
    def addPoint(self, arg0: Any) -> None: ...
    def assignPoints(self, arg0: Set[Any]) -> None: ...
    @overload
    def compareTo(self, arg0: Any) -> int: ...
    @overload
    def compareTo(self, arg0: Any) -> int: ...
    def radiusSquared(self) -> float: ...
    def removePoint(self, arg0: Any) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class ProfileProperties:
    """
    SNT ProfileProperties class (type stub).
    
    This class provides access to the Java ProfileProperties functionality.
    At runtime, this is handled by the dynamic placeholder system in setup_module_classes().
    All methods and properties are dynamically resolved at runtime.
    """
    
    def __init__(self, *args: Any, **kwargs: Any) -> None:
        """Initialize the ProfileProperties."""
        ...
    
    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for Java methods and fields."""
        ...
    
    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable if it has a default method."""
        ...

def _java_setup() -> Any: ...
def _discover_extended_classes() -> Any: ...
def get_available_classes() -> List[str]: ...
def get_class(class_name: str) -> Any: ...
def list_classes() -> None: ...
def get_curated_classes() -> List[str]: ...
def get_extended_classes() -> List[str]: ...
def __getattr__(name: str) -> Any: ...
def __dir__() -> List[str]: ...

# Imported classes
class Any: ...
class Dict: ...
class List: ...

# Constants
CURATED_CLASSES: List[str]
EXTENDED_CLASSES: List[str]