"""Comprehensive type stubs for Java classes."""

from typing import Any, List, Dict, Optional, Union, overload, Set, Callable

class ImageParser:
    """
    SNT ImageParser class with complete method signatures.
    Generated using Java reflection.
    """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        """Initialize ImageParser."""
        ...

    # Fields
    KEY_ID: str
    KEY_2D3D: str
    KEY_SOURCE: str
    KEY_HEMISHELLS: str
    KEY_NSAMPLES: str
    KEY_NSAMPLES_INTG: str
    KEY_CALIBRATION: str
    KEY_CENTER: str
    KEY_CHANNEL_POS: str
    KEY_SLICE_POS: str
    KEY_FRAME_POS: str
    KEY_THRESHOLD_RANGE: str
    KEY_EFFECTIVE_STEP_SIZE: str
    KEY_EXTRA_MEASUREMENT: str
    SRC_TABLE: str
    SRC_TRACES: str
    SRC_IMG: str
    HEMI_NONE: str
    HEMI_NORTH: str
    HEMI_SOUTH: str
    HEMI_WEST: str
    HEMI_EAST: str
    INTG_MEAN: str
    INTG_MEDIAN: str
    INTG_MODE: str
    UNSET: str

    # Methods
    def cancel(self, arg0: str) -> None: ...
    def context(self) -> Any: ...
    def getCancelReason(self) -> str: ...
    def getCircumferencePoints(self, arg0: int, arg1: int, arg2: int) -> List[List[int]]: ...
    def getContext(self) -> Any: ...
    def getIsotropicVoxelSize(self) -> float: ...
    def getMask(self) -> Any: ...
    def getMaskProcessor(self, arg0: bool, arg1: List[float]) -> Any: ...
    def getProfile(self) -> Any: ...
    def isCanceled(self) -> bool: ...
    def isRetrieveIntDensitiesSet(self) -> bool: ...
    def maxPossibleRadius(self) -> float: ...
    def parse(self) -> None: ...
    def reset(self) -> None: ...
    def run(self) -> None: ...
    def setCenter(self, arg0: float, arg1: float, arg2: float) -> None: ...
    @overload
    def setCenterFromROI(self) -> None: ...
    @overload
    def setCenterFromROI(self, arg0: Any) -> None: ...
    def setCenterPx(self, arg0: int, arg1: int, arg2: int) -> None: ...
    def setContext(self, arg0: Any) -> None: ...
    def setHemiShells(self, arg0: str) -> None: ...
    @overload
    def setRadii(self, arg0: float, arg1: float, arg2: float) -> None: ...
    @overload
    def setRadii(self, arg0: List[float]) -> None: ...
    def setRetrieveIntDensities(self, arg0: bool) -> None: ...
    def setThreshold(self, arg0: float, arg1: float) -> None: ...
    def successful(self) -> bool: ...
    def terminate(self) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class TreeParser:
    """
    SNT TreeParser class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Any) -> None: ...

    # Fields
    ROOT_NODES_ANY: int
    ROOT_NODES_APICAL_DENDRITE: int
    ROOT_NODES_AXON: int
    ROOT_NODES_CUSTOM: int
    ROOT_NODES_DENDRITE: int
    ROOT_NODES_SOMA: int
    ROOT_NODES_SOMA_ANY: int
    ROOT_NODES_UNDEFINED: int
    KEY_ID: str
    KEY_2D3D: str
    KEY_SOURCE: str
    KEY_HEMISHELLS: str
    KEY_NSAMPLES: str
    KEY_NSAMPLES_INTG: str
    KEY_CALIBRATION: str
    KEY_CENTER: str
    KEY_CHANNEL_POS: str
    KEY_SLICE_POS: str
    KEY_FRAME_POS: str
    KEY_THRESHOLD_RANGE: str
    KEY_EFFECTIVE_STEP_SIZE: str
    KEY_EXTRA_MEASUREMENT: str
    SRC_TABLE: str
    SRC_TRACES: str
    SRC_IMG: str
    HEMI_NONE: str
    HEMI_NORTH: str
    HEMI_SOUTH: str
    HEMI_WEST: str
    HEMI_EAST: str
    INTG_MEAN: str
    INTG_MEDIAN: str
    INTG_MODE: str
    UNSET: str

    # Methods
    def getCenter(self) -> Any: ...
    def getLabelsImage(self, arg0: Any, arg1: Any) -> Any: ...
    def getProfile(self) -> Any: ...
    def getTree(self) -> Any: ...
    def isSkipSomaticSegments(self) -> bool: ...
    @staticmethod
    def main(arg0: List[str]) -> None: ...
    def parse(self) -> None: ...
    @overload
    def setCenter(self, arg0: Any) -> None: ...
    @overload
    def setCenter(self, arg0: int) -> None: ...
    @overload
    def setCenter(self, arg0: List[float]) -> None: ...
    def setIntersectedVolumeAsExtraMeasurement(self, arg0: bool) -> None: ...
    def setSkipSomaticSegments(self, arg0: bool) -> None: ...
    def setStepSize(self, arg0: float) -> None: ...
    def successful(self) -> bool: ...
    def terminate(self) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class ImageParser2D:
    """
    SNT ImageParser2D class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any) -> None: ...

    # Fields
    MEAN: int
    MEDIAN: int
    MODE: int
    MAX_N_SPANS: int
    KEY_ID: str
    KEY_2D3D: str
    KEY_SOURCE: str
    KEY_HEMISHELLS: str
    KEY_NSAMPLES: str
    KEY_NSAMPLES_INTG: str
    KEY_CALIBRATION: str
    KEY_CENTER: str
    KEY_CHANNEL_POS: str
    KEY_SLICE_POS: str
    KEY_FRAME_POS: str
    KEY_THRESHOLD_RANGE: str
    KEY_EFFECTIVE_STEP_SIZE: str
    KEY_EXTRA_MEASUREMENT: str
    SRC_TABLE: str
    SRC_TRACES: str
    SRC_IMG: str
    HEMI_NONE: str
    HEMI_NORTH: str
    HEMI_SOUTH: str
    HEMI_WEST: str
    HEMI_EAST: str
    INTG_MEAN: str
    INTG_MEDIAN: str
    INTG_MODE: str
    UNSET: str

    # Methods
    def cancel(self, arg0: str) -> None: ...
    def context(self) -> Any: ...
    def getCancelReason(self) -> str: ...
    def getCircumferencePoints(self, arg0: int, arg1: int, arg2: int) -> List[List[int]]: ...
    def getContext(self) -> Any: ...
    def getIsotropicVoxelSize(self) -> float: ...
    def getMask(self) -> Any: ...
    def getMaskProcessor(self, arg0: bool, arg1: List[float]) -> Any: ...
    def getProfile(self) -> Any: ...
    def isCanceled(self) -> bool: ...
    def isRetrieveIntDensitiesSet(self) -> bool: ...
    def maxPossibleRadius(self) -> float: ...
    def parse(self) -> None: ...
    def reset(self) -> None: ...
    def run(self) -> None: ...
    @overload
    def setCenter(self, arg0: float, arg1: float) -> None: ...
    @overload
    def setCenter(self, arg0: float, arg1: float, arg2: float) -> None: ...
    @overload
    def setCenterFromROI(self) -> None: ...
    @overload
    def setCenterFromROI(self, arg0: Any) -> None: ...
    @overload
    def setCenterPx(self, arg0: int, arg1: int) -> None: ...
    @overload
    def setCenterPx(self, arg0: int, arg1: int, arg2: int) -> None: ...
    def setContext(self, arg0: Any) -> None: ...
    def setHemiShells(self, arg0: str) -> None: ...
    def setPosition(self, arg0: int, arg1: int, arg2: int) -> None: ...
    @overload
    def setRadii(self, arg0: float, arg1: float, arg2: float) -> None: ...
    @overload
    def setRadii(self, arg0: float, arg1: float, arg2: float, arg3: int, arg4: int) -> None: ...
    @overload
    def setRadii(self, arg0: List[float]) -> None: ...
    def setRadiiSpan(self, arg0: int, arg1: int) -> None: ...
    def setRetrieveIntDensities(self, arg0: bool) -> None: ...
    def setThreshold(self, arg0: float, arg1: float) -> None: ...
    def successful(self) -> bool: ...
    def terminate(self) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class ImageParser3D:
    """
    SNT ImageParser3D class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any) -> None: ...

    # Fields
    KEY_ID: str
    KEY_2D3D: str
    KEY_SOURCE: str
    KEY_HEMISHELLS: str
    KEY_NSAMPLES: str
    KEY_NSAMPLES_INTG: str
    KEY_CALIBRATION: str
    KEY_CENTER: str
    KEY_CHANNEL_POS: str
    KEY_SLICE_POS: str
    KEY_FRAME_POS: str
    KEY_THRESHOLD_RANGE: str
    KEY_EFFECTIVE_STEP_SIZE: str
    KEY_EXTRA_MEASUREMENT: str
    SRC_TABLE: str
    SRC_TRACES: str
    SRC_IMG: str
    HEMI_NONE: str
    HEMI_NORTH: str
    HEMI_SOUTH: str
    HEMI_WEST: str
    HEMI_EAST: str
    INTG_MEAN: str
    INTG_MEDIAN: str
    INTG_MODE: str
    UNSET: str

    # Methods
    def cancel(self, arg0: str) -> None: ...
    def context(self) -> Any: ...
    def getCancelReason(self) -> str: ...
    def getCircumferencePoints(self, arg0: int, arg1: int, arg2: int) -> List[List[int]]: ...
    def getContext(self) -> Any: ...
    def getIsotropicVoxelSize(self) -> float: ...
    def getMask(self) -> Any: ...
    def getMaskProcessor(self, arg0: bool, arg1: List[float]) -> Any: ...
    def getProfile(self) -> Any: ...
    def isCanceled(self) -> bool: ...
    def isRetrieveIntDensitiesSet(self) -> bool: ...
    def isSkipSingleVoxels(self) -> bool: ...
    def maxPossibleRadius(self) -> float: ...
    def parse(self) -> None: ...
    def reset(self) -> None: ...
    def run(self) -> None: ...
    def setCenter(self, arg0: float, arg1: float, arg2: float) -> None: ...
    @overload
    def setCenterFromROI(self) -> None: ...
    @overload
    def setCenterFromROI(self, arg0: Any) -> None: ...
    def setCenterPx(self, arg0: int, arg1: int, arg2: int) -> None: ...
    def setContext(self, arg0: Any) -> None: ...
    def setHemiShells(self, arg0: str) -> None: ...
    def setPosition(self, arg0: int, arg1: int) -> None: ...
    @overload
    def setRadii(self, arg0: float, arg1: float, arg2: float) -> None: ...
    @overload
    def setRadii(self, arg0: List[float]) -> None: ...
    def setRetrieveIntDensities(self, arg0: bool) -> None: ...
    def setSkipSingleVoxels(self, arg0: bool) -> None: ...
    def setThreshold(self, arg0: float, arg1: float) -> None: ...
    def successful(self) -> bool: ...
    def terminate(self) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

def _java_setup() -> Any: ...
def _discover_extended_classes() -> Any: ...
def get_available_classes() -> List[str]: ...
def get_class(class_name: str) -> Any: ...
def list_classes() -> Any: ...
def get_curated_classes() -> List[str]: ...
def get_extended_classes() -> List[str]: ...
def __getattr__(name: str) -> Any: ...
def __dir__() -> List[str]: ...

# Other functions
def __dir__(*args: Any, **kwargs: Any) -> Any: ...
def __getattr__(*args: Any, **kwargs: Any) -> Any: ...
def _discover_extended_classes(*args: Any, **kwargs: Any) -> Any: ...
def _java_setup(*args: Any, **kwargs: Any) -> Any: ...
def get_available_classes() -> Any: ...
def get_class() -> Any: ...
def get_curated_classes() -> Any: ...
def get_extended_classes() -> Any: ...
def list_classes() -> List[str]: ...

# Imported classes
class Any: ...
class Dict: ...
class List: ...

# Constants
CURATED_CLASSES: List[str]
EXTENDED_CLASSES: List[str]