"""Comprehensive type stubs for Java classes."""

from typing import Any, List, Dict, Optional, Union, overload, Set

class LinearProfileStats:
    """
    SNT LinearProfileStats class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any) -> None: ...

    # Fields
    AREA: int
    PERIMETER: int
    ANNULUS: int
    VOLUME: int
    SURFACE: int
    S_SHELL: int
    SEMI_LOG: int
    LOG_LOG: int
    GUESS_SLOG: int

    # Methods
    def cancel(self, arg0: str) -> None: ...
    def context(self) -> Any: ...
    @overload
    def findBestFit(self, arg0: int, arg1: int, arg2: float, arg3: float) -> int: ...
    @overload
    def findBestFit(self, arg0: int, arg1: int, arg2: Any) -> int: ...
    def fitPolynomial(self, arg0: int) -> None: ...
    def getBranchingIndex(self, arg0: bool) -> float: ...
    def getCancelReason(self) -> str: ...
    @overload
    def getCenteredMaximum(self) -> Any: ...
    @overload
    def getCenteredMaximum(self, arg0: bool) -> Any: ...
    @overload
    def getCentroid(self, arg0: bool) -> Any: ...
    @overload
    def getCentroid(self) -> Any: ...
    def getContext(self) -> Any: ...
    def getDataMode(self) -> Any: ...
    @overload
    def getEnclosingRadius(self, arg0: bool, arg1: float) -> float: ...
    @overload
    def getEnclosingRadius(self, arg0: float) -> float: ...
    @overload
    def getFitYValues(self, arg0: bool) -> List[float]: ...
    @overload
    def getFitYValues(self) -> List[float]: ...
    def getIndexOfInters(self, arg0: bool, arg1: float) -> int: ...
    def getIndexOfRadius(self, arg0: float) -> int: ...
    @overload
    def getIntersectingRadii(self) -> int: ...
    @overload
    def getIntersectingRadii(self, arg0: bool) -> int: ...
    def getKStestOfFit(self) -> float: ...
    @overload
    def getKurtosis(self, arg0: bool) -> float: ...
    @overload
    def getKurtosis(self) -> float: ...
    @overload
    def getMax(self) -> float: ...
    @overload
    def getMax(self, arg0: bool) -> float: ...
    def getMaxEvaluations(self) -> int: ...
    @overload
    def getMaxima(self, arg0: bool) -> List[Any]: ...
    @overload
    def getMaxima(self) -> List[Any]: ...
    @overload
    def getMean(self) -> float: ...
    @overload
    def getMean(self, arg0: bool) -> float: ...
    @overload
    def getMeanValueOfPolynomialFit(self, arg0: float, arg1: float) -> float: ...
    @overload
    def getMeanValueOfPolynomialFit(self, arg0: str, arg1: float, arg2: float) -> float: ...
    @overload
    def getMedian(self, arg0: bool) -> float: ...
    @overload
    def getMedian(self) -> float: ...
    @overload
    def getMin(self) -> float: ...
    @overload
    def getMin(self, arg0: bool) -> float: ...
    def getN(self) -> int: ...
    def getPlot(self, arg0: bool) -> Any: ...
    @overload
    def getPolygonCentroid(self) -> Any: ...
    @overload
    def getPolygonCentroid(self, arg0: bool) -> Any: ...
    def getPolynomial(self) -> Any: ...
    def getPolynomialAsString(self, arg0: bool) -> str: ...
    def getPolynomialDegree(self) -> int: ...
    def getPolynomialMaxima(self, arg0: float, arg1: float, arg2: float) -> Set[Any]: ...
    @overload
    def getPrimaryBranches(self) -> float: ...
    @overload
    def getPrimaryBranches(self, arg0: bool) -> float: ...
    def getProfile(self) -> Any: ...
    @overload
    def getRSquaredOfFit(self, arg0: bool) -> float: ...
    @overload
    def getRSquaredOfFit(self) -> float: ...
    @overload
    def getRamificationIndex(self) -> float: ...
    @overload
    def getRamificationIndex(self, arg0: bool) -> float: ...
    @overload
    def getSkewness(self, arg0: bool) -> float: ...
    @overload
    def getSkewness(self) -> float: ...
    @overload
    def getSum(self) -> float: ...
    @overload
    def getSum(self, arg0: bool) -> float: ...
    @overload
    def getSumSq(self) -> float: ...
    @overload
    def getSumSq(self, arg0: bool) -> float: ...
    @overload
    def getVariance(self, arg0: bool) -> float: ...
    @overload
    def getVariance(self) -> float: ...
    def getXValues(self) -> List[float]: ...
    @overload
    def getYValues(self) -> List[float]: ...
    @overload
    def getYValues(self, arg0: bool) -> List[float]: ...
    def isCanceled(self) -> bool: ...
    def isPrimaryBranchesInferred(self) -> bool: ...
    def plot(self) -> Any: ...
    def run(self) -> None: ...
    def setContext(self, arg0: Any) -> None: ...
    def setDataMode(self, arg0: Any) -> None: ...
    def setDebug(self, arg0: bool) -> None: ...
    @overload
    def setLogger(self, arg0: Any, arg1: bool) -> None: ...
    @overload
    def setLogger(self, arg0: Any) -> None: ...
    def setMaxEvaluations(self, arg0: int) -> None: ...
    def setPrimaryBranches(self, arg0: int) -> None: ...
    def validFit(self) -> bool: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class NormalizedProfileStats:
    """
    SNT NormalizedProfileStats class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any, arg2: int, arg3: int) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any, arg2: int) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: int, arg2: int) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: int) -> None: ...

    # Fields
    AREA: int
    PERIMETER: int
    ANNULUS: int
    VOLUME: int
    SURFACE: int
    S_SHELL: int
    SEMI_LOG: int
    LOG_LOG: int
    GUESS_SLOG: int

    # Methods
    def cancel(self, arg0: str) -> None: ...
    def context(self) -> Any: ...
    def getCancelReason(self) -> str: ...
    def getContext(self) -> Any: ...
    def getDataMode(self) -> Any: ...
    def getDeterminationRatio(self) -> float: ...
    @overload
    def getFitYValues(self, arg0: bool) -> List[float]: ...
    @overload
    def getFitYValues(self) -> List[float]: ...
    def getIntercept(self) -> float: ...
    def getKStestOfFit(self) -> float: ...
    def getMethod(self) -> int: ...
    def getMethodDescription(self) -> str: ...
    @staticmethod
    def getMethodFlag(arg0: str) -> int: ...
    def getN(self) -> int: ...
    def getNormalizer(self) -> int: ...
    def getNormalizerDescription(self) -> str: ...
    @staticmethod
    def getNormalizerFlag(arg0: str) -> int: ...
    def getPlot(self, arg0: bool) -> Any: ...
    def getProfile(self) -> Any: ...
    def getR(self) -> float: ...
    def getRSquaredOfFit(self) -> float: ...
    def getRegression(self) -> Any: ...
    def getShollDecay(self) -> float: ...
    def getSlope(self) -> float: ...
    def getXValues(self) -> List[float]: ...
    @overload
    def getYValues(self, arg0: bool) -> List[float]: ...
    @overload
    def getYValues(self) -> List[float]: ...
    def is2Dnormalization(self) -> bool: ...
    def is3Dnormalization(self) -> bool: ...
    def isCanceled(self) -> bool: ...
    def resetRegression(self) -> None: ...
    def restrictRegToPercentile(self, arg0: float, arg1: float) -> None: ...
    def restrictRegToRange(self, arg0: float, arg1: float) -> None: ...
    def run(self) -> None: ...
    def setContext(self, arg0: Any) -> None: ...
    def setDataMode(self, arg0: Any) -> None: ...
    def setDebug(self, arg0: bool) -> None: ...
    @overload
    def setLogger(self, arg0: Any) -> None: ...
    @overload
    def setLogger(self, arg0: Any, arg1: bool) -> None: ...
    def validFit(self) -> bool: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class ProfileStats:
    """
    SNT ProfileStats class.
    
    This class provides access to the Java ProfileStats functionality.
    All methods and properties are dynamically resolved at runtime.
    """
    
    def __init__(self, *args: Any, **kwargs: Any) -> None:
        """Initialize the ProfileStats."""
        ...
    
    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for Java methods and fields."""
        ...
    
    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable if it has a default method."""
        ...

class ShollStats:
    """
    SNT ShollStats class with complete method signatures.
    Generated using Java reflection.
    """

    def __init__(self, *args: Any, **kwargs: Any) -> None:
        """Initialize ShollStats."""
        ...

    # Fields
    AREA: int
    PERIMETER: int
    ANNULUS: int
    VOLUME: int
    SURFACE: int
    S_SHELL: int
    SEMI_LOG: int
    LOG_LOG: int
    GUESS_SLOG: int

    # Methods
    def getDataMode(self) -> Any: ...
    @overload
    def getFitYValues(self, arg0: bool) -> List[float]: ...
    @overload
    def getFitYValues(self) -> List[float]: ...
    def getN(self) -> int: ...
    def getProfile(self) -> Any: ...
    def getXValues(self) -> List[float]: ...
    @overload
    def getYValues(self) -> List[float]: ...
    @overload
    def getYValues(self, arg0: bool) -> List[float]: ...
    def setDataMode(self, arg0: Any) -> None: ...
    def validFit(self) -> bool: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

# Module functions
def get_available_classes() -> List[str]: ...
def get_class(class_name: str) -> Any: ...
def list_classes() -> None: ...
def get_curated_classes() -> List[str]: ...
def get_extended_classes() -> List[str]: ...

CURATED_CLASSES: List[str]
EXTENDED_CLASSES: List[str]