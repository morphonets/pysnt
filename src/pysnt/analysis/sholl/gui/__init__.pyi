"""Comprehensive type stubs for Java classes."""

from typing import Any, List, Dict, Optional, Union, overload, Set, Callable

class ShollPlot:
    """
    SNT ShollPlot class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: bool) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: List[Any]) -> None: ...
    @overload
    def __init__(self, arg0: List[Any]) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str, arg3: Any, arg4: bool, arg5: bool) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str, arg2: str) -> None: ...
    @overload
    def __init__(self, arg0: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any) -> None: ...

    # Fields
    THICK_LINE: int
    LEFT: int
    CENTER: int
    RIGHT: int
    TOP_LEFT: int
    TOP_RIGHT: int
    BOTTOM_LEFT: int
    BOTTOM_RIGHT: int
    AUTO_POSITION: int
    LEGEND_BOTTOM_UP: int
    LEGEND_TRANSPARENT: int
    CIRCLE: int
    X: int
    LINE: int
    BOX: int
    TRIANGLE: int
    CROSS: int
    DOT: int
    CONNECTED_CIRCLES: int
    DIAMOND: int
    CUSTOM: int
    FILLED: int
    BAR: int
    SEPARATED_BAR: int
    X_NUMBERS: int
    Y_NUMBERS: int
    X_TICKS: int
    Y_TICKS: int
    X_GRID: int
    Y_GRID: int
    X_FORCE2GRID: int
    Y_FORCE2GRID: int
    X_MINOR_TICKS: int
    Y_MINOR_TICKS: int
    X_LOG_NUMBERS: int
    Y_LOG_NUMBERS: int
    X_LOG_TICKS: int
    Y_LOG_TICKS: int
    DEFAULT_FLAGS: int
    X_RANGE: int
    Y_RANGE: int
    COPY_SIZE: int
    COPY_LABELS: int
    COPY_LEGEND: int
    COPY_AXIS_STYLE: int
    COPY_CONTENTS_STYLE: int
    COPY_EXTRA_OBJECTS: int
    LEFT_MARGIN: int
    RIGHT_MARGIN: int
    TOP_MARGIN: int
    BOTTOM_MARGIN: int
    MIN_FRAMEWIDTH: int
    MIN_FRAMEHEIGHT: int
    PROPERTY_KEY: str

    # Methods
    @overload
    def add(self, arg0: str, arg1: List[float]) -> None: ...
    @overload
    def add(self, arg0: str, arg1: List[float], arg2: List[float]) -> None: ...
    @overload
    def addErrorBars(self, arg0: List[float]) -> None: ...
    @overload
    def addErrorBars(self, arg0: str, arg1: List[float]) -> None: ...
    @overload
    def addErrorBars(self, arg0: List[float]) -> None: ...
    @overload
    def addHistogram(self, arg0: List[float], arg1: float, arg2: float) -> None: ...
    @overload
    def addHistogram(self, arg0: List[float], arg1: float) -> None: ...
    @overload
    def addHistogram(self, arg0: List[float]) -> None: ...
    @overload
    def addHorizontalErrorBars(self, arg0: List[float]) -> None: ...
    @overload
    def addHorizontalErrorBars(self, arg0: List[float]) -> None: ...
    def addLabel(self, arg0: float, arg1: float, arg2: str) -> None: ...
    @overload
    def addLegend(self, arg0: str, arg1: str) -> None: ...
    @overload
    def addLegend(self, arg0: str) -> None: ...
    def addObjectFromPlot(self, arg0: Any, arg1: int) -> int: ...
    @overload
    def addPoints(self, arg0: List[Any], arg1: List[Any], arg2: List[Any], arg3: str) -> None: ...
    @overload
    def addPoints(self, arg0: List[float], arg1: List[float], arg2: str) -> None: ...
    @overload
    def addPoints(self, arg0: List[float], arg1: List[float], arg2: int) -> None: ...
    @overload
    def addPoints(self, arg0: List[float], arg1: List[float], arg2: List[float], arg3: str) -> None: ...
    @overload
    def addPoints(self, arg0: List[Any], arg1: str) -> None: ...
    @overload
    def addPoints(self, arg0: List[Any], arg1: List[Any], arg2: str) -> None: ...
    @overload
    def addPoints(self, arg0: List[Any], arg1: List[Any], arg2: int) -> None: ...
    @overload
    def addPoints(self, arg0: List[float], arg1: List[float], arg2: List[float], arg3: int, arg4: str) -> None: ...
    @overload
    def addPoints(self, arg0: str, arg1: List[float], arg2: List[float], arg3: int) -> None: ...
    @overload
    def addPoints(self, arg0: List[float], arg1: List[float], arg2: List[float], arg3: int) -> None: ...
    @overload
    def addPoints(self, arg0: List[Any], arg1: List[Any], arg2: List[Any], arg3: int) -> None: ...
    @overload
    def addPoints(self, arg0: List[float], arg1: List[float], arg2: int) -> None: ...
    def addText(self, arg0: str, arg1: float, arg2: float) -> None: ...
    def addToStack(self) -> None: ...
    def adjustCalibration(self, arg0: Any) -> None: ...
    def appendToStack(self) -> None: ...
    @staticmethod
    def calculateDistance(arg0: int, arg1: int, arg2: int, arg3: int) -> float: ...
    def changeFont(self, arg0: Any) -> None: ...
    @staticmethod
    def defaultXtitle(arg0: Any) -> str: ...
    def descaleX(self, arg0: int) -> float: ...
    def descaleY(self, arg0: int) -> float: ...
    def dispose(self) -> None: ...
    def draw(self) -> None: ...
    def drawArrow(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: float) -> None: ...
    def drawDottedLine(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: int) -> None: ...
    def drawLabel(self, arg0: str, arg1: Any) -> None: ...
    def drawLine(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...
    def drawNormalizedLine(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...
    def drawShapes(self, arg0: str, arg1: List[Any]) -> None: ...
    @overload
    def drawVectors(self, arg0: List[float], arg1: List[float], arg2: List[float], arg3: List[float]) -> None: ...
    @overload
    def drawVectors(self, arg0: List[Any], arg1: List[Any], arg2: List[Any], arg3: List[Any]) -> None: ...
    def enableLegend(self, arg0: bool) -> None: ...
    def getCurrentFont(self) -> Any: ...
    def getDataObjectArrays(self, arg0: int) -> List[List[float]]: ...
    def getDataObjectDesignations(self) -> List[str]: ...
    @staticmethod
    def getDefaultFlags() -> int: ...
    def getDefaultFont(self) -> Any: ...
    def getDoubleFromArrayList(self, arg0: List[Any]) -> List[float]: ...
    def getDrawingFrame(self) -> Any: ...
    def getFlags(self) -> int: ...
    def getFont(self, arg0: str) -> Any: ...
    def getImagePlus(self) -> Any: ...
    def getLabel(self, arg0: str) -> str: ...
    def getLimits(self) -> List[float]: ...
    def getMinimumSize(self) -> Any: ...
    def getNumPlotObjects(self) -> int: ...
    def getObjectFlags(self, arg0: str) -> int: ...
    def getPlotObjectDesignations(self) -> List[str]: ...
    def getPlotObjectIndex(self, arg0: List[List[float]]) -> int: ...
    def getPlotObjectLabel(self, arg0: int) -> str: ...
    def getPlotObjectStyle(self, arg0: int) -> str: ...
    def getProcessor(self) -> Any: ...
    @overload
    def getResultsTable(self) -> Any: ...
    @overload
    def getResultsTable(self, arg0: bool) -> Any: ...
    def getResultsTableWithLabels(self) -> Any: ...
    def getSize(self) -> Any: ...
    def getStack(self) -> Any: ...
    def getStats(self) -> Any: ...
    def getTitle(self) -> str: ...
    def getTypes(self) -> List[str]: ...
    def getXValues(self) -> List[float]: ...
    def getYValues(self) -> List[float]: ...
    def isFrozen(self) -> bool: ...
    def isUsingCumulativeFrequencies(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def killPlotObjectsSnapshot(self) -> None: ...
    def killPlotPropertiesSnapshot(self) -> None: ...
    def makeHighResolution(self, arg0: str, arg1: float, arg2: bool, arg3: bool) -> Any: ...
    @overload
    def markPoint(self, arg0: Any, arg1: int, arg2: int) -> None: ...
    @overload
    def markPoint(self, arg0: Any, arg1: Any) -> None: ...
    @overload
    def rebuild(self, arg0: Any) -> None: ...
    @overload
    def rebuild(self) -> None: ...
    def redrawGrid(self) -> None: ...
    def removeNaNs(self) -> None: ...
    def replace(self, arg0: int, arg1: str, arg2: List[float], arg3: List[float]) -> None: ...
    def restorePlotObjects(self) -> None: ...
    def restorePlotProperties(self) -> None: ...
    @overload
    def save(self, arg0: Any) -> bool: ...
    @overload
    def save(self, arg0: str) -> bool: ...
    def savePlotObjects(self) -> None: ...
    def savePlotPlotProperties(self) -> None: ...
    def scaleXtoPxl(self, arg0: float) -> float: ...
    def scaleYtoPxl(self, arg0: float) -> float: ...
    def setAntialiasedText(self, arg0: bool) -> None: ...
    def setAxes(self, arg0: bool, arg1: bool, arg2: bool, arg3: bool, arg4: bool, arg5: bool, arg6: int, arg7: int) -> None: ...
    def setAxisLabelFont(self, arg0: int, arg1: float) -> None: ...
    def setAxisXLog(self, arg0: bool) -> None: ...
    def setAxisYLog(self, arg0: bool) -> None: ...
    @overload
    def setBackgroundColor(self, arg0: str) -> None: ...
    @overload
    def setBackgroundColor(self, arg0: Any) -> None: ...
    @overload
    def setColor(self, arg0: str) -> None: ...
    @overload
    def setColor(self, arg0: Any) -> None: ...
    @overload
    def setColor(self, arg0: str, arg1: str) -> None: ...
    @overload
    def setColor(self, arg0: Any, arg1: Any) -> None: ...
    @overload
    def setFont(self, arg0: int, arg1: float) -> None: ...
    @overload
    def setFont(self, arg0: str, arg1: Any) -> None: ...
    @overload
    def setFont(self, arg0: Any) -> None: ...
    def setFontSize(self, arg0: int) -> None: ...
    def setFormatFlags(self, arg0: int) -> None: ...
    def setFrameSize(self, arg0: int, arg1: int) -> None: ...
    def setFrozen(self, arg0: bool) -> None: ...
    def setImagePlus(self, arg0: Any) -> None: ...
    def setJustification(self, arg0: int) -> None: ...
    def setLabel(self, arg0: int, arg1: str) -> None: ...
    def setLegend(self, arg0: str, arg1: int) -> None: ...
    @overload
    def setLimits(self, arg0: List[float]) -> None: ...
    @overload
    def setLimits(self, arg0: float, arg1: float, arg2: float, arg3: float) -> None: ...
    def setLimitsToDefaults(self, arg0: bool) -> None: ...
    def setLimitsToFit(self, arg0: bool) -> None: ...
    @overload
    def setLineWidth(self, arg0: int) -> None: ...
    @overload
    def setLineWidth(self, arg0: float) -> None: ...
    def setLogScaleX(self) -> None: ...
    def setLogScaleY(self) -> None: ...
    def setMaxIntervals(self, arg0: int) -> None: ...
    def setMinorTickLength(self, arg0: int) -> None: ...
    def setOptions(self, arg0: str) -> None: ...
    def setPlotMaker(self, arg0: Any) -> None: ...
    def setPlotObjectLabel(self, arg0: int, arg1: str) -> None: ...
    def setPlotObjectStyle(self, arg0: int, arg1: str) -> None: ...
    def setPreviousMinMax(self) -> None: ...
    def setScale(self, arg0: float) -> None: ...
    def setSize(self, arg0: int, arg1: int) -> None: ...
    def setStyle(self, arg0: int, arg1: str) -> None: ...
    def setTickLength(self, arg0: int) -> None: ...
    def setWindowSize(self, arg0: int, arg1: int) -> None: ...
    def setXLabelFont(self, arg0: Any) -> None: ...
    def setXMinorTicks(self, arg0: bool) -> None: ...
    def setXTicks(self, arg0: bool) -> None: ...
    def setXYLabels(self, arg0: str, arg1: str) -> None: ...
    def setYLabelFont(self, arg0: Any) -> None: ...
    def setYMinorTicks(self, arg0: bool) -> None: ...
    def setYTicks(self, arg0: bool) -> None: ...
    @overload
    @staticmethod
    def show(arg0: List[Any], arg1: str) -> None: ...
    @overload
    def show(self) -> Any: ...
    def toByteArray(self) -> List[int]: ...
    @staticmethod
    def toShape(arg0: str) -> int: ...
    def update(self) -> None: ...
    def updateImage(self) -> None: ...
    @overload
    def useTemplate(self, arg0: Any) -> None: ...
    @overload
    def useTemplate(self, arg0: Any, arg1: int) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class ShollTable:
    """
    SNT ShollTable class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: List[Any]) -> None: ...
    @overload
    def __init__(self, arg0: Any) -> None: ...

    # Methods
    @overload
    def add(self, arg0: Any) -> bool: ...
    @overload
    def add(self, arg0: int, arg1: Any) -> None: ...
    @overload
    def add(self, arg0: int, arg1: Any) -> None: ...
    @overload
    def add(self, arg0: Any) -> bool: ...
    @overload
    def addAll(self, arg0: int, arg1: List[Any]) -> bool: ...
    @overload
    def addAll(self, arg0: List[Any]) -> bool: ...
    @overload
    def addColumn(self, arg0: str, arg1: List[Any]) -> None: ...
    @overload
    def addColumn(self, arg0: str, arg1: List[float]) -> None: ...
    def addFirst(self, arg0: Any) -> None: ...
    def addGenericColumn(self, arg0: str, arg1: List[Any]) -> None: ...
    def addLast(self, arg0: Any) -> None: ...
    @overload
    def appendColumn(self) -> Any: ...
    @overload
    def appendColumn(self, arg0: str) -> Any: ...
    @overload
    def appendColumns(self, arg0: List[str]) -> List[Any]: ...
    @overload
    def appendColumns(self, arg0: int) -> List[Any]: ...
    @overload
    def appendRow(self) -> None: ...
    @overload
    def appendRow(self, arg0: str) -> None: ...
    @overload
    def appendRows(self, arg0: List[str]) -> None: ...
    @overload
    def appendRows(self, arg0: int) -> None: ...
    def appendToLastRow(self, arg0: str, arg1: Any) -> None: ...
    def clear(self) -> None: ...
    def clone(self) -> Any: ...
    def contains(self, arg0: Any) -> bool: ...
    def containsAll(self, arg0: List[Any]) -> bool: ...
    def createOrUpdateDisplay(self) -> None: ...
    def ensureCapacity(self, arg0: int) -> None: ...
    def fillEmptyCells(self, arg0: Any) -> None: ...
    def forEach(self, arg0: Any) -> None: ...
    @overload
    @staticmethod
    def fromFile(arg0: str, arg1: str) -> Any: ...
    @overload
    @staticmethod
    def fromFile(arg0: str) -> Any: ...
    @overload
    def geColumnHeaders(self) -> List[Any]: ...
    @overload
    def geColumnHeaders(self, arg0: str) -> List[Any]: ...
    @overload
    def geColumnStats(self, arg0: int, arg1: int, arg2: int) -> Any: ...
    @overload
    def geColumnStats(self, arg0: str, arg1: int, arg2: int) -> Any: ...
    @overload
    def geRowStats(self, arg0: str, arg1: int, arg2: int) -> Any: ...
    @overload
    def geRowStats(self, arg0: int, arg1: int, arg2: int) -> Any: ...
    @overload
    def get(self, arg0: int) -> Any: ...
    @overload
    def get(self, arg0: int) -> Any: ...
    @overload
    def get(self, arg0: str, arg1: int) -> Any: ...
    @overload
    def get(self, arg0: str) -> Any: ...
    @overload
    def get(self, arg0: int, arg1: int) -> Any: ...
    def getColumnCount(self) -> int: ...
    def getColumnHeader(self, arg0: int) -> str: ...
    def getColumnIndex(self, arg0: str) -> int: ...
    def getFirst(self) -> Any: ...
    def getLast(self) -> Any: ...
    def getRowCount(self) -> int: ...
    def getRowHeader(self, arg0: int) -> str: ...
    def getRowIndex(self, arg0: str) -> int: ...
    def getSummaryRow(self) -> int: ...
    def getTitle(self) -> str: ...
    def hasContext(self) -> bool: ...
    def hasUnsavedData(self) -> bool: ...
    def indexOf(self, arg0: Any) -> int: ...
    @overload
    def insertColumn(self, arg0: int) -> Any: ...
    @overload
    def insertColumn(self, arg0: int, arg1: str) -> Any: ...
    @overload
    def insertColumns(self, arg0: int, arg1: int) -> List[Any]: ...
    @overload
    def insertColumns(self, arg0: int, arg1: int) -> List[Any]: ...
    @overload
    def insertColumns(self, arg0: int, arg1: List[str]) -> List[Any]: ...
    @overload
    def insertRow(self, arg0: str) -> int: ...
    @overload
    def insertRow(self, arg0: int) -> None: ...
    @overload
    def insertRow(self, arg0: int, arg1: str) -> None: ...
    @overload
    def insertRows(self, arg0: int, arg1: int) -> None: ...
    @overload
    def insertRows(self, arg0: int, arg1: List[str]) -> None: ...
    def isEmpty(self) -> bool: ...
    def isSummarized(self) -> bool: ...
    def iterator(self) -> Any: ...
    def lastIndexOf(self, arg0: Any) -> int: ...
    @overload
    def listIterator(self, arg0: int) -> Any: ...
    @overload
    def listIterator(self) -> Any: ...
    def listProfileEntries(self) -> None: ...
    def parallelStream(self) -> Any: ...
    @overload
    def remove(self, arg0: int) -> Any: ...
    @overload
    def remove(self, arg0: int) -> Any: ...
    @overload
    def remove(self, arg0: Any) -> bool: ...
    def removeAll(self, arg0: List[Any]) -> bool: ...
    @overload
    def removeColumn(self, arg0: str) -> Any: ...
    @overload
    def removeColumn(self, arg0: int) -> Any: ...
    @overload
    def removeColumns(self, arg0: List[str]) -> List[Any]: ...
    @overload
    def removeColumns(self, arg0: int, arg1: int) -> List[Any]: ...
    def removeFirst(self) -> Any: ...
    def removeIf(self, arg0: Any) -> bool: ...
    def removeLast(self) -> Any: ...
    @overload
    def removeRow(self, arg0: str) -> None: ...
    @overload
    def removeRow(self, arg0: int) -> None: ...
    @overload
    def removeRows(self, arg0: int, arg1: int) -> None: ...
    @overload
    def removeRows(self, arg0: List[str]) -> None: ...
    def removeSummary(self) -> None: ...
    def replace(self, arg0: str, arg1: float, arg2: float) -> None: ...
    def replaceAll(self, arg0: Any) -> None: ...
    def retainAll(self, arg0: List[Any]) -> bool: ...
    @overload
    def reversed(self) -> Any: ...
    @overload
    def reversed(self) -> List[Any]: ...
    @overload
    @staticmethod
    def save(arg0: Any, arg1: str, arg2: bool, arg3: bool, arg4: Any) -> None: ...
    @overload
    def save(self, arg0: str) -> bool: ...
    @overload
    def save(self, arg0: Any) -> None: ...
    def saveSilently(self, arg0: Any) -> bool: ...
    @overload
    def set(self, arg0: str, arg1: int, arg2: Any) -> None: ...
    @overload
    def set(self, arg0: int, arg1: int, arg2: Any) -> None: ...
    @overload
    def set(self, arg0: str, arg1: str, arg2: Any) -> None: ...
    @overload
    def set(self, arg0: int, arg1: Any) -> Any: ...
    @overload
    def set(self, arg0: int, arg1: Any) -> Any: ...
    def setColumnCount(self, arg0: int) -> None: ...
    def setColumnHeader(self, arg0: int, arg1: str) -> None: ...
    def setContext(self, arg0: Any) -> None: ...
    def setDetailedSummary(self, arg0: bool) -> None: ...
    def setDimensions(self, arg0: int, arg1: int) -> None: ...
    def setRowCount(self, arg0: int) -> None: ...
    def setRowHeader(self, arg0: int, arg1: str) -> None: ...
    def setSize(self, arg0: int) -> None: ...
    def setTitle(self, arg0: str) -> None: ...
    @overload
    def show(self) -> None: ...
    @overload
    def show(self, arg0: str) -> None: ...
    def size(self) -> int: ...
    def sort(self, arg0: Any) -> None: ...
    def spliterator(self) -> Any: ...
    def stream(self) -> Any: ...
    def subList(self, arg0: int, arg1: int) -> List[Any]: ...
    @overload
    def summarize(self, arg0: str) -> None: ...
    @overload
    def summarize(self, arg0: Any, arg1: str) -> None: ...
    @overload
    def summarize(self) -> None: ...
    @overload
    def toArray(self) -> List[Any]: ...
    @overload
    def toArray(self, arg0: List[Any]) -> List[Any]: ...
    @overload
    def toArray(self, arg0: Any) -> List[Any]: ...
    def trimToSize(self) -> None: ...
    def updateDisplay(self) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class ShollOverlay:
    """
    SNT ShollOverlay class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any, arg2: bool) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any) -> None: ...

    # Fields
    COUNT: str
    RADIUS: str
    PROP: str
    SHELL: str
    POINTS: str
    KEY_ID: str
    KEY_2D3D: str
    KEY_SOURCE: str
    KEY_HEMISHELLS: str
    KEY_NSAMPLES: str
    KEY_NSAMPLES_INTG: str
    KEY_CALIBRATION: str
    KEY_CENTER: str
    KEY_CHANNEL_POS: str
    KEY_SLICE_POS: str
    KEY_FRAME_POS: str
    KEY_THRESHOLD_RANGE: str
    KEY_EFFECTIVE_STEP_SIZE: str
    KEY_EXTRA_MEASUREMENT: str
    SRC_TABLE: str
    SRC_TRACES: str
    SRC_IMG: str
    HEMI_NONE: str
    HEMI_NORTH: str
    HEMI_SOUTH: str
    HEMI_WEST: str
    HEMI_EAST: str
    INTG_MEAN: str
    INTG_MEDIAN: str
    INTG_MODE: str
    UNSET: str

    # Methods
    def addCenter(self) -> None: ...
    def assignProperty(self, arg0: str) -> None: ...
    def getLUTs(self) -> Set[Any]: ...
    def getOverlay(self) -> Any: ...
    @staticmethod
    def remove(arg0: Any, arg1: str) -> None: ...
    def removePoints(self) -> None: ...
    @overload
    def removeShells(self) -> None: ...
    @overload
    @staticmethod
    def removeShells(arg0: Any) -> None: ...
    @staticmethod
    def removeShollROIs(arg0: Any) -> None: ...
    @overload
    def setAlternateShells(self) -> None: ...
    @overload
    def setAlternateShells(self, arg0: Any, arg1: Any) -> None: ...
    def setBaseColor(self, arg0: Any) -> None: ...
    def setGradientShells(self, arg0: Any, arg1: Any) -> None: ...
    def setPointsColor(self, arg0: Any) -> None: ...
    @overload
    def setPointsLUT(self, arg0: str, arg1: str) -> None: ...
    @overload
    def setPointsLUT(self, arg0: str) -> None: ...
    @overload
    def setPointsLUT(self, arg0: Any, arg1: str) -> None: ...
    def setPointsOpacity(self, arg0: float) -> None: ...
    def setPointsSize(self, arg0: str) -> None: ...
    def setShellsColor(self, arg0: Any) -> None: ...
    @overload
    def setShellsLUT(self, arg0: Any, arg1: str) -> None: ...
    @overload
    def setShellsLUT(self, arg0: str) -> None: ...
    @overload
    def setShellsLUT(self, arg0: str, arg1: str) -> None: ...
    def setShellsOpacity(self, arg0: float) -> None: ...
    def setShellsThickness(self, arg0: int) -> None: ...
    def updateDisplay(self) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class ShollWidget:
    """
    SNT ShollWidget class.
    
    This class provides access to the Java ShollWidget functionality.
    All methods and properties are dynamically resolved at runtime.
    """
    
    def __init__(self, *args: Any, **kwargs: Any) -> None:
        """Initialize the ShollWidget."""
        ...
    
    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for Java methods and fields."""
        ...
    
    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable if it has a default method."""
        ...

def _java_setup() -> Any: ...
def _discover_extended_classes() -> Any: ...
def get_available_classes() -> List[str]: ...
def get_class(class_name: str) -> Any: ...
def list_classes() -> Any: ...
def get_curated_classes() -> List[str]: ...
def get_extended_classes() -> List[str]: ...
def __getattr__(name: str) -> Any: ...
def __dir__() -> List[str]: ...

# Other functions
def __dir__(*args: Any, **kwargs: Any) -> Any: ...
def __getattr__(*args: Any, **kwargs: Any) -> Any: ...
def _discover_extended_classes(*args: Any, **kwargs: Any) -> Any: ...
def _java_setup(*args: Any, **kwargs: Any) -> Any: ...
def get_available_classes() -> Any: ...
def get_class() -> Any: ...
def get_curated_classes() -> Any: ...
def get_extended_classes() -> Any: ...
def list_classes() -> List[str]: ...

# Imported classes
class Any: ...
class Dict: ...
class List: ...

# Constants
CURATED_CLASSES: List[str]
EXTENDED_CLASSES: List[str]