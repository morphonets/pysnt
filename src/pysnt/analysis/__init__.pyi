"""Comprehensive type stubs for Java classes."""

from typing import Any, List, Dict, Optional, Union, overload, Set, Callable

class ConvexHull2D:
    """
    SNT ConvexHull2D class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: List[Any]) -> None: ...
    @overload
    def __init__(self, arg0: List[Any]) -> None: ...

    # Methods
    def boundarySize(self) -> float: ...
    def compute(self) -> None: ...
    def getPolygon(self) -> Any: ...
    @overload
    def intersection(self, arg0: List[Any]) -> Any: ...
    @overload
    def intersection(self, arg0: List[Any]) -> Any: ...
    def intersectionBox(self, arg0: List[Any]) -> Any: ...
    @staticmethod
    def main(arg0: List[str]) -> None: ...
    def size(self) -> float: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class ConvexHull3D:
    """
    SNT ConvexHull3D class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: List[Any]) -> None: ...
    @overload
    def __init__(self, arg0: List[Any]) -> None: ...

    # Methods
    def boundarySize(self) -> float: ...
    def compute(self) -> None: ...
    def getMesh(self) -> Any: ...
    @overload
    def intersection(self, arg0: List[Any]) -> Any: ...
    @overload
    def intersection(self, arg0: List[Any]) -> Any: ...
    def intersectionBox(self, arg0: List[Any]) -> Any: ...
    @staticmethod
    def main(arg0: List[str]) -> None: ...
    def size(self) -> float: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class TreeStatistics:
    """
    SNT TreeStatistics class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Any) -> None: ...
    @overload
    def __init__(self, arg0: List[Any], arg1: str) -> None: ...

    # Fields
    BRANCH_EXTENSION_ANGLE: str
    BRANCH_EXTENSION_ANGLE_REL: str
    BRANCH_EXTENSION_ANGLE_XY: str
    BRANCH_EXTENSION_ANGLE_XZ: str
    BRANCH_EXTENSION_ANGLE_ZY: str
    INNER_EXTENSION_ANGLE: str
    INNER_EXTENSION_ANGLE_REL: str
    INNER_EXTENSION_ANGLE_XY: str
    INNER_EXTENSION_ANGLE_XZ: str
    INNER_EXTENSION_ANGLE_ZY: str
    PRIMARY_EXTENSION_ANGLE: str
    PRIMARY_EXTENSION_ANGLE_XY: str
    PRIMARY_EXTENSION_ANGLE_XZ: str
    PRIMARY_EXTENSION_ANGLE_ZY: str
    TERMINAL_EXTENSION_ANGLE: str
    TERMINAL_EXTENSION_ANGLE_REL: str
    TERMINAL_EXTENSION_ANGLE_XY: str
    TERMINAL_EXTENSION_ANGLE_XZ: str
    TERMINAL_EXTENSION_ANGLE_ZY: str
    REMOTE_BIF_ANGLES: str
    PATH_LENGTH: str
    PATH_EXT_ANGLE: str
    PATH_EXT_ANGLE_REL: str
    PATH_EXT_ANGLE_XY: str
    PATH_EXT_ANGLE_XZ: str
    PATH_EXT_ANGLE_ZY: str
    PATH_ORDER: str
    PATH_CHANNEL: str
    PATH_FRAME: str
    PATH_MEAN_RADIUS: str
    PATH_SPINE_DENSITY: str
    PATH_CONTRACTION: str
    PATH_FRACTAL_DIMENSION: str
    BRANCH_LENGTH: str
    BRANCH_MEAN_RADIUS: str
    TERMINAL_LENGTH: str
    PRIMARY_LENGTH: str
    INNER_LENGTH: str
    BRANCH_CONTRACTION: str
    BRANCH_FRACTAL_DIMENSION: str
    NODE_RADIUS: str
    INTER_NODE_ANGLE: str
    INTER_NODE_DISTANCE: str
    INTER_NODE_DISTANCE_SQUARED: str
    N_BRANCH_POINTS: str
    N_NODES: str
    N_PATH_NODES: str
    N_BRANCH_NODES: str
    N_PATHS: str
    N_SPINES: str
    N_BRANCHES: str
    N_PRIMARY_BRANCHES: str
    N_INNER_BRANCHES: str
    N_TERMINAL_BRANCHES: str
    N_TIPS: str
    N_FITTED_PATHS: str
    PATH_N_SPINES: str
    LENGTH: str
    COMPLEXITY_INDEX_ACI: str
    COMPLEXITY_INDEX_DCI: str
    X_COORDINATES: str
    Y_COORDINATES: str
    Z_COORDINATES: str
    WIDTH: str
    HEIGHT: str
    DEPTH: str
    PARTITION_ASYMMETRY: str
    GRAPH_DIAMETER: str
    GRAPH_DIAMETER_ANGLE: str
    GRAPH_DIAMETER_ANGLE_XY: str
    GRAPH_DIAMETER_ANGLE_XZ: str
    GRAPH_DIAMETER_ANGLE_ZY: str
    VOLUME: str
    BRANCH_VOLUME: str
    PATH_VOLUME: str
    SURFACE_AREA: str
    BRANCH_SURFACE_AREA: str
    PATH_SURFACE_AREA: str
    STRAHLER_NUMBER: str
    STRAHLER_RATIO: str
    SHOLL_MEAN_VALUE: str
    SHOLL_SUM_VALUE: str
    SHOLL_MAX_VALUE: str
    SHOLL_N_MAX: str
    SHOLL_N_SECONDARY_MAX: str
    SHOLL_DECAY: str
    SHOLL_MAX_FITTED: str
    SHOLL_MAX_FITTED_RADIUS: str
    SHOLL_POLY_FIT_DEGREE: str
    SHOLL_KURTOSIS: str
    SHOLL_SKEWNESS: str
    SHOLL_RAMIFICATION_INDEX: str
    CONVEX_HULL_BOUNDARY_SIZE: str
    CONVEX_HULL_SIZE: str
    CONVEX_HULL_BOXIVITY: str
    CONVEX_HULL_ELONGATION: str
    CONVEX_HULL_ROUNDNESS: str
    CONVEX_HULL_CENTROID_ROOT_DISTANCE: str
    CONVEX_HULL_COMPACTNESS_3D: str
    CONVEX_HULL_ECCENTRICITY_2D: str
    ROOT_ANGLE_B_FACTOR: str
    ROOT_ANGLE_C_BIAS: str
    ROOT_ANGLE_M_DIRECTION: str
    VALUES: str
    CONTRACTION: str
    MEAN_RADIUS: str
    AVG_SPINE_DENSITY: str
    FRACTAL_DIMENSION: str

    # Methods
    def cancel(self, arg0: str) -> None: ...
    def context(self) -> Any: ...
    def dispose(self) -> None: ...
    @staticmethod
    def fromCollection(arg0: List[Any], arg1: str) -> Any: ...
    @staticmethod
    def getAllMetrics() -> List[Any]: ...
    @overload
    def getAnnotatedLength(self, arg0: int) -> Dict[str, Any]: ...
    @overload
    def getAnnotatedLength(self, arg0: int, arg1: str, arg2: bool) -> Dict[str, Any]: ...
    @overload
    def getAnnotatedLength(self, arg0: int, arg1: str) -> Dict[str, Any]: ...
    @overload
    def getAnnotatedLengthHistogram(self) -> Any: ...
    @overload
    def getAnnotatedLengthHistogram(self, arg0: int) -> Any: ...
    @overload
    def getAnnotatedLengthHistogram(self, arg0: int, arg1: str) -> Any: ...
    def getAnnotatedLengthsByHemisphere(self, arg0: int) -> Dict[str, Any]: ...
    @overload
    def getAnnotations(self) -> Set[Any]: ...
    @overload
    def getAnnotations(self, arg0: int) -> Set[Any]: ...
    def getAvgBranchLength(self) -> float: ...
    def getAvgContraction(self) -> float: ...
    def getAvgFractalDimension(self) -> float: ...
    def getAvgFragmentation(self) -> float: ...
    def getAvgPartitionAsymmetry(self) -> float: ...
    def getAvgRemoteBifAngle(self) -> float: ...
    @overload
    def getBranchPoints(self, arg0: Any) -> Set[Any]: ...
    @overload
    def getBranchPoints(self, arg0: Any, arg1: bool) -> Set[Any]: ...
    @overload
    def getBranchPoints(self) -> Set[Any]: ...
    def getBranches(self) -> List[Any]: ...
    @overload
    def getCableLength(self, arg0: Any) -> float: ...
    @overload
    def getCableLength(self, arg0: Any, arg1: bool) -> float: ...
    @overload
    def getCableLength(self) -> float: ...
    @overload
    def getCableLengthNorm(self, arg0: Any, arg1: bool) -> float: ...
    @overload
    def getCableLengthNorm(self, arg0: Any) -> float: ...
    def getCancelReason(self) -> str: ...
    def getContext(self) -> Any: ...
    def getConvexAnalyzer(self) -> Any: ...
    def getConvexHullMetric(self, arg0: str) -> float: ...
    def getDepth(self) -> float: ...
    def getDescriptiveStats(self, arg0: str) -> Any: ...
    @overload
    def getFlowPlot(self, arg0: str, arg1: int) -> Any: ...
    @overload
    def getFlowPlot(self, arg0: str, arg1: List[Any], arg2: str, arg3: float, arg4: bool) -> Any: ...
    @overload
    def getFlowPlot(self, arg0: str, arg1: List[Any], arg2: bool) -> Any: ...
    @overload
    def getFlowPlot(self, arg0: str, arg1: List[Any]) -> Any: ...
    @overload
    def getFlowPlot(self, arg0: str, arg1: int, arg2: float, arg3: bool) -> Any: ...
    def getFractalDimension(self) -> List[Any]: ...
    def getHeight(self) -> float: ...
    def getHighestPathOrder(self) -> int: ...
    def getHistogram(self, arg0: str) -> Any: ...
    def getInnerBranches(self) -> List[Any]: ...
    def getInnerLength(self) -> float: ...
    def getMetric(self, arg0: str) -> Any: ...
    @overload
    @staticmethod
    def getMetrics(arg0: str) -> List[Any]: ...
    @overload
    @staticmethod
    def getMetrics() -> List[Any]: ...
    @overload
    def getNBranchPoints(self, arg0: Any) -> int: ...
    @overload
    def getNBranchPoints(self, arg0: Any, arg1: bool) -> int: ...
    @overload
    def getNBranchPointsNorm(self, arg0: Any) -> float: ...
    @overload
    def getNBranchPointsNorm(self, arg0: Any, arg1: bool) -> float: ...
    def getNBranches(self) -> int: ...
    def getNNodes(self) -> int: ...
    def getNPaths(self) -> int: ...
    @overload
    def getNTips(self, arg0: Any, arg1: bool) -> int: ...
    @overload
    def getNTips(self, arg0: Any) -> int: ...
    @overload
    def getNTipsNorm(self, arg0: Any, arg1: bool) -> float: ...
    @overload
    def getNTipsNorm(self, arg0: Any) -> float: ...
    def getNoSpinesOrVaricosities(self) -> int: ...
    @overload
    def getNodeStatistics(self) -> Any: ...
    @overload
    def getNodeStatistics(self, arg0: str) -> Any: ...
    def getParsedTree(self) -> Any: ...
    def getPartitionAsymmetry(self) -> List[Any]: ...
    def getPolarHistogram(self, arg0: str) -> Any: ...
    def getPrimaryBranches(self) -> List[Any]: ...
    def getPrimaryLength(self) -> float: ...
    def getPrimaryPaths(self) -> List[Any]: ...
    def getRemoteBifAngles(self) -> List[Any]: ...
    def getRootAngleAnalyzer(self) -> Any: ...
    def getRootAngleMetric(self, arg0: str) -> float: ...
    def getShollAnalyzer(self) -> Any: ...
    def getSpineOrVaricosityDensity(self) -> float: ...
    def getStrahlerAnalyzer(self) -> Any: ...
    def getStrahlerBifurcationRatio(self) -> float: ...
    def getStrahlerNumber(self) -> int: ...
    def getSummaryStats(self, arg0: str) -> Any: ...
    def getTable(self) -> Any: ...
    def getTerminalBranches(self) -> List[Any]: ...
    def getTerminalLength(self) -> float: ...
    @overload
    def getTips(self) -> Set[Any]: ...
    @overload
    def getTips(self, arg0: Any) -> Set[Any]: ...
    @overload
    def getTips(self, arg0: float, arg1: float) -> Set[Any]: ...
    @overload
    def getTips(self, arg0: float) -> Set[Any]: ...
    @overload
    def getTips(self, arg0: Any, arg1: bool) -> Set[Any]: ...
    def getUnit(self, arg0: str) -> str: ...
    def getWidth(self) -> float: ...
    def isCanceled(self) -> bool: ...
    @staticmethod
    def isExactMetricMatch() -> bool: ...
    def isValid(self) -> bool: ...
    @staticmethod
    def main(arg0: List[str]) -> None: ...
    @overload
    def measure(self, arg0: str, arg1: List[Any], arg2: bool) -> None: ...
    @overload
    def measure(self, arg0: List[Any], arg1: bool) -> None: ...
    def resetRestrictions(self) -> None: ...
    def restrictToSWCType(self, arg0: List[int]) -> None: ...
    def run(self) -> None: ...
    def setContext(self, arg0: Any) -> None: ...
    @staticmethod
    def setExactMetricMatch(arg0: bool) -> None: ...
    @overload
    def setTable(self, arg0: Any) -> None: ...
    @overload
    def setTable(self, arg0: Any, arg1: str) -> None: ...
    @overload
    def summarize(self, arg0: bool) -> None: ...
    @overload
    def summarize(self, arg0: str, arg1: bool) -> None: ...
    def updateAndDisplayTable(self) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class MultiTreeStatistics:
    """
    SNT MultiTreeStatistics class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: List[Any]) -> None: ...
    @overload
    def __init__(self, arg0: List[Any], arg1: List[str]) -> None: ...

    # Fields
    TERMINAL_LENGTH: str
    INNER_LENGTH: str
    PRIMARY_LENGTH: str
    AVG_BRANCH_LENGTH: str
    ASSIGNED_VALUE: str
    HIGHEST_PATH_ORDER: str
    AVG_CONTRACTION: str
    AVG_FRAGMENTATION: str
    AVG_REMOTE_ANGLE: str
    AVG_PARTITION_ASYMMETRY: str
    AVG_FRACTAL_DIMENSION: str
    MEAN_RADIUS: str
    BRANCH_EXTENSION_ANGLE: str
    BRANCH_EXTENSION_ANGLE_REL: str
    BRANCH_EXTENSION_ANGLE_XY: str
    BRANCH_EXTENSION_ANGLE_XZ: str
    BRANCH_EXTENSION_ANGLE_ZY: str
    INNER_EXTENSION_ANGLE: str
    INNER_EXTENSION_ANGLE_REL: str
    INNER_EXTENSION_ANGLE_XY: str
    INNER_EXTENSION_ANGLE_XZ: str
    INNER_EXTENSION_ANGLE_ZY: str
    PRIMARY_EXTENSION_ANGLE: str
    PRIMARY_EXTENSION_ANGLE_XY: str
    PRIMARY_EXTENSION_ANGLE_XZ: str
    PRIMARY_EXTENSION_ANGLE_ZY: str
    TERMINAL_EXTENSION_ANGLE: str
    TERMINAL_EXTENSION_ANGLE_REL: str
    TERMINAL_EXTENSION_ANGLE_XY: str
    TERMINAL_EXTENSION_ANGLE_XZ: str
    TERMINAL_EXTENSION_ANGLE_ZY: str
    REMOTE_BIF_ANGLES: str
    PATH_LENGTH: str
    PATH_EXT_ANGLE: str
    PATH_EXT_ANGLE_REL: str
    PATH_EXT_ANGLE_XY: str
    PATH_EXT_ANGLE_XZ: str
    PATH_EXT_ANGLE_ZY: str
    PATH_ORDER: str
    PATH_CHANNEL: str
    PATH_FRAME: str
    PATH_MEAN_RADIUS: str
    PATH_SPINE_DENSITY: str
    PATH_CONTRACTION: str
    PATH_FRACTAL_DIMENSION: str
    BRANCH_LENGTH: str
    BRANCH_MEAN_RADIUS: str
    TERMINAL_LENGTH: str
    PRIMARY_LENGTH: str
    INNER_LENGTH: str
    BRANCH_CONTRACTION: str
    BRANCH_FRACTAL_DIMENSION: str
    NODE_RADIUS: str
    INTER_NODE_ANGLE: str
    INTER_NODE_DISTANCE: str
    INTER_NODE_DISTANCE_SQUARED: str
    N_BRANCH_POINTS: str
    N_NODES: str
    N_PATH_NODES: str
    N_BRANCH_NODES: str
    N_PATHS: str
    N_SPINES: str
    N_BRANCHES: str
    N_PRIMARY_BRANCHES: str
    N_INNER_BRANCHES: str
    N_TERMINAL_BRANCHES: str
    N_TIPS: str
    N_FITTED_PATHS: str
    PATH_N_SPINES: str
    LENGTH: str
    COMPLEXITY_INDEX_ACI: str
    COMPLEXITY_INDEX_DCI: str
    X_COORDINATES: str
    Y_COORDINATES: str
    Z_COORDINATES: str
    WIDTH: str
    HEIGHT: str
    DEPTH: str
    PARTITION_ASYMMETRY: str
    GRAPH_DIAMETER: str
    GRAPH_DIAMETER_ANGLE: str
    GRAPH_DIAMETER_ANGLE_XY: str
    GRAPH_DIAMETER_ANGLE_XZ: str
    GRAPH_DIAMETER_ANGLE_ZY: str
    VOLUME: str
    BRANCH_VOLUME: str
    PATH_VOLUME: str
    SURFACE_AREA: str
    BRANCH_SURFACE_AREA: str
    PATH_SURFACE_AREA: str
    STRAHLER_NUMBER: str
    STRAHLER_RATIO: str
    SHOLL_MEAN_VALUE: str
    SHOLL_SUM_VALUE: str
    SHOLL_MAX_VALUE: str
    SHOLL_N_MAX: str
    SHOLL_N_SECONDARY_MAX: str
    SHOLL_DECAY: str
    SHOLL_MAX_FITTED: str
    SHOLL_MAX_FITTED_RADIUS: str
    SHOLL_POLY_FIT_DEGREE: str
    SHOLL_KURTOSIS: str
    SHOLL_SKEWNESS: str
    SHOLL_RAMIFICATION_INDEX: str
    CONVEX_HULL_BOUNDARY_SIZE: str
    CONVEX_HULL_SIZE: str
    CONVEX_HULL_BOXIVITY: str
    CONVEX_HULL_ELONGATION: str
    CONVEX_HULL_ROUNDNESS: str
    CONVEX_HULL_CENTROID_ROOT_DISTANCE: str
    CONVEX_HULL_COMPACTNESS_3D: str
    CONVEX_HULL_ECCENTRICITY_2D: str
    ROOT_ANGLE_B_FACTOR: str
    ROOT_ANGLE_C_BIAS: str
    ROOT_ANGLE_M_DIRECTION: str
    VALUES: str
    CONTRACTION: str
    MEAN_RADIUS: str
    AVG_SPINE_DENSITY: str
    FRACTAL_DIMENSION: str

    # Methods
    def cancel(self, arg0: str) -> None: ...
    def context(self) -> Any: ...
    def dispose(self) -> None: ...
    @staticmethod
    def fromCollection(arg0: List[Any], arg1: str) -> Any: ...
    @staticmethod
    def getAllMetrics() -> List[Any]: ...
    @overload
    def getAnnotatedLength(self, arg0: int) -> Dict[str, Any]: ...
    @overload
    def getAnnotatedLength(self, arg0: int, arg1: str) -> Dict[str, Any]: ...
    @overload
    def getAnnotatedLength(self, arg0: int, arg1: str, arg2: bool) -> Dict[str, Any]: ...
    @overload
    def getAnnotatedLengthHistogram(self) -> Any: ...
    @overload
    def getAnnotatedLengthHistogram(self, arg0: int) -> Any: ...
    @overload
    def getAnnotatedLengthHistogram(self, arg0: int, arg1: str) -> Any: ...
    def getAnnotatedLengthsByHemisphere(self, arg0: int) -> Dict[str, Any]: ...
    @overload
    def getAnnotations(self, arg0: int) -> Set[Any]: ...
    @overload
    def getAnnotations(self) -> Set[Any]: ...
    def getAvgBranchLength(self) -> float: ...
    def getAvgContraction(self) -> float: ...
    def getAvgFractalDimension(self) -> float: ...
    def getAvgFragmentation(self) -> float: ...
    def getAvgPartitionAsymmetry(self) -> float: ...
    def getAvgRemoteBifAngle(self) -> float: ...
    @overload
    def getBranchPoints(self) -> Set[Any]: ...
    @overload
    def getBranchPoints(self, arg0: Any) -> Set[Any]: ...
    @overload
    def getBranchPoints(self, arg0: Any, arg1: bool) -> Set[Any]: ...
    def getBranches(self) -> List[Any]: ...
    @overload
    def getCableLength(self, arg0: Any) -> float: ...
    @overload
    def getCableLength(self, arg0: Any, arg1: bool) -> float: ...
    @overload
    def getCableLength(self) -> float: ...
    @overload
    def getCableLengthNorm(self, arg0: Any, arg1: bool) -> float: ...
    @overload
    def getCableLengthNorm(self, arg0: Any) -> float: ...
    def getCancelReason(self) -> str: ...
    def getContext(self) -> Any: ...
    def getConvexAnalyzer(self) -> Any: ...
    def getConvexHullMetric(self, arg0: str) -> float: ...
    def getDepth(self) -> float: ...
    def getDescriptiveStats(self, arg0: str) -> Any: ...
    @overload
    def getFlowPlot(self, arg0: str, arg1: int, arg2: float, arg3: bool) -> Any: ...
    @overload
    def getFlowPlot(self, arg0: str, arg1: List[Any]) -> Any: ...
    @overload
    def getFlowPlot(self, arg0: str, arg1: List[Any], arg2: str, arg3: float, arg4: bool) -> Any: ...
    @overload
    def getFlowPlot(self, arg0: str, arg1: int) -> Any: ...
    @overload
    def getFlowPlot(self, arg0: str, arg1: List[Any], arg2: bool) -> Any: ...
    def getFractalDimension(self) -> List[Any]: ...
    def getGroup(self) -> List[Any]: ...
    def getHeight(self) -> float: ...
    def getHighestPathOrder(self) -> int: ...
    def getHistogram(self, arg0: str) -> Any: ...
    def getInnerBranches(self) -> List[Any]: ...
    def getInnerLength(self) -> float: ...
    def getMetric(self, arg0: str) -> Any: ...
    @overload
    @staticmethod
    def getMetrics() -> List[Any]: ...
    @overload
    @staticmethod
    def getMetrics(arg0: str) -> List[Any]: ...
    @overload
    def getNBranchPoints(self, arg0: Any) -> int: ...
    @overload
    def getNBranchPoints(self, arg0: Any, arg1: bool) -> int: ...
    @overload
    def getNBranchPointsNorm(self, arg0: Any) -> float: ...
    @overload
    def getNBranchPointsNorm(self, arg0: Any, arg1: bool) -> float: ...
    def getNBranches(self) -> int: ...
    def getNNodes(self) -> int: ...
    def getNPaths(self) -> int: ...
    @overload
    def getNTips(self, arg0: Any, arg1: bool) -> int: ...
    @overload
    def getNTips(self, arg0: Any) -> int: ...
    @overload
    def getNTipsNorm(self, arg0: Any, arg1: bool) -> float: ...
    @overload
    def getNTipsNorm(self, arg0: Any) -> float: ...
    def getNoSpinesOrVaricosities(self) -> int: ...
    @overload
    def getNodeStatistics(self) -> Any: ...
    @overload
    def getNodeStatistics(self, arg0: str) -> Any: ...
    def getParsedTree(self) -> Any: ...
    def getPartitionAsymmetry(self) -> List[Any]: ...
    def getPolarHistogram(self, arg0: str) -> Any: ...
    def getPrimaryBranches(self) -> List[Any]: ...
    def getPrimaryLength(self) -> float: ...
    def getPrimaryPaths(self) -> List[Any]: ...
    def getRawValues(self, arg0: str) -> Any: ...
    def getRemoteBifAngles(self) -> List[Any]: ...
    def getRootAngleAnalyzer(self) -> Any: ...
    def getRootAngleMetric(self, arg0: str) -> float: ...
    def getShollAnalyzer(self) -> Any: ...
    def getSpineOrVaricosityDensity(self) -> float: ...
    def getStrahlerAnalyzer(self) -> Any: ...
    def getStrahlerBifurcationRatio(self) -> float: ...
    def getStrahlerNumber(self) -> int: ...
    def getSummaryStats(self, arg0: str) -> Any: ...
    def getTable(self) -> Any: ...
    def getTerminalBranches(self) -> List[Any]: ...
    def getTerminalLength(self) -> float: ...
    @overload
    def getTips(self) -> Set[Any]: ...
    @overload
    def getTips(self, arg0: Any) -> Set[Any]: ...
    @overload
    def getTips(self, arg0: float, arg1: float) -> Set[Any]: ...
    @overload
    def getTips(self, arg0: float) -> Set[Any]: ...
    @overload
    def getTips(self, arg0: Any, arg1: bool) -> Set[Any]: ...
    def getUnit(self, arg0: str) -> str: ...
    def getWidth(self) -> float: ...
    def isCanceled(self) -> bool: ...
    @staticmethod
    def isExactMetricMatch() -> bool: ...
    def isValid(self) -> bool: ...
    @staticmethod
    def main(arg0: List[str]) -> None: ...
    @overload
    def measure(self, arg0: str, arg1: List[Any], arg2: bool) -> None: ...
    @overload
    def measure(self, arg0: List[Any], arg1: bool) -> None: ...
    def resetRestrictions(self) -> None: ...
    def restrictToSWCType(self, arg0: List[int]) -> None: ...
    def run(self) -> None: ...
    def setContext(self, arg0: Any) -> None: ...
    @staticmethod
    def setExactMetricMatch(arg0: bool) -> None: ...
    def setLabel(self, arg0: str) -> None: ...
    @overload
    def setTable(self, arg0: Any) -> None: ...
    @overload
    def setTable(self, arg0: Any, arg1: str) -> None: ...
    @overload
    def summarize(self, arg0: bool) -> None: ...
    @overload
    def summarize(self, arg0: str, arg1: bool) -> None: ...
    def updateAndDisplayTable(self) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class SNTChart:
    """
    SNT SNTChart class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: Any) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: Any) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: Any) -> None: ...

    # Fields
    DEFAULT_BUFFER_USED: bool
    DEFAULT_WIDTH: int
    DEFAULT_HEIGHT: int
    DEFAULT_MINIMUM_DRAW_WIDTH: int
    DEFAULT_MINIMUM_DRAW_HEIGHT: int
    DEFAULT_MAXIMUM_DRAW_WIDTH: int
    DEFAULT_MAXIMUM_DRAW_HEIGHT: int
    DEFAULT_ZOOM_TRIGGER_DISTANCE: int
    PROPERTIES_COMMAND: str
    COPY_COMMAND: str
    SAVE_COMMAND: str
    PRINT_COMMAND: str
    ZOOM_IN_BOTH_COMMAND: str
    ZOOM_IN_DOMAIN_COMMAND: str
    ZOOM_IN_RANGE_COMMAND: str
    ZOOM_OUT_BOTH_COMMAND: str
    ZOOM_OUT_DOMAIN_COMMAND: str
    ZOOM_OUT_RANGE_COMMAND: str
    ZOOM_RESET_BOTH_COMMAND: str
    ZOOM_RESET_DOMAIN_COMMAND: str
    ZOOM_RESET_RANGE_COMMAND: str
    PAGE_EXISTS: int
    NO_SUCH_PAGE: int
    WHEN_FOCUSED: int
    WHEN_ANCESTOR_OF_FOCUSED_COMPONENT: int
    WHEN_IN_FOCUSED_WINDOW: int
    UNDEFINED_CONDITION: int
    TOOL_TIP_TEXT_KEY: str
    TOP_ALIGNMENT: float
    CENTER_ALIGNMENT: float
    BOTTOM_ALIGNMENT: float
    LEFT_ALIGNMENT: float
    RIGHT_ALIGNMENT: float
    WIDTH: int
    HEIGHT: int
    PROPERTIES: int
    SOMEBITS: int
    FRAMEBITS: int
    ALLBITS: int
    ERROR: int
    ABORT: int

    # Methods
    def action(self, arg0: Any, arg1: Any) -> bool: ...
    def actionPerformed(self, arg0: Any) -> None: ...
    @overload
    def add(self, arg0: Any, arg1: Any, arg2: int) -> None: ...
    @overload
    def add(self, arg0: Any, arg1: Any) -> None: ...
    @overload
    def add(self, arg0: str, arg1: Any) -> Any: ...
    @overload
    def add(self, arg0: Any, arg1: int) -> Any: ...
    @overload
    def add(self, arg0: Any) -> Any: ...
    @overload
    def add(self, arg0: Any) -> None: ...
    def addAncestorListener(self, arg0: Any) -> None: ...
    def addChartMouseListener(self, arg0: Any) -> None: ...
    def addColorBarLegend(self, arg0: str, arg1: Any, arg2: float, arg3: float, arg4: int) -> None: ...
    def addComponentListener(self, arg0: Any) -> None: ...
    def addContainerListener(self, arg0: Any) -> None: ...
    def addFocusListener(self, arg0: Any) -> None: ...
    def addHierarchyBoundsListener(self, arg0: Any) -> None: ...
    def addHierarchyListener(self, arg0: Any) -> None: ...
    def addInputMethodListener(self, arg0: Any) -> None: ...
    def addKeyListener(self, arg0: Any) -> None: ...
    def addMouseListener(self, arg0: Any) -> None: ...
    def addMouseMotionListener(self, arg0: Any) -> None: ...
    def addMouseWheelListener(self, arg0: Any) -> None: ...
    def addNotify(self) -> None: ...
    def addOverlay(self, arg0: Any) -> None: ...
    @overload
    def addPolygon(self, arg0: Any, arg1: Any, arg2: Any) -> None: ...
    @overload
    def addPolygon(self, arg0: Any, arg1: str, arg2: str) -> None: ...
    @overload
    def addPropertyChangeListener(self, arg0: str, arg1: Any) -> None: ...
    @overload
    def addPropertyChangeListener(self, arg0: Any) -> None: ...
    def addVetoableChangeListener(self, arg0: Any) -> None: ...
    @overload
    def annotate(self, arg0: str, arg1: str, arg2: str) -> None: ...
    @overload
    def annotate(self, arg0: str) -> None: ...
    @overload
    def annotateCategory(self, arg0: str, arg1: str) -> None: ...
    @overload
    def annotateCategory(self, arg0: str, arg1: str, arg2: str) -> None: ...
    @overload
    def annotatePoint(self, arg0: List[float], arg1: str, arg2: str) -> None: ...
    @overload
    def annotatePoint(self, arg0: float, arg1: float, arg2: str) -> None: ...
    @overload
    def annotatePoint(self, arg0: float, arg1: float, arg2: str, arg3: str) -> None: ...
    @overload
    def annotateXline(self, arg0: float, arg1: str) -> None: ...
    @overload
    def annotateXline(self, arg0: float, arg1: str, arg2: str) -> None: ...
    @overload
    def annotateYline(self, arg0: float, arg1: str) -> None: ...
    @overload
    def annotateYline(self, arg0: float, arg1: str, arg2: str) -> None: ...
    def applyComponentOrientation(self, arg0: Any) -> None: ...
    def applyStyle(self, arg0: Any) -> None: ...
    def areFocusTraversalKeysSet(self, arg0: int) -> bool: ...
    def bounds(self) -> Any: ...
    def chartChanged(self, arg0: Any) -> None: ...
    def chartProgress(self, arg0: Any) -> None: ...
    @overload
    def checkImage(self, arg0: Any, arg1: Any) -> int: ...
    @overload
    def checkImage(self, arg0: Any, arg1: int, arg2: int, arg3: Any) -> int: ...
    @staticmethod
    def closeAll() -> None: ...
    @overload
    @staticmethod
    def combine(arg0: List[Any], arg1: int, arg2: int, arg3: bool) -> Any: ...
    @overload
    @staticmethod
    def combine(arg0: List[Any]) -> Any: ...
    @overload
    @staticmethod
    def combine(arg0: List[Any], arg1: bool) -> Any: ...
    @overload
    @staticmethod
    def combine(arg0: List[Any], arg1: str, arg2: int, arg3: int, arg4: bool) -> Any: ...
    @staticmethod
    def combineAsImagePlus(arg0: List[Any]) -> Any: ...
    def computeVisibleRect(self, arg0: Any) -> None: ...
    @overload
    def contains(self, arg0: int, arg1: int) -> bool: ...
    @overload
    def contains(self, arg0: Any) -> bool: ...
    def containsValidData(self) -> bool: ...
    def countComponents(self) -> int: ...
    def createChartPrintJob(self) -> None: ...
    @overload
    def createImage(self, arg0: Any) -> Any: ...
    @overload
    def createImage(self, arg0: int, arg1: int) -> Any: ...
    def createToolTip(self) -> Any: ...
    @overload
    def createVolatileImage(self, arg0: int, arg1: int, arg2: Any) -> Any: ...
    @overload
    def createVolatileImage(self, arg0: int, arg1: int) -> Any: ...
    def deliverEvent(self, arg0: Any) -> None: ...
    def disable(self) -> None: ...
    def dispatchEvent(self, arg0: Any) -> None: ...
    def dispose(self) -> None: ...
    def doCopy(self) -> None: ...
    def doEditChartProperties(self) -> None: ...
    def doLayout(self) -> None: ...
    def doSaveAs(self) -> None: ...
    @overload
    def enable(self) -> None: ...
    @overload
    def enable(self, arg0: bool) -> None: ...
    def enableInputMethods(self, arg0: bool) -> None: ...
    @overload
    def findComponentAt(self, arg0: int, arg1: int) -> Any: ...
    @overload
    def findComponentAt(self, arg0: Any) -> Any: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: bool, arg2: bool) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: str, arg2: str) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: int, arg2: int) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float) -> None: ...
    @overload
    def firePropertyChange(self, arg0: str, arg1: float, arg2: float) -> None: ...
    def getAccessibleContext(self) -> Any: ...
    def getActionForKeyStroke(self, arg0: Any) -> Any: ...
    def getActionMap(self) -> Any: ...
    def getAlignmentX(self) -> float: ...
    def getAlignmentY(self) -> float: ...
    def getAncestorListeners(self) -> List[Any]: ...
    def getAnchor(self) -> Any: ...
    def getAutoscrolls(self) -> bool: ...
    def getBackground(self) -> Any: ...
    def getBaseline(self, arg0: int, arg1: int) -> int: ...
    def getBaselineResizeBehavior(self) -> Any: ...
    def getBorder(self) -> Any: ...
    @overload
    def getBounds(self, arg0: Any) -> Any: ...
    @overload
    def getBounds(self) -> Any: ...
    def getChart(self) -> Any: ...
    def getChartRenderingInfo(self) -> Any: ...
    def getClientProperty(self, arg0: Any) -> Any: ...
    def getColorModel(self) -> Any: ...
    def getComponent(self, arg0: int) -> Any: ...
    @overload
    def getComponentAt(self, arg0: int, arg1: int) -> Any: ...
    @overload
    def getComponentAt(self, arg0: Any) -> Any: ...
    def getComponentCount(self) -> int: ...
    def getComponentListeners(self) -> List[Any]: ...
    def getComponentOrientation(self) -> Any: ...
    def getComponentPopupMenu(self) -> Any: ...
    def getComponentZOrder(self, arg0: Any) -> int: ...
    def getComponents(self) -> List[Any]: ...
    def getConditionForKeyStroke(self, arg0: Any) -> int: ...
    def getContainerListeners(self) -> List[Any]: ...
    def getCursor(self) -> Any: ...
    def getDebugGraphicsOptions(self) -> int: ...
    def getDefaultDirectoryForSaveAs(self) -> Any: ...
    @staticmethod
    def getDefaultLocale() -> Any: ...
    def getDismissDelay(self) -> int: ...
    def getDropTarget(self) -> Any: ...
    def getEntityForPoint(self, arg0: int, arg1: int) -> Any: ...
    def getFillZoomRectangle(self) -> bool: ...
    def getFocusCycleRootAncestor(self) -> Any: ...
    def getFocusListeners(self) -> List[Any]: ...
    def getFocusTraversalKeys(self, arg0: int) -> Set[Any]: ...
    def getFocusTraversalKeysEnabled(self) -> bool: ...
    def getFocusTraversalPolicy(self) -> Any: ...
    def getFont(self) -> Any: ...
    def getFontMetrics(self, arg0: Any) -> Any: ...
    def getForeground(self) -> Any: ...
    def getFrame(self) -> Any: ...
    def getGraphics(self) -> Any: ...
    def getGraphicsConfiguration(self) -> Any: ...
    def getHeight(self) -> int: ...
    def getHierarchyBoundsListeners(self) -> List[Any]: ...
    def getHierarchyListeners(self) -> List[Any]: ...
    @overload
    @staticmethod
    def getHistogram(arg0: Any, arg1: List[int], arg2: bool) -> Any: ...
    @overload
    @staticmethod
    def getHistogram(arg0: Any, arg1: List[Any], arg2: bool) -> Any: ...
    @overload
    @staticmethod
    def getHistogram(arg0: Any, arg1: bool) -> Any: ...
    def getHorizontalAxisTrace(self) -> bool: ...
    def getIgnoreRepaint(self) -> bool: ...
    def getImage(self) -> Any: ...
    def getImages(self, arg0: float) -> List[Any]: ...
    def getInheritsPopupMenu(self) -> bool: ...
    def getInitialDelay(self) -> int: ...
    def getInputContext(self) -> Any: ...
    @overload
    def getInputMap(self) -> Any: ...
    @overload
    def getInputMap(self, arg0: int) -> Any: ...
    def getInputMethodListeners(self) -> List[Any]: ...
    def getInputMethodRequests(self) -> Any: ...
    def getInputVerifier(self) -> Any: ...
    @overload
    def getInsets(self) -> Any: ...
    @overload
    def getInsets(self, arg0: Any) -> Any: ...
    def getKeyListeners(self) -> List[Any]: ...
    def getLayout(self) -> Any: ...
    def getListeners(self, arg0: Any) -> List[Any]: ...
    def getLocale(self) -> Any: ...
    @overload
    def getLocation(self, arg0: Any) -> Any: ...
    @overload
    def getLocation(self) -> Any: ...
    def getLocationOnScreen(self) -> Any: ...
    def getMaximumDrawHeight(self) -> int: ...
    def getMaximumDrawWidth(self) -> int: ...
    def getMaximumSize(self) -> Any: ...
    def getMinimumDrawHeight(self) -> int: ...
    def getMinimumDrawWidth(self) -> int: ...
    def getMinimumSize(self) -> Any: ...
    def getMouseListeners(self) -> List[Any]: ...
    def getMouseMotionListeners(self) -> List[Any]: ...
    @overload
    def getMousePosition(self, arg0: bool) -> Any: ...
    @overload
    def getMousePosition(self) -> Any: ...
    def getMouseWheelListeners(self) -> List[Any]: ...
    def getName(self) -> str: ...
    def getNextFocusableComponent(self) -> Any: ...
    @staticmethod
    def getPaintScaleLegend(arg0: str, arg1: Any, arg2: float, arg3: float, arg4: int) -> Any: ...
    def getParent(self) -> Any: ...
    def getPopupLocation(self, arg0: Any) -> Any: ...
    def getPopupMenu(self) -> Any: ...
    def getPreferredSize(self) -> Any: ...
    @overload
    def getPropertyChangeListeners(self, arg0: str) -> List[Any]: ...
    @overload
    def getPropertyChangeListeners(self) -> List[Any]: ...
    def getRefreshBuffer(self) -> bool: ...
    def getRegisteredKeyStrokes(self) -> List[Any]: ...
    def getReshowDelay(self) -> int: ...
    def getRootPane(self) -> Any: ...
    def getScaleX(self) -> float: ...
    def getScaleY(self) -> float: ...
    @overload
    def getScreenDataArea(self, arg0: int, arg1: int) -> Any: ...
    @overload
    def getScreenDataArea(self) -> Any: ...
    @overload
    def getSize(self, arg0: Any) -> Any: ...
    @overload
    def getSize(self) -> Any: ...
    def getTitle(self) -> str: ...
    def getToolTipLocation(self, arg0: Any) -> Any: ...
    @overload
    def getToolTipText(self, arg0: Any) -> str: ...
    @overload
    def getToolTipText(self) -> str: ...
    def getToolkit(self) -> Any: ...
    def getTopLevelAncestor(self) -> Any: ...
    def getTransferHandler(self) -> Any: ...
    def getTreeLock(self) -> Any: ...
    @overload
    def getUI(self) -> Any: ...
    @overload
    def getUI(self) -> Any: ...
    def getUIClassID(self) -> str: ...
    def getVerifyInputWhenFocusTarget(self) -> bool: ...
    def getVerticalAxisTrace(self) -> bool: ...
    def getVetoableChangeListeners(self) -> List[Any]: ...
    def getVisibleRect(self) -> Any: ...
    def getWidth(self) -> int: ...
    def getX(self) -> int: ...
    def getY(self) -> int: ...
    def getZoomAroundAnchor(self) -> bool: ...
    def getZoomFillPaint(self) -> Any: ...
    def getZoomInFactor(self) -> float: ...
    def getZoomOutFactor(self) -> float: ...
    def getZoomOutlinePaint(self) -> Any: ...
    def getZoomTriggerDistance(self) -> int: ...
    def gotFocus(self, arg0: Any, arg1: Any) -> bool: ...
    def grabFocus(self) -> None: ...
    def handleEvent(self, arg0: Any) -> bool: ...
    def hasFocus(self) -> bool: ...
    def hide(self) -> None: ...
    def imageUpdate(self, arg0: Any, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int) -> bool: ...
    def insets(self) -> Any: ...
    def inside(self, arg0: int, arg1: int) -> bool: ...
    def invalidate(self) -> None: ...
    def isAncestorOf(self, arg0: Any) -> bool: ...
    def isBackgroundSet(self) -> bool: ...
    def isCombined(self) -> bool: ...
    def isCursorSet(self) -> bool: ...
    def isDisplayable(self) -> bool: ...
    def isDomainZoomable(self) -> bool: ...
    def isDoubleBuffered(self) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isEnforceFileExtensions(self) -> bool: ...
    def isEqualized(self) -> bool: ...
    @overload
    def isFocusCycleRoot(self, arg0: Any) -> bool: ...
    @overload
    def isFocusCycleRoot(self) -> bool: ...
    def isFocusOwner(self) -> bool: ...
    def isFocusTraversable(self) -> bool: ...
    def isFocusTraversalPolicyProvider(self) -> bool: ...
    def isFocusTraversalPolicySet(self) -> bool: ...
    def isFocusable(self) -> bool: ...
    def isFontSet(self) -> bool: ...
    def isForegroundSet(self) -> bool: ...
    def isGMMDistributionVisible(self) -> bool: ...
    def isGridlinesVisible(self) -> bool: ...
    def isLegendVisible(self) -> bool: ...
    def isLightweight(self) -> bool: ...
    @staticmethod
    def isLightweightComponent(arg0: Any) -> bool: ...
    def isManagingFocus(self) -> bool: ...
    def isMaximumSizeSet(self) -> bool: ...
    def isMinimumSizeSet(self) -> bool: ...
    def isMouseWheelEnabled(self) -> bool: ...
    def isNormDistributionVisible(self) -> bool: ...
    def isOpaque(self) -> bool: ...
    def isOptimizedDrawingEnabled(self) -> bool: ...
    def isOutlineVisible(self) -> bool: ...
    def isPaintingForPrint(self) -> bool: ...
    def isPaintingTile(self) -> bool: ...
    def isPreferredSizeSet(self) -> bool: ...
    def isQuartilesVisible(self) -> bool: ...
    def isRangeZoomable(self) -> bool: ...
    def isRequestFocusEnabled(self) -> bool: ...
    def isShowing(self) -> bool: ...
    def isValid(self) -> bool: ...
    def isValidateRoot(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def keyDown(self, arg0: Any, arg1: int) -> bool: ...
    def keyUp(self, arg0: Any, arg1: int) -> bool: ...
    def layout(self) -> None: ...
    @overload
    def list(self, arg0: Any, arg1: int) -> None: ...
    @overload
    def list(self, arg0: Any, arg1: int) -> None: ...
    @overload
    def list(self, arg0: Any) -> None: ...
    @overload
    def list(self) -> None: ...
    @overload
    def list(self, arg0: Any) -> None: ...
    def locate(self, arg0: int, arg1: int) -> Any: ...
    def location(self) -> Any: ...
    def lostFocus(self, arg0: Any, arg1: Any) -> bool: ...
    @staticmethod
    def main(arg0: List[str]) -> None: ...
    def minimumSize(self) -> Any: ...
    def mouseClicked(self, arg0: Any) -> None: ...
    def mouseDown(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def mouseDrag(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def mouseDragged(self, arg0: Any) -> None: ...
    def mouseEnter(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def mouseEntered(self, arg0: Any) -> None: ...
    def mouseExit(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def mouseExited(self, arg0: Any) -> None: ...
    def mouseMove(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def mouseMoved(self, arg0: Any) -> None: ...
    def mousePressed(self, arg0: Any) -> None: ...
    def mouseReleased(self, arg0: Any) -> None: ...
    def mouseUp(self, arg0: Any, arg1: int, arg2: int) -> bool: ...
    def move(self, arg0: int, arg1: int) -> None: ...
    def nextFocus(self) -> None: ...
    @staticmethod
    def openCharts() -> List[Any]: ...
    def overlayChanged(self, arg0: Any) -> None: ...
    def paint(self, arg0: Any) -> None: ...
    def paintAll(self, arg0: Any) -> None: ...
    def paintComponent(self, arg0: Any) -> None: ...
    def paintComponents(self, arg0: Any) -> None: ...
    @overload
    def paintImmediately(self, arg0: Any) -> None: ...
    @overload
    def paintImmediately(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def postEvent(self, arg0: Any) -> bool: ...
    def preferredSize(self) -> Any: ...
    @overload
    def prepareImage(self, arg0: Any, arg1: int, arg2: int, arg3: Any) -> bool: ...
    @overload
    def prepareImage(self, arg0: Any, arg1: Any) -> bool: ...
    @overload
    def print(self, arg0: Any, arg1: Any, arg2: int) -> int: ...
    @overload
    def print(self, arg0: Any) -> None: ...
    def printAll(self, arg0: Any) -> None: ...
    def printComponents(self, arg0: Any) -> None: ...
    def putClientProperty(self, arg0: Any, arg1: Any) -> None: ...
    @overload
    def registerKeyboardAction(self, arg0: Any, arg1: Any, arg2: int) -> None: ...
    @overload
    def registerKeyboardAction(self, arg0: Any, arg1: str, arg2: Any, arg3: int) -> None: ...
    @overload
    def remove(self, arg0: Any) -> None: ...
    @overload
    def remove(self, arg0: int) -> None: ...
    @overload
    def remove(self, arg0: Any) -> None: ...
    def removeAll(self) -> None: ...
    def removeAncestorListener(self, arg0: Any) -> None: ...
    def removeChartMouseListener(self, arg0: Any) -> None: ...
    def removeComponentListener(self, arg0: Any) -> None: ...
    def removeContainerListener(self, arg0: Any) -> None: ...
    def removeFocusListener(self, arg0: Any) -> None: ...
    def removeHierarchyBoundsListener(self, arg0: Any) -> None: ...
    def removeHierarchyListener(self, arg0: Any) -> None: ...
    def removeInputMethodListener(self, arg0: Any) -> None: ...
    def removeKeyListener(self, arg0: Any) -> None: ...
    def removeMouseListener(self, arg0: Any) -> None: ...
    def removeMouseMotionListener(self, arg0: Any) -> None: ...
    def removeMouseWheelListener(self, arg0: Any) -> None: ...
    def removeNotify(self) -> None: ...
    def removeOverlay(self, arg0: Any) -> None: ...
    @overload
    def removePropertyChangeListener(self, arg0: Any) -> None: ...
    @overload
    def removePropertyChangeListener(self, arg0: str, arg1: Any) -> None: ...
    def removeVetoableChangeListener(self, arg0: Any) -> None: ...
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int, arg4: int) -> None: ...
    @overload
    def repaint(self, arg0: Any) -> None: ...
    @overload
    def repaint(self) -> None: ...
    @overload
    def repaint(self, arg0: int) -> None: ...
    @overload
    def repaint(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    def replace(self, arg0: Any) -> None: ...
    def requestDefaultFocus(self) -> bool: ...
    @overload
    def requestFocus(self, arg0: bool) -> bool: ...
    @overload
    def requestFocus(self) -> None: ...
    @overload
    def requestFocus(self, arg0: Any) -> None: ...
    @overload
    def requestFocusInWindow(self) -> bool: ...
    @overload
    def requestFocusInWindow(self, arg0: Any) -> bool: ...
    def resetKeyboardActions(self) -> None: ...
    def reshape(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    @overload
    def resize(self, arg0: Any) -> None: ...
    @overload
    def resize(self, arg0: int, arg1: int) -> None: ...
    def restoreAutoBounds(self) -> None: ...
    def restoreAutoDomainBounds(self) -> None: ...
    def restoreAutoRangeBounds(self) -> None: ...
    def revalidate(self) -> None: ...
    @overload
    def save(self, arg0: str, arg1: float) -> bool: ...
    @overload
    def save(self, arg0: Any) -> bool: ...
    @overload
    def saveAsPDF(self, arg0: str, arg1: float) -> None: ...
    @overload
    def saveAsPDF(self, arg0: str) -> None: ...
    @overload
    def saveAsPDF(self, arg0: Any, arg1: float) -> None: ...
    @overload
    def saveAsPNG(self, arg0: Any) -> None: ...
    @overload
    def saveAsPNG(self, arg0: Any, arg1: float) -> None: ...
    @overload
    def saveAsPNG(self, arg0: str) -> None: ...
    @overload
    def saveAsPNG(self, arg0: str, arg1: float) -> None: ...
    @overload
    def saveAsSVG(self, arg0: Any, arg1: float) -> None: ...
    @overload
    def saveAsSVG(self, arg0: str, arg1: float) -> None: ...
    @overload
    def saveAsSVG(self, arg0: str) -> None: ...
    def scale(self, arg0: Any) -> Any: ...
    def scrollRectToVisible(self, arg0: Any) -> None: ...
    def setActionMap(self, arg0: Any) -> None: ...
    def setAlignmentX(self, arg0: float) -> None: ...
    def setAlignmentY(self, arg0: float) -> None: ...
    def setAutoscrolls(self, arg0: bool) -> None: ...
    def setAxesVisible(self, arg0: bool) -> None: ...
    def setBackground(self, arg0: Any) -> None: ...
    def setBorder(self, arg0: Any) -> None: ...
    @overload
    def setBounds(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...
    @overload
    def setBounds(self, arg0: Any) -> None: ...
    def setChart(self, arg0: Any) -> None: ...
    def setChartTitle(self, arg0: str) -> None: ...
    @overload
    def setColors(self, arg0: Any) -> None: ...
    @overload
    def setColors(self, arg0: List[str]) -> None: ...
    def setComponentOrientation(self, arg0: Any) -> None: ...
    def setComponentPopupMenu(self, arg0: Any) -> None: ...
    def setComponentZOrder(self, arg0: Any, arg1: int) -> None: ...
    def setCursor(self, arg0: Any) -> None: ...
    def setDebugGraphicsOptions(self, arg0: int) -> None: ...
    def setDefaultDirectoryForSaveAs(self, arg0: Any) -> None: ...
    @staticmethod
    def setDefaultFontScale(arg0: float) -> None: ...
    @staticmethod
    def setDefaultLocale(arg0: Any) -> None: ...
    def setDismissDelay(self, arg0: int) -> None: ...
    def setDisplayToolTips(self, arg0: bool) -> None: ...
    def setDomainZoomable(self, arg0: bool) -> None: ...
    def setDoubleBuffered(self, arg0: bool) -> None: ...
    def setDropTarget(self, arg0: Any) -> None: ...
    def setEnabled(self, arg0: bool) -> None: ...
    def setEnforceFileExtensions(self, arg0: bool) -> None: ...
    def setEqualizeAxes(self, arg0: bool) -> None: ...
    def setFillZoomRectangle(self, arg0: bool) -> None: ...
    def setFocusCycleRoot(self, arg0: bool) -> None: ...
    def setFocusTraversalKeys(self, arg0: int, arg1: Set[Any]) -> None: ...
    def setFocusTraversalKeysEnabled(self, arg0: bool) -> None: ...
    def setFocusTraversalPolicy(self, arg0: Any) -> None: ...
    def setFocusTraversalPolicyProvider(self, arg0: bool) -> None: ...
    def setFocusable(self, arg0: bool) -> None: ...
    def setFont(self, arg0: Any) -> None: ...
    @overload
    def setFontSize(self, arg0: float) -> None: ...
    @overload
    def setFontSize(self, arg0: float, arg1: str) -> None: ...
    def setForeground(self, arg0: Any) -> None: ...
    def setGMMFitVisible(self, arg0: bool) -> None: ...
    def setGaussianFitVisible(self, arg0: bool) -> None: ...
    def setGridlinesVisible(self, arg0: bool) -> None: ...
    def setHorizontalAxisTrace(self, arg0: bool) -> None: ...
    def setIgnoreRepaint(self, arg0: bool) -> None: ...
    def setInheritsPopupMenu(self, arg0: bool) -> None: ...
    def setInitialDelay(self, arg0: int) -> None: ...
    def setInputMap(self, arg0: int, arg1: Any) -> None: ...
    def setInputVerifier(self, arg0: Any) -> None: ...
    def setLayout(self, arg0: Any) -> None: ...
    def setLegendVisible(self, arg0: bool) -> None: ...
    def setLineWidth(self, arg0: int) -> None: ...
    def setLocale(self, arg0: Any) -> None: ...
    @overload
    def setLocation(self, arg0: int, arg1: int) -> None: ...
    @overload
    def setLocation(self, arg0: Any) -> None: ...
    def setMaximumDrawHeight(self, arg0: int) -> None: ...
    def setMaximumDrawWidth(self, arg0: int) -> None: ...
    def setMaximumSize(self, arg0: Any) -> None: ...
    def setMinimumDrawHeight(self, arg0: int) -> None: ...
    def setMinimumDrawWidth(self, arg0: int) -> None: ...
    def setMinimumSize(self, arg0: Any) -> None: ...
    def setMixingCutoutShape(self, arg0: Any) -> None: ...
    def setMouseWheelEnabled(self, arg0: bool) -> None: ...
    @overload
    def setMouseZoomable(self, arg0: bool) -> None: ...
    @overload
    def setMouseZoomable(self, arg0: bool, arg1: bool) -> None: ...
    def setName(self, arg0: str) -> None: ...
    def setNextFocusableComponent(self, arg0: Any) -> None: ...
    def setOpaque(self, arg0: bool) -> None: ...
    def setOutlineVisible(self, arg0: bool) -> None: ...
    def setPopupMenu(self, arg0: Any) -> None: ...
    def setPreferredSize(self, arg0: Any) -> None: ...
    def setQuartilesVisible(self, arg0: bool) -> None: ...
    def setRangeZoomable(self, arg0: bool) -> None: ...
    def setRefreshBuffer(self, arg0: bool) -> None: ...
    def setRequestFocusEnabled(self, arg0: bool) -> None: ...
    def setReshowDelay(self, arg0: int) -> None: ...
    @overload
    def setSize(self, arg0: int, arg1: int) -> None: ...
    @overload
    def setSize(self, arg0: Any) -> None: ...
    def setTitle(self, arg0: str) -> None: ...
    def setToolTipText(self, arg0: str) -> None: ...
    def setTransferHandler(self, arg0: Any) -> None: ...
    def setUI(self, arg0: Any) -> None: ...
    def setVerifyInputWhenFocusTarget(self, arg0: bool) -> None: ...
    def setVerticalAxisTrace(self, arg0: bool) -> None: ...
    def setVisible(self, arg0: bool) -> None: ...
    def setZoomAroundAnchor(self, arg0: bool) -> None: ...
    def setZoomFillPaint(self, arg0: Any) -> None: ...
    def setZoomInFactor(self, arg0: float) -> None: ...
    def setZoomOutFactor(self, arg0: float) -> None: ...
    def setZoomOutlinePaint(self, arg0: Any) -> None: ...
    def setZoomTriggerDistance(self, arg0: int) -> None: ...
    # Enhanced show() method with multiple overloads
    @overload
    def show(self) -> None: ...
    @overload
    def show(self, arg0: str) -> None: ...
    @overload
    def show(self, arg0: int, arg1: int) -> None: ...
    @overload
    def show(self, arg0: bool) -> None: ...
    def show(self, *args: Any, **kwargs: Any) -> Any:
        """
        Display this object using enhanced conversion.
        
        This method first tries the original Java show() method, and if that fails,
        it falls back to display() which can handle SNT-specific conversions.
        """
        try:
            # Try to call the original Java show method via __getattr__
            original_show = object.__getattribute__(self, "__getattr__")("show")
            return original_show(*args, **kwargs)
        except (AttributeError, TypeError, Exception):
            # Fallback to display
            from pysnt.converters import display
            return display(self, **kwargs)
    @overload
    @staticmethod
    def showHeatmap(arg0: List[List[float]], arg1: Any, arg2: List[str]) -> None: ...
    @overload
    @staticmethod
    def showHeatmap(arg0: List[Any], arg1: List[Any], arg2: Any, arg3: List[str]) -> None: ...
    @overload
    @staticmethod
    def showHistogram3D(arg0: Any, arg1: Any, arg2: Any, arg3: List[str]) -> None: ...
    @overload
    @staticmethod
    def showHistogram3D(arg0: List[List[float]], arg1: Any, arg2: bool, arg3: List[str]) -> None: ...
    @overload
    @staticmethod
    def showHistogram3D(arg0: List[Any], arg1: List[Any], arg2: Any, arg3: List[str]) -> None: ...
    def size(self) -> Any: ...
    @staticmethod
    def tile(arg0: List[Any]) -> None: ...
    @staticmethod
    def tileAll() -> None: ...
    def transferFocus(self) -> None: ...
    def transferFocusBackward(self) -> None: ...
    def transferFocusDownCycle(self) -> None: ...
    def transferFocusUpCycle(self) -> None: ...
    def translateJava2DToScreen(self, arg0: Any) -> Any: ...
    def translateScreenToJava2D(self, arg0: Any) -> Any: ...
    def unregisterKeyboardAction(self, arg0: Any) -> None: ...
    def update(self, arg0: Any) -> None: ...
    def updateUI(self) -> None: ...
    def validate(self) -> None: ...
    def zoom(self, arg0: Any) -> None: ...
    def zoomInBoth(self, arg0: float, arg1: float) -> None: ...
    def zoomInDomain(self, arg0: float, arg1: float) -> None: ...
    def zoomInRange(self, arg0: float, arg1: float) -> None: ...
    def zoomOutBoth(self, arg0: float, arg1: float) -> None: ...
    def zoomOutDomain(self, arg0: float, arg1: float) -> None: ...
    def zoomOutRange(self, arg0: float, arg1: float) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class SNTTable:
    """
    SNT SNTTable class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: str, arg1: str) -> None: ...
    @overload
    def __init__(self, arg0: str) -> None: ...
    @overload
    def __init__(self, arg0: Dict[str, Any]) -> None: ...

    # Methods
    @overload
    def add(self, arg0: Any) -> bool: ...
    @overload
    def add(self, arg0: int, arg1: Any) -> None: ...
    @overload
    def add(self, arg0: int, arg1: Any) -> None: ...
    @overload
    def add(self, arg0: Any) -> bool: ...
    @overload
    def addAll(self, arg0: int, arg1: List[Any]) -> bool: ...
    @overload
    def addAll(self, arg0: List[Any]) -> bool: ...
    @overload
    def addColumn(self, arg0: str, arg1: List[float]) -> None: ...
    @overload
    def addColumn(self, arg0: str, arg1: List[Any]) -> None: ...
    def addFirst(self, arg0: Any) -> None: ...
    def addGenericColumn(self, arg0: str, arg1: List[Any]) -> None: ...
    def addLast(self, arg0: Any) -> None: ...
    @overload
    def appendColumn(self) -> Any: ...
    @overload
    def appendColumn(self, arg0: str) -> Any: ...
    @overload
    def appendColumns(self, arg0: int) -> List[Any]: ...
    @overload
    def appendColumns(self, arg0: List[str]) -> List[Any]: ...
    @overload
    def appendRow(self, arg0: str) -> None: ...
    @overload
    def appendRow(self) -> None: ...
    @overload
    def appendRows(self, arg0: List[str]) -> None: ...
    @overload
    def appendRows(self, arg0: int) -> None: ...
    def appendToLastRow(self, arg0: str, arg1: Any) -> None: ...
    def clear(self) -> None: ...
    def clone(self) -> Any: ...
    def contains(self, arg0: Any) -> bool: ...
    def containsAll(self, arg0: List[Any]) -> bool: ...
    def createOrUpdateDisplay(self) -> None: ...
    def ensureCapacity(self, arg0: int) -> None: ...
    def fillEmptyCells(self, arg0: Any) -> None: ...
    def forEach(self, arg0: Any) -> None: ...
    @overload
    @staticmethod
    def fromFile(arg0: str, arg1: str) -> Any: ...
    @overload
    @staticmethod
    def fromFile(arg0: str) -> Any: ...
    @overload
    def geColumnHeaders(self, arg0: str) -> List[Any]: ...
    @overload
    def geColumnHeaders(self) -> List[Any]: ...
    @overload
    def geColumnStats(self, arg0: str, arg1: int, arg2: int) -> Any: ...
    @overload
    def geColumnStats(self, arg0: int, arg1: int, arg2: int) -> Any: ...
    @overload
    def geRowStats(self, arg0: str, arg1: int, arg2: int) -> Any: ...
    @overload
    def geRowStats(self, arg0: int, arg1: int, arg2: int) -> Any: ...
    @overload
    def get(self, arg0: int) -> Any: ...
    @overload
    def get(self, arg0: int) -> Any: ...
    @overload
    def get(self, arg0: int, arg1: int) -> Any: ...
    @overload
    def get(self, arg0: str) -> Any: ...
    @overload
    def get(self, arg0: str, arg1: int) -> Any: ...
    def getColumnCount(self) -> int: ...
    def getColumnHeader(self, arg0: int) -> str: ...
    def getColumnIndex(self, arg0: str) -> int: ...
    def getFirst(self) -> Any: ...
    def getLast(self) -> Any: ...
    def getRowCount(self) -> int: ...
    def getRowHeader(self, arg0: int) -> str: ...
    def getRowIndex(self, arg0: str) -> int: ...
    def getSummaryRow(self) -> int: ...
    def getTitle(self) -> str: ...
    def hasUnsavedData(self) -> bool: ...
    def indexOf(self, arg0: Any) -> int: ...
    @overload
    def insertColumn(self, arg0: int, arg1: str) -> Any: ...
    @overload
    def insertColumn(self, arg0: int) -> Any: ...
    @overload
    def insertColumns(self, arg0: int, arg1: int) -> List[Any]: ...
    @overload
    def insertColumns(self, arg0: int, arg1: int) -> List[Any]: ...
    @overload
    def insertColumns(self, arg0: int, arg1: List[str]) -> List[Any]: ...
    @overload
    def insertRow(self, arg0: str) -> int: ...
    @overload
    def insertRow(self, arg0: int, arg1: str) -> None: ...
    @overload
    def insertRow(self, arg0: int) -> None: ...
    @overload
    def insertRows(self, arg0: int, arg1: List[str]) -> None: ...
    @overload
    def insertRows(self, arg0: int, arg1: int) -> None: ...
    def isEmpty(self) -> bool: ...
    def isSummarized(self) -> bool: ...
    def iterator(self) -> Any: ...
    def lastIndexOf(self, arg0: Any) -> int: ...
    @overload
    def listIterator(self, arg0: int) -> Any: ...
    @overload
    def listIterator(self) -> Any: ...
    def parallelStream(self) -> Any: ...
    @overload
    def remove(self, arg0: int) -> Any: ...
    @overload
    def remove(self, arg0: int) -> Any: ...
    @overload
    def remove(self, arg0: Any) -> bool: ...
    def removeAll(self, arg0: List[Any]) -> bool: ...
    @overload
    def removeColumn(self, arg0: str) -> Any: ...
    @overload
    def removeColumn(self, arg0: int) -> Any: ...
    @overload
    def removeColumns(self, arg0: int, arg1: int) -> List[Any]: ...
    @overload
    def removeColumns(self, arg0: List[str]) -> List[Any]: ...
    def removeFirst(self) -> Any: ...
    def removeIf(self, arg0: Any) -> bool: ...
    def removeLast(self) -> Any: ...
    @overload
    def removeRow(self, arg0: str) -> None: ...
    @overload
    def removeRow(self, arg0: int) -> None: ...
    @overload
    def removeRows(self, arg0: int, arg1: int) -> None: ...
    @overload
    def removeRows(self, arg0: List[str]) -> None: ...
    def removeSummary(self) -> None: ...
    def replace(self, arg0: str, arg1: float, arg2: float) -> None: ...
    def replaceAll(self, arg0: Any) -> None: ...
    def retainAll(self, arg0: List[Any]) -> bool: ...
    @overload
    def reversed(self) -> Any: ...
    @overload
    def reversed(self) -> List[Any]: ...
    @overload
    @staticmethod
    def save(arg0: Any, arg1: str, arg2: bool, arg3: bool, arg4: Any) -> None: ...
    @overload
    def save(self, arg0: str) -> bool: ...
    @overload
    def save(self, arg0: Any) -> None: ...
    @overload
    def set(self, arg0: str, arg1: int, arg2: Any) -> None: ...
    @overload
    def set(self, arg0: int, arg1: int, arg2: Any) -> None: ...
    @overload
    def set(self, arg0: str, arg1: str, arg2: Any) -> None: ...
    @overload
    def set(self, arg0: int, arg1: Any) -> Any: ...
    @overload
    def set(self, arg0: int, arg1: Any) -> Any: ...
    def setColumnCount(self, arg0: int) -> None: ...
    def setColumnHeader(self, arg0: int, arg1: str) -> None: ...
    def setContext(self, arg0: Any) -> None: ...
    def setDimensions(self, arg0: int, arg1: int) -> None: ...
    def setRowCount(self, arg0: int) -> None: ...
    def setRowHeader(self, arg0: int, arg1: str) -> None: ...
    def setSize(self, arg0: int) -> None: ...
    # Enhanced show() method with multiple overloads
    @overload
    def show(self) -> None: ...
    @overload
    def show(self, arg0: str) -> None: ...
    def show(self, *args: Any, **kwargs: Any) -> Any:
        """
        Display this object using enhanced conversion.
        
        This method first tries the original Java show() method, and if that fails,
        it falls back to display() which can handle SNT-specific conversions.
        """
        try:
            # Try to call the original Java show method via __getattr__
            original_show = object.__getattribute__(self, "__getattr__")("show")
            return original_show(*args, **kwargs)
        except (AttributeError, TypeError, Exception):
            # Fallback to display
            from pysnt.converters import display
            return display(self, **kwargs)
    def size(self) -> int: ...
    def sort(self, arg0: Any) -> None: ...
    def spliterator(self) -> Any: ...
    def stream(self) -> Any: ...
    def subList(self, arg0: int, arg1: int) -> List[Any]: ...
    def summarize(self) -> None: ...
    @overload
    def toArray(self) -> List[Any]: ...
    @overload
    def toArray(self, arg0: List[Any]) -> List[Any]: ...
    @overload
    def toArray(self, arg0: Any) -> List[Any]: ...
    def trimToSize(self) -> None: ...
    def updateDisplay(self) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

# Module functions
def get_available_classes() -> List[str]: ...
def get_class(class_name: str) -> Any: ...
def list_classes() -> None: ...
def get_curated_classes() -> List[str]: ...
def get_extended_classes() -> List[str]: ...

CURATED_CLASSES: List[str]
EXTENDED_CLASSES: List[str]