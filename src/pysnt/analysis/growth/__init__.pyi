"""Comprehensive type stubs for Java classes."""

from typing import Any, List, Dict, Optional, Union, overload, Set, Callable

class GrowthAnalyzer:
    """
    SNT GrowthAnalyzer class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: float, arg1: float, arg2: float) -> None: ...

    # Fields
    DEFAULT_BASE_THRESHOLD_FRACTION: float
    DEFAULT_RAPID_THRESHOLD_MULTIPLE: float
    DEFAULT_PHASE_SENSITIVITY: float
    DEFAULT_RETRACTION_THRESHOLD: float
    DEFAULT_MIN_PATH_LENGTH: float
    DEFAULT_MIN_TIME_POINTS: int
    DEFAULT_WINDOW_SIZE_FRACTION: float
    DEFAULT_ABSOLUTE_WINDOW_SIZE: int
    DEFAULT_USE_ABSOLUTE_WINDOW_SIZE: bool
    DEFAULT_USE_GLOBAL_THRESHOLDS: bool
    TAG_REGEX_PATTERN: str

    # Methods
    def analyze(self, arg0: List[Any], arg1: float, arg2: str) -> Any: ...
    def getAbsoluteWindowSize(self) -> int: ...
    def getBaseThresholdFraction(self) -> float: ...
    def getPhaseSensitivity(self) -> float: ...
    def getRapidThresholdMultiple(self) -> float: ...
    def getRetractionThreshold(self) -> float: ...
    def getWindowSizeFraction(self) -> float: ...
    def isUseAbsoluteWindowSize(self) -> bool: ...
    def isUseGlobalThresholds(self) -> bool: ...
    def setAbsoluteWindowSize(self, arg0: int) -> None: ...
    def setMinPathLength(self, arg0: float) -> None: ...
    def setMinTimePoints(self, arg0: int) -> None: ...
    def setPhaseSensitivity(self, arg0: float) -> None: ...
    def setPlateauThreshold(self, arg0: float) -> None: ...
    def setRapidThreshold(self, arg0: float) -> None: ...
    def setRetractionThreshold(self, arg0: float) -> None: ...
    def setUseAbsoluteWindowSize(self, arg0: bool) -> None: ...
    def setUseGlobalThresholds(self, arg0: bool) -> None: ...
    def setWindowSizeFraction(self, arg0: float) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class GrowthAnalysisResults:
    """
    SNT GrowthAnalysisResults class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Dict[str, Any], arg1: float, arg2: str) -> None: ...

    # Methods
    def getFrameInterval(self) -> float: ...
    def getNeuriteCount(self) -> int: ...
    @overload
    def getNeuriteGrowthData(self) -> Dict[str, Any]: ...
    @overload
    def getNeuriteGrowthData(self, arg0: str) -> Any: ...
    def getNeuritePhases(self) -> Dict[str, Any]: ...
    def getNeuritesByPattern(self, arg0: Any) -> List[Any]: ...
    def getPhaseDistribution(self) -> Dict[str, Any]: ...
    def getPhaseDistributionForVisualization(self) -> Dict[str, Any]: ...
    def getPhasePercentage(self, arg0: Any) -> float: ...
    def getSummaryStatistics(self) -> Any: ...
    def getTimeUnits(self) -> str: ...
    def getTotalPhaseCount(self) -> int: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...


# Other functions
def get_available_classes() -> Any: ...
def get_class(class_name: str) -> Any: ...
def get_curated_classes() -> Any: ...
def get_extended_classes() -> Any: ...
def list_classes() -> None: ...
def setup_module_classes(*args: Any, **kwargs: Any) -> Any: ...

# Imported classes
class Any: ...
class Dict: ...
class List: ...

# Constants
CURATED_CLASSES: List[str]
EXTENDED_CLASSES: List[str]