"""
Type stubs for extractors.py

Auto-generated stub file.
"""

from typing import Any, Dict, List, Optional

class VertexExtractor:
    def extract_attributes(self: Any, vertex: Any, requested_attrs: List[str]) -> Dict[str, Any]: ...
    def get_default_attributes(self: Any) -> List[str]: ...
    def get_display_position(self: Any, vertex: Any) -> Optional[tuple]: ...

class EdgeExtractor:
    def extract_attributes(self: Any, edge: Any, requested_attrs: List[str]) -> Dict[str, Any]: ...
    def get_default_attributes(self: Any) -> List[str]: ...

class SWCPointExtractor:
    def extract_attributes(self: Any, vertex: Any, requested_attrs: List[str]) -> Dict[str, Any]: ...
    def get_default_attributes(self: Any) -> List[str]: ...
    def get_display_position(self: Any, vertex: Any) -> Optional[tuple]: ...

class BrainAnnotationExtractor:
    def extract_attributes(self: Any, vertex: Any, requested_attrs: List[str]) -> Dict[str, Any]: ...
    def get_default_attributes(self: Any) -> List[str]: ...

class SWCWeightedEdgeExtractor:
    def extract_attributes(self: Any, edge: Any, requested_attrs: List[str]) -> Dict[str, Any]: ...
    def get_default_attributes(self: Any) -> List[str]: ...

class AnnotationWeightedEdgeExtractor:
    def extract_attributes(self: Any, edge: Any, requested_attrs: List[str]) -> Dict[str, Any]: ...
    def get_default_attributes(self: Any) -> List[str]: ...

_VERTEX_EXTRACTORS: Any
_EDGE_EXTRACTORS: Any
def _detect_vertex_type(graph: Any) -> str: ...

def _detect_edge_type(graph: Any) -> str: ...
