"""Comprehensive type stubs for Java classes."""

from typing import Any, List, Dict, Optional, Union, overload, Set, Callable

class MultiViewer2D:
    """
    SNT MultiViewer2D class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: List[Any]) -> None: ...
    @overload
    def __init__(self, arg0: List[Any]) -> None: ...

    # Methods
    @staticmethod
    def main(arg0: List[str]) -> None: ...
    def save(self, arg0: str) -> None: ...
    def setAxesVisible(self, arg0: bool) -> None: ...
    @overload
    def setColorBarLegend(self, arg0: Any) -> None: ...
    @overload
    def setColorBarLegend(self, arg0: str, arg1: float, arg2: float) -> None: ...
    @overload
    def setColorBarLegend(self, arg0: Any, arg1: float, arg2: float, arg3: int) -> None: ...
    def setGridlinesVisible(self, arg0: bool) -> None: ...
    def setLabel(self, arg0: str) -> None: ...
    def setLayoutColumns(self, arg0: int) -> None: ...
    def setOutlineVisible(self, arg0: bool) -> None: ...
    def setTitle(self, arg0: str) -> None: ...
    def setXrange(self, arg0: float, arg1: float) -> None: ...
    def setYrange(self, arg0: float, arg1: float) -> None: ...
    def show(self) -> Any: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class MultiViewer3D:
    """
    SNT MultiViewer3D class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: List[Any]) -> None: ...
    @overload
    def __init__(self, arg0: List[Any]) -> None: ...

    # Methods
    def addColorBarLegend(self, arg0: Any) -> None: ...
    @staticmethod
    def main(arg0: List[str]) -> None: ...
    def setAnimationEnabled(self, arg0: bool) -> None: ...
    def setGap(self, arg0: int) -> None: ...
    def setLabels(self, arg0: List[Any]) -> None: ...
    def setLayoutColumns(self, arg0: int) -> None: ...
    def setTitle(self, arg0: str) -> None: ...
    def setViewMode(self, arg0: Any) -> None: ...
    def show(self) -> Any: ...
    def viewers(self) -> List[Any]: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class Viewer2D:
    """
    SNT Viewer2D class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: Any, arg1: Any) -> None: ...
    @overload
    def __init__(self, arg0: Any) -> None: ...

    # Fields
    INTER_NODE_ANGLE: str
    INTER_NODE_DISTANCE: str
    PATH_AVG_SPINE_DENSITY: str
    PATH_FRAME: str
    PATH_ORDER: str
    PATH_EXT_ANGLE: str
    PATH_EXT_ANGLE_REL: str
    PATH_EXT_ANGLE_XY: str
    PATH_EXT_ANGLE_XZ: str
    PATH_EXT_ANGLE_ZY: str
    PATH_DISTANCE: str
    PATH_LENGTH: str
    PATH_MEAN_RADIUS: str
    N_BRANCH_POINTS: str
    N_NODES: str
    N_SPINES: str
    NODE_RADIUS: str
    X_COORDINATES: str
    Y_COORDINATES: str
    Z_COORDINATES: str
    SHOLL_COUNTS: str
    STRAHLER_ORDERS: str
    VALUES: str
    TAG_FILENAME: str

    # Methods
    @overload
    def add(self, arg0: Any, arg1: str) -> None: ...
    @overload
    def add(self, arg0: Any, arg1: Any) -> None: ...
    @overload
    def add(self, arg0: List[Any], arg1: str) -> None: ...
    @overload
    def add(self, arg0: Any) -> None: ...
    @overload
    def add(self, arg0: Any, arg1: str, arg2: Any, arg3: float, arg4: float) -> None: ...
    @overload
    def add(self, arg0: Any, arg1: str, arg2: str) -> None: ...
    @overload
    def add(self, arg0: Any, arg1: str, arg2: str, arg3: float, arg4: float) -> None: ...
    @overload
    def addColorBarLegend(self, arg0: Any) -> None: ...
    @overload
    def addColorBarLegend(self) -> None: ...
    @overload
    def addColorBarLegend(self, arg0: Any, arg1: float, arg2: float) -> None: ...
    def addPolygon(self, arg0: Any, arg1: str) -> None: ...
    def addTree(self, arg0: Any) -> None: ...
    def addTrees(self, arg0: List[Any]) -> None: ...
    def getAvailableLuts(self) -> Set[Any]: ...
    def getChart(self) -> Any: ...
    def getColor(self, arg0: float) -> Any: ...
    def getColorRGB(self, arg0: float) -> Any: ...
    @overload
    def getColorTable(self, arg0: str) -> Any: ...
    @overload
    def getColorTable(self) -> Any: ...
    def getJFreeChart(self) -> Any: ...
    @staticmethod
    def getMetrics() -> List[Any]: ...
    def getMinMax(self) -> List[float]: ...
    def getMultiViewer(self) -> Any: ...
    def getNaNColor(self) -> Any: ...
    def getPlot(self) -> Any: ...
    def getTitle(self) -> str: ...
    def isIntegerScale(self) -> bool: ...
    def isNodeMapping(self) -> bool: ...
    @staticmethod
    def main(arg0: List[str]) -> None: ...
    @overload
    def map(self, arg0: List[Any], arg1: str, arg2: str) -> None: ...
    @overload
    def map(self, arg0: Any, arg1: Any, arg2: Any) -> None: ...
    @overload
    def map(self, arg0: Any, arg1: Any, arg2: Any) -> None: ...
    @overload
    def map(self, arg0: Any, arg1: str, arg2: Any) -> None: ...
    @overload
    def map(self, arg0: Any, arg1: str, arg2: str) -> None: ...
    @overload
    def map(self, arg0: str, arg1: Any) -> None: ...
    def mapTrees(self, arg0: List[Any], arg1: str) -> None: ...
    def setAxesVisible(self, arg0: bool) -> None: ...
    def setDefaultColor(self, arg0: Any) -> None: ...
    def setEqualizeAxes(self, arg0: bool) -> None: ...
    def setGridlinesVisible(self, arg0: bool) -> None: ...
    def setMinMax(self, arg0: float, arg1: float) -> None: ...
    def setNaNColor(self, arg0: Any) -> None: ...
    def setOutlineVisible(self, arg0: bool) -> None: ...
    def setPreferredSize(self, arg0: int, arg1: int) -> None: ...
    def setTitle(self, arg0: str) -> None: ...
    def setXrange(self, arg0: float, arg1: float) -> None: ...
    def setYrange(self, arg0: float, arg1: float) -> None: ...
    @overload
    def show(self) -> None: ...
    @overload
    def show(self, arg0: int, arg1: int) -> None: ...
    def showPlot(self) -> None: ...
    @overload
    @staticmethod
    def unMap(arg0: List[Any]) -> None: ...
    @overload
    @staticmethod
    def unMap(arg0: Any) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...

class Viewer3D:
    """
    SNT Viewer3D class with complete method signatures.
    Generated using Java reflection.
    """

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0: bool, arg1: str) -> None: ...
    @overload
    def __init__(self, arg0: Any) -> None: ...
    @overload
    def __init__(self, arg0: bool) -> None: ...

    # Methods
    @overload
    def add(self, arg0: List[Any], arg1: str) -> None: ...
    @overload
    def add(self, arg0: Any) -> None: ...
    @overload
    def addColorBarLegend(self, arg0: Any) -> None: ...
    @overload
    def addColorBarLegend(self, arg0: Any, arg1: float, arg2: float) -> None: ...
    @overload
    def addColorBarLegend(self, arg0: Any, arg1: float, arg2: float, arg3: Any, arg4: int, arg5: int) -> None: ...
    @overload
    def addColorBarLegend(self, arg0: Any, arg1: float, arg2: float, arg3: bool) -> None: ...
    def addLabel(self, arg0: str) -> None: ...
    def addMesh(self, arg0: Any) -> bool: ...
    def addTree(self, arg0: Any) -> None: ...
    @overload
    def addTrees(self, arg0: List[Any], arg1: str, arg2: List[str]) -> None: ...
    @overload
    def addTrees(self, arg0: List[Any], arg1: bool) -> None: ...
    @overload
    def addTrees(self, arg0: List[Any], arg1: str) -> None: ...
    @overload
    def addTrees(self, arg0: List[Any], arg1: str, arg2: float) -> None: ...
    def annotateLine(self, arg0: List[Any], arg1: str) -> Any: ...
    def annotatePlane(self, arg0: Any, arg1: Any, arg2: str) -> Any: ...
    @overload
    def annotatePoint(self, arg0: Any, arg1: str) -> Any: ...
    @overload
    def annotatePoint(self, arg0: Any, arg1: str, arg2: str, arg3: float) -> Any: ...
    def annotatePoints(self, arg0: List[Any], arg1: str) -> Any: ...
    @overload
    def annotateSurface(self, arg0: List[Any], arg1: str) -> Any: ...
    @overload
    def annotateSurface(self, arg0: List[Any], arg1: str, arg2: bool) -> Any: ...
    def assignUniqueColors(self, arg0: List[Any]) -> None: ...
    @overload
    def colorCode(self, arg0: str, arg1: str, arg2: Any) -> List[float]: ...
    @overload
    def colorCode(self, arg0: List[Any], arg1: str, arg2: Any) -> List[float]: ...
    def dispose(self) -> None: ...
    def duplicate(self) -> Any: ...
    def freeze(self) -> None: ...
    def getAnnotation(self, arg0: str) -> Any: ...
    def getAnnotations(self) -> List[Any]: ...
    @overload
    def getFrame(self) -> Any: ...
    @overload
    def getFrame(self, arg0: bool) -> Any: ...
    def getID(self) -> int: ...
    def getManagerPanel(self) -> Any: ...
    def getMesh(self, arg0: str) -> Any: ...
    @overload
    def getMeshes(self, arg0: bool) -> List[Any]: ...
    @overload
    def getMeshes(self) -> List[Any]: ...
    def getRecorder(self, arg0: bool) -> Any: ...
    def getTree(self, arg0: str) -> Any: ...
    @overload
    def getTrees(self) -> List[Any]: ...
    @overload
    def getTrees(self, arg0: bool) -> List[Any]: ...
    def isActive(self) -> bool: ...
    def isDarkModeOn(self) -> bool: ...
    def isSNTInstance(self) -> bool: ...
    def isSplitDendritesFromAxons(self) -> bool: ...
    def loadMesh(self, arg0: str, arg1: Any, arg2: float) -> Any: ...
    def loadRefBrain(self, arg0: str) -> Any: ...
    def logSceneControls(self) -> None: ...
    def mergeAnnotations(self, arg0: List[Any], arg1: str) -> Any: ...
    def rebuild(self, arg0: Any) -> None: ...
    def recordRotation(self, arg0: float, arg1: int, arg2: Any) -> None: ...
    def remove(self, arg0: Any) -> None: ...
    def removeAllMeshes(self) -> None: ...
    def removeAllTrees(self) -> None: ...
    @overload
    def removeAnnotation(self, arg0: Any) -> bool: ...
    @overload
    def removeAnnotation(self, arg0: str) -> bool: ...
    @overload
    def removeMesh(self, arg0: str) -> bool: ...
    @overload
    def removeMesh(self, arg0: Any) -> bool: ...
    @overload
    def removeTree(self, arg0: str) -> bool: ...
    @overload
    def removeTree(self, arg0: Any) -> bool: ...
    def resetView(self) -> None: ...
    def rotate(self, arg0: float) -> None: ...
    def runCommand(self, arg0: str) -> None: ...
    @overload
    def saveSnapshot(self) -> bool: ...
    @overload
    def saveSnapshot(self, arg0: str) -> bool: ...
    def setAnimationEnabled(self, arg0: bool) -> None: ...
    def setAxesLabels(self, arg0: List[str]) -> None: ...
    def setBounds(self, arg0: float, arg1: float, arg2: float, arg3: float, arg4: float, arg5: float) -> None: ...
    def setDefaultColor(self, arg0: Any) -> None: ...
    def setDefaultThickness(self, arg0: float) -> None: ...
    def setEnableDarkMode(self, arg0: bool) -> None: ...
    def setEnableDebugMode(self, arg0: bool) -> None: ...
    def setFont(self, arg0: Any, arg1: float, arg2: Any) -> None: ...
    def setFrameSize(self, arg0: int, arg1: int) -> None: ...
    def setLabelLocation(self, arg0: float, arg1: float) -> None: ...
    def setLookAndFeel(self, arg0: str) -> None: ...
    def setSceneUpdatesEnabled(self, arg0: bool) -> None: ...
    def setSnapshotDir(self, arg0: str) -> None: ...
    @overload
    def setSomaRadius(self, arg0: List[Any], arg1: float) -> None: ...
    @overload
    def setSomaRadius(self, arg0: float) -> None: ...
    @overload
    def setSomasDisplayed(self, arg0: bool) -> None: ...
    @overload
    def setSomasDisplayed(self, arg0: List[Any], arg1: bool) -> None: ...
    def setSplitDendritesFromAxons(self, arg0: bool) -> None: ...
    def setTitle(self, arg0: str) -> None: ...
    @overload
    def setTreeColor(self, arg0: List[Any], arg1: str, arg2: str) -> None: ...
    @overload
    def setTreeColor(self, arg0: List[Any], arg1: Any, arg2: str) -> None: ...
    @overload
    def setTreeThickness(self, arg0: float) -> None: ...
    @overload
    def setTreeThickness(self, arg0: float, arg1: str) -> None: ...
    @overload
    def setTreeThickness(self, arg0: List[Any], arg1: float, arg2: str) -> None: ...
    @overload
    def setViewMode(self, arg0: Any) -> None: ...
    @overload
    def setViewMode(self, arg0: str) -> None: ...
    def setViewPoint(self, arg0: float, arg1: float) -> None: ...
    def setViewPointCC(self, arg0: float, arg1: float) -> None: ...
    def setVisible(self, arg0: str, arg1: bool) -> None: ...
    @overload
    def show(self) -> Any: ...
    @overload
    def show(self, arg0: int, arg1: int) -> Any: ...
    def snapshot(self) -> Any: ...
    def syncPathManagerList(self) -> bool: ...
    @overload
    def translate(self, arg0: List[Any], arg1: Any) -> None: ...
    @overload
    def translate(self, arg0: Any, arg1: Any) -> None: ...
    def unfreeze(self) -> None: ...
    def updateColorBarLegend(self, arg0: float, arg1: float) -> None: ...
    def updateView(self) -> None: ...
    def validate(self) -> None: ...
    def zoomTo(self, arg0: List[Any]) -> None: ...

    def __getattr__(self, name: str) -> Any:
        """Dynamic attribute access for additional methods."""
        ...

    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        """Make the class callable."""
        ...


# Other functions
def get_available_classes() -> Any: ...
def get_class(class_name: str) -> Any: ...
def get_curated_classes() -> Any: ...
def get_extended_classes() -> Any: ...
def list_classes() -> None: ...
def setup_module_classes(*args: Any, **kwargs: Any) -> Any: ...

# Imported classes
class Any: ...
class Callable: ...
class Dict: ...
class List: ...

# Constants
CURATED_CLASSES: List[str]
EXTENDED_CLASSES: List[str]